import { ColorArrayType } from '../type';
/**
 * WCAG 2.1 对比度值计算
 *
 * @param rgbA 对比颜色A (rgb格式)
 * @param rgbB 对比颜色B (rgb格式)
 * @param normalize 保证对比度结果总是大于1，即使颜色A的相对亮度大于B
 *
 * @returns WCAG 2.1 对比度值 (x:1)
 */
export declare function wcagContrast(rgbA: ColorArrayType, rgbB: ColorArrayType, normalize?: boolean): number;
/**
 * 计算W3定义的相对亮度值，值介于0~1之间，0对应黑色，1对应白色
 * see: https://www.w3.org/TR/WCAG21/#dfn-relative-luminance
 *
 * @param rgbColor rgb格式的待计算颜色 (分量值在0~255区间)
 * @param sRGB 输入颜色为sRGB（需要sRGB解码）
 *
 * @returns 亮度值
 */
export declare const getW3RelativeLuminance: (rgbColor: ColorArrayType, sRGB?: boolean) => number;
/**
 * 对 RGB 颜色数组进行 sRGB 解码，
 * 若参数scaled为true（默认值）则输入和返回的颜色分量值均为0~255区间
 * 否则为0～1区间
 *
 * @param rgbColor sRGB编码后的rgb颜色数组
 * @param scaled 颜色分量值是否已缩放到0~255区间（chroma.js 默认），否则为0～1区间
 *
 * @returns 解码后的线性RGB颜色数组
 */
export declare const sRGBDecode: (rgbColor: ColorArrayType, scaled?: boolean) => number[];
