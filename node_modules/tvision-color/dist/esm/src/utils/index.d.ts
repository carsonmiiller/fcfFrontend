import { ColorArrayType } from '../type';
/**
* lab转rgb
* @param {ColorArrayType} lab lab颜色
* @return {ColorArrayType}
*/
declare function labToRgb(lab: ColorArrayType): number[];
/**
* rgb转lab
* @param {ColorArrayType} rgb rgb颜色
* @return {ColorArrayType}
*/
declare function rgbToLab(rgb: ColorArrayType): number[];
/**
* 验证rgb
* @param {ColorArrayType} rgb rgb颜色
* @return {ColorArrayType}
*/
declare function validateRgb(rgb: ColorArrayType): boolean;
/**
* lab转hex
* @param {ColorArrayType} lab lab颜色
* @return {string}
*/
declare function labToRgbHex(lab: ColorArrayType): string;
/**
* lab转hcl
* @param {ColorArrayType} lab lab颜色
* @return {string}
*/
declare function labToHcl(lab: ColorArrayType): number[];
/**
* 颜色差异化排序
* @param {any} distance 计算颜色差异
* @return {string[]}
*/
declare function diffSort(distance: any, colors: ColorArrayType[]): (ColorArrayType | undefined)[];
/**
* 计算颜色差异
* @param {ColorArrayType} lab1 lab颜色1
* @param {ColorArrayType} lab2 lab颜色2
* @return {number}
*/
declare function distance(lab1: ColorArrayType, lab2: ColorArrayType): number;
/**
 * 对比度值计算
 *
 * @param rgbA 对比颜色A (rgb格式)
 * @param rgbB 对比颜色B (rgb格式)
 */
declare function contrast(rgbA: ColorArrayType, rgbB: ColorArrayType): number;
declare const exportObj: {
    validateRgb: typeof validateRgb;
    labToRgb: typeof labToRgb;
    labToRgbHex: typeof labToRgbHex;
    rgbToLab: typeof rgbToLab;
    labToHcl: typeof labToHcl;
    diffSort: typeof diffSort;
    distance: typeof distance;
    contrast: typeof contrast;
    sortColorsByComplementary: (colors: string[], color: string) => string[];
    generateLockedColor: (color: string) => [number, number, number];
    getW3RelativeLuminance: (rgbColor: ColorArrayType, sRGB?: boolean) => number;
    sRGBDecode: (rgbColor: ColorArrayType, scaled?: boolean) => number[];
};
export default exportObj;
