import { IntelligentOption, IntelligentGradationOption } from './intelligent';
import type { ColorType, ColorFormat } from './type';
declare type ColorTransformFunc = <T extends ColorFormat>(color: ColorType, from: (ColorFormat | 'name'), to: T) => T extends 'hex' ? string : number[];
export declare class Color {
    /**
    * 将字符串中的数字提取出来
    * @param {string} color 颜色字符串rgb|hsl|cmyk
    * @return {number[]}
    */
    static color2arr(color: string): number[];
    /**
    * 颜色格式转换
    * @param {string|number[]} color hex颜色|字符串颜色|数组颜色
    * @param {ColorFormat} from 传入的颜色 支持 hex|rgb|hsv|hsl|cmyk|lab|lch|name 等
    * @param {ColorFormat} to 目标颜色 支持 hex|rgb|hsv|hsl|cmyk|lab|lch 等
    * @return {string|number[]}
    */
    static colorTransform: ColorTransformFunc;
    /**
    * 计算颜色差异，使用deltaE2000计算
    * @param {string} color1 hex格式颜色
    * @param {string} color2 hex格式颜色
    * @return {number}
    */
    static similar(color1: string, color2: string): number;
    /**
    * 计算颜色对比度，使用 WCAG 2.1 方案计算
    * @param {string} color1 hex格式颜色
    * @param {string} color2 hex格式颜色
    * @return {number}
     */
    static contrast(color1: string, color2: string): number;
    /**
    * 获取平滑色阶
    * @param {string} color1 hex格式颜色
    * @param {string} color2 hex格式颜色
    * @param {number} number 色阶个数
    * @return {string[]}
    */
    static scale(color1: string, color2: string, number: number): string[];
    /**
    * 分裂互补排序
    * @param {string[]} colors 待排序颜色数组
    * @param {string} color 主色
    * @return {string[]}
    */
    static sortColorsByComplementary(colors: string[], color: string): string[];
    static getRandomPalette(option: IntelligentOption): string[];
    static getPaletteByGradation(option: IntelligentGradationOption): string[][];
    static getRandomPaletteByGradation(option: IntelligentGradationOption): string[][];
}
export {};
