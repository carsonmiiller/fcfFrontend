{"version":3,"file":"index.js","sources":["../../../../../src/color-picker/components/panel/format/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { upperCase } from 'lodash';\nimport Select from '../../../../select';\nimport FormatInput from './inputs';\nimport Color from '../../../../_common/js/color-picker/color';\nimport { FORMATS } from '../../../const';\nimport { TdColorPickerProps } from '../../../type';\n\nexport interface TdColorFormatProps extends TdColorPickerProps {\n  onModeChange: Function;\n  onInputChange: Function;\n  baseClassName: string;\n  color: Color;\n}\n\nconst FormatPanel = (props: TdColorFormatProps) => {\n  const { baseClassName, format, onModeChange } = props;\n  const [formatMode, setFormatMode] = useState(format);\n\n  const handleModeChange = (v: TdColorPickerProps['format']) => {\n    setFormatMode(v);\n    onModeChange(v);\n  };\n\n  const formats: TdColorPickerProps['format'][] = [...FORMATS];\n\n  return (\n    <div className={`${baseClassName}__format`}>\n      <div className={`${baseClassName}__format--item`}>\n        <Select\n          size=\"medium\"\n          className={`${baseClassName}__format-mode-select`}\n          popupProps={{\n            overlayClassName: `${baseClassName}__select-options`,\n          }}\n          value={formatMode}\n          onChange={handleModeChange}\n        >\n          {formats.map((item) => (\n            <Select.Option key={item} value={item} label={upperCase(item)} style={{ fontSize: '12px' }} />\n          ))}\n        </Select>\n      </div>\n      <div className={`${baseClassName}__format--item`}>\n        <FormatInput {...props} format={formatMode} />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(FormatPanel);\n"],"names":["FormatPanel","props","baseClassName","format","onModeChange","useState","formatMode","setFormatMode","handleModeChange","v","formats","FORMATS","React","createElement","className","Select","size","popupProps","overlayClassName","value","onChange","map","item","Option","key","label","upperCase","style","fontSize","FormatInput","memo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,EAAA,IAAQC,aAAR,GAAgDD,KAAhD,CAAQC,aAAR;AAAA,MAAuBC,MAAvB,GAAgDF,KAAhD,CAAuBE,MAAvB;AAAA,MAA+BC,YAA/B,GAAgDH,KAAhD,CAA+BG,YAA/B,CAAA;;EACA,IAAoCC,SAAAA,GAAAA,QAAQ,CAACF,MAAD,CAA5C;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOG,UAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,aAAnB,GAAA,UAAA,CAAA,CAAA,CAAA,CAAA;;AACA,EAAA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAO;IAC9BF,aAAa,CAACE,CAAD,CAAb,CAAA;IACAL,YAAY,CAACK,CAAD,CAAZ,CAAA;GAFF,CAAA;;EAIA,IAAMC,OAAO,GAAOC,kBAAAA,CAAAA,OAAP,CAAb,CAAA;;AACA,EAAA,sBAAuBC,KAAK,CAACC,aAAN,CAAoB,KAApB,EAA2B;AAChDC,IAAAA,SAAS,YAAKZ,aAAL,EAAA,UAAA,CAAA;AADuC,GAA3B,iBAEJU,KAAK,CAACC,aAAN,CAAoB,KAApB,EAA2B;AAC5CC,IAAAA,SAAS,YAAKZ,aAAL,EAAA,gBAAA,CAAA;AADmC,GAA3B,iBAEAU,KAAK,CAACC,aAAN,CAAoBE,MAApB,EAA4B;AAC7CC,IAAAA,IAAI,EAAE,QADuC;IAE7CF,SAAS,EAAA,EAAA,CAAA,MAAA,CAAKZ,aAAL,EAFoC,sBAAA,CAAA;AAG7Ce,IAAAA,UAAU,EAAE;AACVC,MAAAA,gBAAgB,YAAKhB,aAAL,EAAA,kBAAA,CAAA;KAJ2B;AAM7CiB,IAAAA,KAAK,EAAEb,UANsC;AAO7Cc,IAAAA,QAAQ,EAAEZ,gBAAAA;AAPmC,GAA5B,EAQhBE,OAAO,CAACW,GAAR,CAAY,UAACC,IAAD,EAAA;IAAA,sBAA0BV,KAAK,CAACC,aAAN,CAAoBE,MAAM,CAACQ,MAA3B,EAAmC;AAC1EC,MAAAA,GAAG,EAAEF,IADqE;AAE1EH,MAAAA,KAAK,EAAEG,IAFmE;AAG1EG,MAAAA,KAAK,EAAEC,SAAS,CAACJ,IAAD,CAH0D;AAI1EK,MAAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,MAAA;AAAZ,OAAA;AAJmE,KAAnC,CAA1B,CAAA;GAAZ,CARgB,CAFA,CAFI,iBAiBAhB,KAAK,CAACC,aAAN,CAAoB,KAApB,EAA2B;AAChDC,IAAAA,SAAS,YAAKZ,aAAL,EAAA,gBAAA,CAAA;GADY,iBAEJU,KAAK,CAACC,aAAN,CAAoBgB,WAApB,kCACd5B,KADc,CAAA,EAAA,EAAA,EAAA;AAEjBE,IAAAA,MAAM,EAAEG,UAAAA;AAFS,GAAA,CAAA,CAFI,CAjBA,CAAvB,CAAA;AAuBD,CA/BD,CAAA;;AAgCA,oBAAA,aAAeM,KAAK,CAACkB,IAAN,CAAW9B,WAAX,CAAf;;;;"}