/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _toConsumableArray } from '../_chunks/dep-bd2639ad.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { forwardRef, useState, useEffect } from 'react';
import classNames from 'classnames';
import dayjs from 'dayjs';
import useConfig from '../_util/useConfig.js';
import { RangeInputPopup } from '../range-input/index.js';
import DateRangePickerPanel from './panel/DateRangePickerPanel.js';
import useRange from './hooks/useRange.js';
import useFormat from './hooks/useFormat.js';
import { subtractMonth, addMonth, extractTimeObj } from '../_common/js/date-picker/utils-new.js';
import { dateRangePickerDefaultProps } from './defaultProps.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-12718f01.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import '../range-input/RangeInput.js';
import '../_chunks/dep-8ff4a741.js';
import 'tdesign-icons-react';
import '../input/index.js';
import '../input/Input.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../_util/helper.js';
import '../_chunks/dep-9be29560.js';
import '../_chunks/dep-e8f6f682.js';
import '../_chunks/dep-863396c0.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../input/InputGroup.js';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../input/defaultProps.js';
import './style/css.js';
import '../input/type.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/useAnimation.js';
import '../_util/composeRefs.js';
import '../common/Portal.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_util/easing.js';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/utils/getTransitionParams.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-0a541e21.js';
import '../_chunks/dep-5ed520e8.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/type.js';
import '../select-input/useOverlayStyle.js';
import '../range-input/type.js';
import './panel/PanelContent.js';
import './base/Header.js';
import '../select/index.js';
import '../select/base/Select.js';
import '../_chunks/dep-71b3c60f.js';
import '../_chunks/dep-084711a9.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag/type.js';
import '../select/util/helper.js';
import '../select/base/OptionGroup.js';
import '../select/defaultProps.js';
import '../select/base/Option.js';
import '../_chunks/dep-1feb6aff.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../common/FakeArrow.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/type.js';
import '../select-input/index.js';
import '../select-input/SelectInput.js';
import '../select-input/useSingle.js';
import '../_chunks/dep-14dc871a.js';
import '../_chunks/dep-d8cdbac1.js';
import '../_chunks/dep-b9ff0943.js';
import '../_chunks/dep-3cff266a.js';
import '../_chunks/dep-43a6fda3.js';
import '../select-input/useMultiple.js';
import '../tag-input/index.js';
import '../tag-input/TagInput.js';
import '../_util/useDragSorter.js';
import '../tag-input/useTagScroll.js';
import '../tag-input/useTagList.js';
import 'lodash';
import '../tag-input/useHover.js';
import '../tag-input/defaultProps.js';
import '../tag-input/type.js';
import '../select-input/defaultProps.js';
import '../select-input/type.js';
import '../select/base/PopupContent.js';
import '../select/type.js';
import '../common/Jumper.js';
import '../button/index.js';
import '../button/Button.js';
import '../button/defaultProps.js';
import '../button/type.js';
import './base/Table.js';
import './base/Cell.js';
import '../time-picker/panel/TimePickerPanel.js';
import '../_chunks/dep-0b46b8b5.js';
import '../_chunks/dep-c739cdde.js';
import '../_chunks/dep-87214e71.js';
import '../time-picker/hooks/useTimePickerTextConfig.js';
import '../_common/js/time-picker/const.js';
import '../_common/js/time-picker/utils.js';
import './panel/ExtraContent.js';
import './base/Footer.js';
import './panel/useTableData.js';
import './hooks/useDisableDate.js';
import '../_chunks/dep-3d09d1f3.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DateRangePicker = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var className = props.className,
      style = props.style,
      disabled = props.disabled,
      mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      disableDate = props.disableDate,
      _props$firstDayOfWeek = props.firstDayOfWeek,
      firstDayOfWeek = _props$firstDayOfWeek === void 0 ? globalDatePickerConfig.firstDayOfWeek : _props$firstDayOfWeek,
      presets = props.presets,
      timePickerProps = props.timePickerProps,
      onPick = props.onPick;

  var _useRange = useRange(props),
      inputValue = _useRange.inputValue,
      popupVisible = _useRange.popupVisible,
      rangeInputProps = _useRange.rangeInputProps,
      popupProps = _useRange.popupProps,
      value = _useRange.value,
      year = _useRange.year,
      month = _useRange.month,
      timeValue = _useRange.timeValue,
      activeIndex = _useRange.activeIndex,
      isHoverCell = _useRange.isHoverCell,
      setActiveIndex = _useRange.setActiveIndex,
      onChange = _useRange.onChange,
      setIsHoverCell = _useRange.setIsHoverCell,
      setInputValue = _useRange.setInputValue,
      setPopupVisible = _useRange.setPopupVisible,
      setTimeValue = _useRange.setTimeValue,
      setYear = _useRange.setYear,
      setMonth = _useRange.setMonth,
      isFirstValueSelected = _useRange.isFirstValueSelected,
      setIsFirstValueSelected = _useRange.setIsFirstValueSelected,
      cacheValue = _useRange.cacheValue,
      setCacheValue = _useRange.setCacheValue;

  var _useFormat = useFormat({
    mode: mode,
    value: value,
    enableTimePicker: enableTimePicker,
    format: props.format,
    valueType: props.valueType
  }),
      formatTime = _useFormat.formatTime,
      formatDate = _useFormat.formatDate,
      isValidDate = _useFormat.isValidDate,
      format = _useFormat.format,
      timeFormat = _useFormat.timeFormat;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isSelected = _useState2[0],
      setIsSelected = _useState2[1];

  useEffect(function () {
    if (popupVisible) {
      setIsSelected(false);
      setIsFirstValueSelected(false);
      setCacheValue(formatDate(value || []));
      setTimeValue(formatTime(value || [dayjs().format(timeFormat), dayjs().format(timeFormat)]));
    }
  }, [value, popupVisible]);

  function onCellMouseEnter(date) {
    setIsHoverCell(true);

    var nextValue = _toConsumableArray(inputValue);

    nextValue[activeIndex] = formatDate(date);
    setInputValue(nextValue);
  }

  function onCellMouseLeave() {
    setIsHoverCell(false);
    setInputValue(cacheValue);
  }

  function onCellClick(date, _ref) {
    var e = _ref.e,
        partial = _ref.partial;
    onPick === null || onPick === void 0 ? void 0 : onPick(date, {
      e: e,
      partial: partial
    });
    setIsHoverCell(false);
    setIsSelected(true);

    var nextValue = _toConsumableArray(inputValue);

    nextValue[activeIndex] = formatDate(date);
    setCacheValue(nextValue);
    setInputValue(nextValue);

    if (mode === "date") {
      var partialIndex = partial === "start" ? 0 : 1;
      var isAdditional = dayjs(date).month() !== month[partialIndex];

      if (isAdditional) {
        if (activeIndex === 0) setMonth([dayjs(date).month(), Math.min(dayjs(date).month() + 1, 11)]);
        if (activeIndex === 1) setMonth([Math.max(dayjs(date).month() - 1, 0), dayjs(date).month()]);
      }
    }

    if (enableTimePicker) return;
    var notValidIndex = nextValue.findIndex(function (v) {
      return !v || !isValidDate(v);
    });

    if (notValidIndex === -1 && nextValue.length === 2 && !enableTimePicker && isFirstValueSelected) {
      onChange(formatDate(nextValue, "valueType"), {
        dayjsValue: nextValue.map(function (v) {
          return dayjs(v);
        }),
        trigger: "pick"
      });
      setIsFirstValueSelected(false);
      setPopupVisible(false);
    } else if (notValidIndex !== -1) {
      setActiveIndex(notValidIndex);
    } else {
      setActiveIndex(activeIndex ? 0 : 1);
    }

    setIsFirstValueSelected(true);
  }

  function onJumperClick(flag, _ref2) {
    var partial = _ref2.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    var monthCountMap = {
      date: 1,
      month: 12,
      year: 120
    };
    var monthCount = monthCountMap[mode] || 0;
    var current = new Date(year[partialIndex], month[partialIndex]);
    var next = null;

    if (flag === -1) {
      next = subtractMonth(current, monthCount);
    } else if (flag === 0) {
      next = new Date();
    } else if (flag === 1) {
      next = addMonth(current, monthCount);
    }

    var nextYear = _toConsumableArray(year);

    nextYear[partialIndex] = next.getFullYear();

    var nextMonth = _toConsumableArray(month);

    nextMonth[partialIndex] = next.getMonth();

    if (partialIndex === 0) {
      nextYear[1] = Math.max(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      }
    }

    if (partialIndex === 1) {
      nextYear[0] = Math.min(nextYear[0], nextYear[1]);

      if (nextYear[0] === nextYear[1]) {
        nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
      }
    }

    setYear(nextYear);
    setMonth(nextMonth);
  }

  function onTimePickerChange(val) {
    var _extractTimeObj = extractTimeObj(val),
        hours = _extractTimeObj.hours,
        minutes = _extractTimeObj.minutes,
        seconds = _extractTimeObj.seconds,
        milliseconds = _extractTimeObj.milliseconds,
        meridiem = _extractTimeObj.meridiem;

    var nextInputValue = _toConsumableArray(inputValue);

    var changedInputValue = inputValue[activeIndex];
    var currentDate = !dayjs(changedInputValue, format).isValid() ? dayjs().year(year[activeIndex]).month(month[activeIndex]) : dayjs(changedInputValue, format);
    var nextHours = hours;
    if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
    if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
    var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
    nextInputValue[activeIndex] = nextDate;

    var nextTimeValue = _toConsumableArray(timeValue);

    nextTimeValue[activeIndex] = val;
    setTimeValue(nextTimeValue);
    setIsSelected(true);
    setInputValue(formatDate(nextInputValue));
    setCacheValue(formatDate(nextInputValue));
  }

  function onConfirmClick() {
    var nextValue = _toConsumableArray(inputValue);

    var notValidIndex = nextValue.findIndex(function (v) {
      return !v || !isValidDate(v);
    });

    if (notValidIndex === -1 && nextValue.length === 2 && isFirstValueSelected) {
      onChange(formatDate(nextValue, "valueType"), {
        dayjsValue: nextValue.map(function (v) {
          return dayjs(v);
        }),
        trigger: "confirm"
      });
      setYear(nextValue.map(function (v) {
        return dayjs(v, format).year();
      }));
      setMonth(nextValue.map(function (v) {
        return dayjs(v, format).month();
      }));
      setPopupVisible(false);
    } else if (notValidIndex !== -1) {
      setActiveIndex(notValidIndex);
    } else {
      setActiveIndex(activeIndex ? 0 : 1);
    }

    setIsFirstValueSelected(true);
  }

  function onPresetClick(preset) {
    var presetValue = preset;

    if (typeof preset === "function") {
      presetValue = preset();
    }

    if (!Array.isArray(presetValue)) {
      console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
    } else {
      onChange(formatDate(presetValue, "valueType"), {
        dayjsValue: presetValue.map(function (p) {
          return dayjs(p);
        }),
        trigger: "preset"
      });
      setPopupVisible(false);
    }
  }

  function onYearChange(nextVal, _ref3) {
    var partial = _ref3.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextYear = _toConsumableArray(year);

    nextYear[partialIndex] = nextVal;
    if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
    if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
    setYear(nextYear);
  }

  function onMonthChange(nextVal, _ref4) {
    var partial = _ref4.partial;
    var partialIndex = partial === "start" ? 0 : 1;
    if (enableTimePicker) partialIndex = activeIndex;

    var nextMonth = _toConsumableArray(month);

    nextMonth[partialIndex] = nextVal;

    if (year[0] === year[1]) {
      if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
      if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
    }

    setMonth(nextMonth);
  }

  var panelProps = {
    hoverValue: isHoverCell ? inputValue : [],
    value: isSelected ? cacheValue : value,
    isFirstValueSelected: isFirstValueSelected,
    year: year,
    month: month,
    mode: mode,
    format: format,
    presets: presets,
    timeValue: timeValue,
    disableDate: disableDate,
    firstDayOfWeek: firstDayOfWeek,
    timePickerProps: timePickerProps,
    enableTimePicker: enableTimePicker,
    activeIndex: activeIndex,
    onCellClick: onCellClick,
    onCellMouseEnter: onCellMouseEnter,
    onCellMouseLeave: onCellMouseLeave,
    onJumperClick: onJumperClick,
    onConfirmClick: onConfirmClick,
    onPresetClick: onPresetClick,
    onYearChange: onYearChange,
    onMonthChange: onMonthChange,
    onTimePickerChange: onTimePickerChange
  };
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-date-range-picker"), className),
    style: style,
    ref: ref
  }, /* @__PURE__ */React.createElement(RangeInputPopup, {
    disabled: disabled,
    inputValue: inputValue,
    popupProps: popupProps,
    rangeInputProps: rangeInputProps,
    popupVisible: popupVisible,
    panel: /* @__PURE__ */React.createElement(DateRangePickerPanel, _objectSpread({}, panelProps))
  }));
});
DateRangePicker.displayName = "DateRangePicker";
DateRangePicker.defaultProps = dateRangePickerDefaultProps;

export { DateRangePicker as default };
//# sourceMappingURL=DateRangePicker.js.map
