/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../../_chunks/dep-744640f5.js';
import React, { useRef, useState, useEffect } from 'react';
import { CalendarIcon } from 'tdesign-icons-react';
import dayjs from 'dayjs';
import classNames from 'classnames';
import useConfig from '../../_util/useConfig.js';
import useControlled from '../../hooks/useControlled.js';
import useFormat from './useFormat.js';
import '../../_chunks/dep-0e5be0b2.js';
import '../../_chunks/dep-e3ed7551.js';
import '../../_chunks/dep-12690e1d.js';
import '../../_chunks/dep-ac0cc4dd.js';
import '../../_chunks/dep-e3ab6b0d.js';
import '../../_chunks/dep-cc4f2bae.js';
import '../../_chunks/dep-531703d1.js';
import '../../_chunks/dep-21baa91f.js';
import '../../_chunks/dep-4705ff31.js';
import '../../_chunks/dep-38424935.js';
import '../../_chunks/dep-ad150068.js';
import '../../_chunks/dep-d5f141ac.js';
import '../../_chunks/dep-1b27e5c2.js';
import '../../_chunks/dep-6963df41.js';
import '../../_chunks/dep-8fb1642c.js';
import '../../_chunks/dep-bcb59ae2.js';
import '../../_chunks/dep-12718f01.js';
import '../../_chunks/dep-09c318fb.js';
import '../../_chunks/dep-048c506f.js';
import '../../_chunks/dep-febf8cf9.js';
import '../../_chunks/dep-074143e4.js';
import '../../_chunks/dep-a1fd625f.js';
import '../../_chunks/dep-f5ab8a5c.js';
import '../../_chunks/dep-67009882.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../config-provider/zh_CN_config.js';
import '../../_chunks/dep-0db6b692.js';
import '../../_chunks/dep-6d2697ef.js';
import '../../_chunks/dep-42701b6c.js';
import '../../_chunks/dep-e8f6f682.js';
import '../../_chunks/dep-863396c0.js';
import '../../_util/noop.js';
import '../../_common/js/date-picker/utils-new.js';
import '../../_chunks/dep-3d09d1f3.js';
import '../../_chunks/dep-87214e71.js';
import '../../_chunks/dep-5ed520e8.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useSingle(props) {
  var _popupPropsFromProps$;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var name = "".concat(classPrefix, "-date-picker");
  var inputRef = useRef();
  var mode = props.mode,
      prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      inputPropsFromProps = props.inputProps,
      popupPropsFromProps = props.popupProps,
      allowInput = props.allowInput,
      clearable = props.clearable,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? globalDatePickerConfig.placeholder[mode] : _props$placeholder,
      _onBlur = props.onBlur,
      _onFocus = props.onFocus,
      onInput = props.onInput;

  var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useFormat = useFormat({
    value: value,
    mode: mode,
    format: props.format,
    valueType: props.valueType,
    enableTimePicker: props.enableTimePicker
  }),
      isValidDate = _useFormat.isValidDate,
      formatDate = _useFormat.formatDate,
      formatTime = _useFormat.formatTime;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];

  var _useState5 = useState(formatTime(value)),
      _useState6 = _slicedToArray(_useState5, 2),
      timeValue = _useState6[0],
      setTimeValue = _useState6[1];

  var _useState7 = useState(dayjs(value).month() || new Date().getMonth()),
      _useState8 = _slicedToArray(_useState7, 2),
      month = _useState8[0],
      setMonth = _useState8[1];

  var _useState9 = useState(dayjs(value).year() || new Date().getFullYear()),
      _useState10 = _slicedToArray(_useState9, 2),
      year = _useState10[0],
      setYear = _useState10[1];

  var _useState11 = useState(formatDate(value)),
      _useState12 = _slicedToArray(_useState11, 2),
      inputValue = _useState12[0],
      setInputValue = _useState12[1];

  var _useState13 = useState(formatDate(value)),
      _useState14 = _slicedToArray(_useState13, 2),
      cacheValue = _useState14[0],
      setCacheValue = _useState14[1];

  var inputProps = _objectSpread(_objectSpread({}, inputPropsFromProps), {}, {
    ref: inputRef,
    clearable: clearable,
    prefixIcon: prefixIcon,
    readonly: !allowInput,
    placeholder: placeholder,
    suffixIcon: suffixIcon || /* @__PURE__ */React.createElement(CalendarIcon, null),
    className: classNames(_defineProperty({}, "".concat(name, "__input--placeholder"), isHoverCell)),
    onClear: function onClear(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      setPopupVisible(false);
      onChange("", {
        dayjsValue: dayjs(""),
        trigger: "clear"
      });
    },
    onBlur: function onBlur(val, _ref2) {
      var e = _ref2.e;
      _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur({
        value: val,
        e: e
      });
    },
    onFocus: function onFocus(_, _ref3) {
      var e = _ref3.e;
      _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus({
        value: value,
        e: e
      });
    },
    onChange: function onChange(val, _ref4) {
      var e = _ref4.e;
      onInput === null || onInput === void 0 ? void 0 : onInput({
        input: val,
        value: value,
        e: e
      });
      setInputValue(val);
      if (!isValidDate(val)) return;
      var newMonth = dayjs(val).month();
      var newYear = dayjs(val).year();
      var newTime = formatTime(val);
      !Number.isNaN(newYear) && setYear(newYear);
      !Number.isNaN(newMonth) && setMonth(newMonth);
      !Number.isNaN(newTime) && setTimeValue(newTime);
    },
    onEnter: function onEnter(val) {
      if (!isValidDate(val) && !isValidDate(value)) return;
      setPopupVisible(false);

      if (isValidDate(val)) {
        onChange(formatDate(val, "valueType"), {
          dayjsValue: dayjs(val),
          trigger: "enter"
        });
      } else if (isValidDate(value)) {
        setInputValue(formatDate(value));
      } else {
        setInputValue("");
      }
    }
  });

  var popupProps = _objectSpread(_objectSpread({
    expandAnimation: true
  }, popupPropsFromProps), {}, {
    overlayStyle: (_popupPropsFromProps$ = popupPropsFromProps === null || popupPropsFromProps === void 0 ? void 0 : popupPropsFromProps.overlayStyle) !== null && _popupPropsFromProps$ !== void 0 ? _popupPropsFromProps$ : {
      width: "auto"
    },
    overlayClassName: classNames(popupPropsFromProps === null || popupPropsFromProps === void 0 ? void 0 : popupPropsFromProps.overlayClassName, "".concat(name, "__panel-container")),
    onVisibleChange: function onVisibleChange(visible) {
      setPopupVisible(visible);

      if (!visible) {
        setIsHoverCell(false);
        setInputValue(formatDate(value));
      }
    }
  });

  useEffect(function () {
    if (!value) {
      setInputValue("");
      setCacheValue("");
      setTimeValue(formatTime(new Date()));
      return;
    }

    if (!isValidDate(value, "valueType")) return;
    setInputValue(formatDate(value));
    setCacheValue(formatDate(value));
    setTimeValue(formatTime(value));
  }, [value]);
  return {
    year: year,
    month: month,
    value: value,
    timeValue: timeValue,
    inputValue: inputValue,
    popupVisible: popupVisible,
    inputProps: inputProps,
    popupProps: popupProps,
    inputRef: inputRef,
    cacheValue: cacheValue,
    onChange: onChange,
    setYear: setYear,
    setMonth: setMonth,
    setTimeValue: setTimeValue,
    setIsHoverCell: setIsHoverCell,
    setInputValue: setInputValue,
    setPopupVisible: setPopupVisible,
    setCacheValue: setCacheValue
  };
}

export { useSingle as default };
//# sourceMappingURL=useSingle.js.map
