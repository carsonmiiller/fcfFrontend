import React from 'react';
import dayjs from 'dayjs';
import { TdDatePickerProps, DateValue } from '../type';
export default function useSingle(props: TdDatePickerProps): {
    year: number;
    month: number;
    value: DateValue;
    timeValue: any;
    inputValue: any;
    popupVisible: boolean;
    inputProps: {
        ref: React.MutableRefObject<HTMLInputElement>;
        clearable: boolean;
        prefixIcon: import("../../common").TElement;
        readonly: boolean;
        placeholder: string;
        suffixIcon: JSX.Element | (() => React.ReactElement<any, string | React.JSXElementConstructor<any>>);
        className: string;
        onClear: ({ e }: {
            e: any;
        }) => void;
        onBlur: (val: string, { e }: {
            e: any;
        }) => void;
        onFocus: (_: string, { e }: {
            e: any;
        }) => void;
        onChange: (val: string, { e }: {
            e: any;
        }) => void;
        onEnter: (val: string) => void;
        align?: "center" | "left" | "right";
        autocomplete?: string;
        autofocus?: boolean;
        autoWidth?: boolean;
        disabled?: boolean;
        format?: import("../..").InputFormatType;
        inputClass?: import("../../common").ClassName;
        label?: React.ReactNode;
        maxcharacter?: number;
        maxlength?: number;
        name?: string;
        showClearIconOnEmpty?: boolean;
        size?: import("../../common").SizeEnum;
        status?: "error" | "default" | "success" | "warning";
        suffix?: React.ReactNode;
        tips?: React.ReactNode;
        type?: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
        value?: import("../..").InputValue;
        defaultValue?: import("../..").InputValue;
        onClick?: (context: {
            e: React.MouseEvent<HTMLDivElement, MouseEvent>;
        }) => void;
        onCompositionend?: (value: import("../..").InputValue, context: {
            e: React.CompositionEvent<HTMLInputElement>;
        }) => void;
        onCompositionstart?: (value: import("../..").InputValue, context: {
            e: React.CompositionEvent<HTMLInputElement>;
        }) => void;
        onKeydown?: (value: import("../..").InputValue, context: {
            e: React.KeyboardEvent<HTMLInputElement>;
        }) => void;
        onKeypress?: (value: import("../..").InputValue, context: {
            e: React.KeyboardEvent<HTMLInputElement>;
        }) => void;
        onKeyup?: (value: import("../..").InputValue, context: {
            e: React.KeyboardEvent<HTMLInputElement>;
        }) => void;
        onMouseenter?: (context: {
            e: React.MouseEvent<HTMLDivElement, MouseEvent>;
        }) => void;
        onMouseleave?: (context: {
            e: React.MouseEvent<HTMLDivElement, MouseEvent>;
        }) => void;
        onPaste?: (context: {
            e: React.ClipboardEvent<HTMLInputElement>;
            pasteValue: string;
        }) => void;
        onWheel?: (context: {
            e: React.WheelEvent<HTMLDivElement>;
        }) => void;
        style?: React.CSSProperties;
    };
    popupProps: {
        overlayStyle: React.CSSProperties | ((triggerElement: HTMLElement, popupElement: HTMLElement) => React.CSSProperties);
        overlayClassName: string;
        onVisibleChange: (visible: boolean) => void;
        expandAnimation: boolean;
        popperModifiers?: {
            name: string;
            options: Object;
        }[];
        updateScrollTop?: (content: HTMLDivElement) => void;
        attach?: import("../../common").AttachNode;
        children?: React.ReactNode;
        content?: React.ReactNode;
        destroyOnClose?: boolean;
        disabled?: boolean;
        hideEmptyPopup?: boolean;
        placement?: import("../..").PopupPlacement;
        showArrow?: boolean;
        trigger?: "click" | "focus" | "context-menu" | "hover";
        triggerElement?: React.ReactNode;
        visible?: boolean;
        defaultVisible?: boolean;
        zIndex?: number;
        onScroll?: (context: {
            e: React.WheelEvent<HTMLDivElement>;
        }) => void;
        className?: string;
        style?: React.CSSProperties;
    };
    inputRef: React.MutableRefObject<HTMLInputElement>;
    cacheValue: any;
    onChange: import("../../hooks/useControlled").ChangeHandler<DateValue, [context: {
        dayjsValue?: dayjs.Dayjs;
        trigger?: import("../type").DatePickerTriggerSource;
    }]>;
    setYear: React.Dispatch<React.SetStateAction<number>>;
    setMonth: React.Dispatch<React.SetStateAction<number>>;
    setTimeValue: React.Dispatch<any>;
    setIsHoverCell: React.Dispatch<React.SetStateAction<boolean>>;
    setInputValue: React.Dispatch<any>;
    setPopupVisible: React.Dispatch<React.SetStateAction<boolean>>;
    setCacheValue: React.Dispatch<any>;
};
