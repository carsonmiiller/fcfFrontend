/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { useState, useMemo, useEffect } from 'react';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import Panel from './components/Panel.js';
import { Popup } from '../popup/index.js';
import InputContent from './components/InputContent.js';
import useConfig from '../_util/useConfig.js';
import { TreeStore } from '../_common/js/tree/tree-store.js';
import useControlled from '../hooks/useControlled.js';
import { getTreeValue } from './utils/helper.js';
import { treeNodesEffect, treeStoreExpendEffect } from './utils/cascader.js';
import { cascaderDefaultProps } from './defaultProps.js';
import '../_chunks/dep-0e5be0b2.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-12718f01.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import 'classnames';
import './utils/panel.js';
import '../_chunks/dep-1feb6aff.js';
import './components/Item.js';
import 'tdesign-icons-react';
import '../_util/useCommonClassName.js';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_util/easing.js';
import './utils/item.js';
import '../_chunks/dep-bd2639ad.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../common/Portal.js';
import 'react-dom';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../_chunks/dep-8ff4a741.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import './style/css.js';
import '../loading/type.js';
import '../tooltip/Tooltip.js';
import '../tooltip/defaultProps.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/composeRefs.js';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/utils/getTransitionParams.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-0a541e21.js';
import '../_chunks/dep-5ed520e8.js';
import '../_chunks/dep-863396c0.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../_chunks/dep-e8f6f682.js';
import '../_util/noop.js';
import '../popup/type.js';
import '../_chunks/dep-6a955d55.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../common/Check.js';
import '../_util/helper.js';
import '../_chunks/dep-9be29560.js';
import '../checkbox/defaultProps.js';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag/type.js';
import '../input/index.js';
import '../input/Input.js';
import '../input/InputGroup.js';
import '../input/defaultProps.js';
import '../input/type.js';
import '../common/FakeArrow.js';
import './utils/inputContent.js';
import '../_chunks/dep-33f486c3.js';
import '../_chunks/dep-0e5e855a.js';
import '../_chunks/dep-48a49a3a.js';
import '../_chunks/dep-0874974f.js';
import '../_chunks/dep-b8db0e27.js';
import '../_chunks/dep-b029028f.js';
import '../_chunks/dep-3cff266a.js';
import '../_chunks/dep-43a6fda3.js';
import '../_common/js/tree/tree-node.js';
import '../_chunks/dep-191c9ee3.js';
import '../_chunks/dep-71b3c60f.js';
import '../_chunks/dep-084711a9.js';
import '../_common/js/tree/tree-node-model.js';
import '../_chunks/dep-14dc871a.js';
import '../_chunks/dep-d8cdbac1.js';
import '../_chunks/dep-b9ff0943.js';
import '../_common/js/log/log.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Cascader = function Cascader(props) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var name = "".concat(classPrefix, "-cascader");
  var className = props.className,
      style = props.style,
      onChange = props.onChange,
      collapsedItems = props.collapsedItems;

  var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      _setValue = _useControlled2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      treeStore = _useState4[0],
      setTreeStore = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      filterActive = _useState6[0],
      setFilterActive = _useState6[1];

  var _useState7 = useState(""),
      _useState8 = _slicedToArray(_useState7, 2),
      inputVal = _useState8[0],
      setInputVal = _useState8[1];

  var _useState9 = useState(0),
      _useState10 = _slicedToArray(_useState9, 2),
      inputWidth = _useState10[0],
      setInputWidth = _useState10[1];

  var _useState11 = useState([]),
      _useState12 = _slicedToArray(_useState11, 2),
      treeNodes = _useState12[0],
      setTreeNodes = _useState12[1];

  var _useState13 = useState([]),
      _useState14 = _slicedToArray(_useState13, 2),
      expend = _useState14[0],
      setExpend = _useState14[1];

  var _useLocaleReceiver = useLocaleReceiver("cascader"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var loadingLocalText = t(local.loadingText);
  var cascaderContext = useMemo(function () {
    var size = props.size,
        disabled2 = props.disabled,
        checkStrictly2 = props.checkStrictly,
        lazy2 = props.lazy,
        multiple = props.multiple,
        filterable = props.filterable,
        clearable = props.clearable,
        checkProps = props.checkProps,
        max = props.max,
        showAllLevels = props.showAllLevels,
        minCollapsedNum = props.minCollapsedNum,
        _props$loadingText = props.loadingText,
        loadingText = _props$loadingText === void 0 ? loadingLocalText : _props$loadingText;
    return {
      size: size,
      disabled: disabled2,
      checkStrictly: checkStrictly2,
      lazy: lazy2,
      multiple: multiple,
      filterable: filterable,
      value: value,
      setValue: function setValue(val, source, node) {
        _setValue(val, {
          source: source,
          node: node
        });
      },
      visible: visible,
      setVisible: setVisible,
      treeStore: treeStore,
      checkProps: checkProps,
      clearable: clearable,
      showAllLevels: showAllLevels,
      max: max,
      treeNodes: treeNodes,
      setTreeNodes: setTreeNodes,
      filterActive: filterActive,
      setFilterActive: setFilterActive,
      inputVal: inputVal,
      setInputVal: setInputVal,
      setExpend: setExpend,
      minCollapsedNum: minCollapsedNum,
      inputWidth: inputWidth,
      setInputWidth: setInputWidth,
      loadingText: loadingText
    };
  }, [loadingLocalText, props, value, visible, treeStore, treeNodes, filterActive, inputVal, inputWidth, _setValue]);
  var disabled = props.disabled,
      _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$keys = props.keys,
      keys = _props$keys === void 0 ? {} : _props$keys,
      _props$checkStrictly = props.checkStrictly,
      checkStrictly = _props$checkStrictly === void 0 ? false : _props$checkStrictly,
      _props$lazy = props.lazy,
      lazy = _props$lazy === void 0 ? true : _props$lazy,
      load = props.load,
      _props$valueMode = props.valueMode,
      valueMode = _props$valueMode === void 0 ? "onlyLeaf" : _props$valueMode;
  useEffect(function () {
    if (!options.length) return;

    if (!treeStore) {
      var createStore = function createStore(onLoad) {
        var treePropsKeys = _objectSpread(_objectSpread({}, keys), {}, {
          children: typeof keys.children === "string" ? keys.children : "children"
        });

        var treeProps = {
          onLoad: onLoad,
          options: options,
          keys: treePropsKeys
        };
        var store2 = new TreeStore(treeProps);
        store2.append(options);
        return store2;
      };

      var store = createStore(function () {
        store.refreshNodes();
        treeNodesEffect(inputVal, store, setTreeNodes);
      });
      setTreeStore(store);
    } else {
      if (treeStore.config.options === options) return;
      treeStore.reload(options);
      treeStore.refreshNodes();
      treeStoreExpendEffect(treeStore, value, []);
      treeNodesEffect(inputVal, treeStore, setTreeNodes);
    }
  }, [inputVal, options, value, treeStore, keys]);
  useEffect(function () {
    if (!treeStore) return;
    var treeProps = {
      keys: keys || {},
      checkable: true,
      checkStrictly: checkStrictly,
      expandMutex: true,
      expandParent: true,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      options: options
    };
    treeStore.setConfig(treeProps);
  }, [checkStrictly, disabled, keys, lazy, load, options, valueMode, treeStore]);
  useEffect(function () {
    if (!treeStore) return;
    treeStoreExpendEffect(treeStore, value, expend);
  }, [treeStore, value, expend]);
  useEffect(function () {
    if (!treeStore) return;
    treeNodesEffect(inputVal, treeStore, setTreeNodes);
  }, [inputVal, treeStore, value]);
  useEffect(function () {
    if (!treeStore) return;
    treeStore.replaceChecked(getTreeValue(value));
  }, [value, treeStore]);
  useEffect(function () {
    if (!filterActive) {
      setInputVal("");
    }
  }, [filterActive]);
  var _props$empty = props.empty,
      empty = _props$empty === void 0 ? t(local.empty) : _props$empty,
      _props$trigger = props.trigger,
      trigger = _props$trigger === void 0 ? "click" : _props$trigger;
  var _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? t(local.placeholder) : _props$placeholder,
      onRemove = props.onRemove,
      onBlur = props.onBlur,
      onFocus = props.onFocus;
  return /* @__PURE__ */React.createElement(Popup, _objectSpread(_objectSpread({
    className: "".concat(name, "__popup"),
    placement: "bottom-left",
    visible: visible,
    overlayClassName: "".concat(name, "__dropdown"),
    expandAnimation: true,
    destroyOnClose: true
  }, props === null || props === void 0 ? void 0 : props.popupProps), {}, {
    content: /* @__PURE__ */React.createElement(Panel, {
      cascaderContext: cascaderContext,
      trigger: trigger,
      onChange: onChange,
      empty: empty
    })
  }), /* @__PURE__ */React.createElement(InputContent, {
    collapsedItems: collapsedItems,
    cascaderContext: cascaderContext,
    style: style,
    className: className,
    listeners: {
      onRemove: onRemove,
      onBlur: onBlur,
      onFocus: onFocus,
      onChange: onChange
    },
    placeholder: placeholder
  }), /* @__PURE__ */React.createElement(React.Fragment, null));
};

Cascader.displayName = "Cascader";
Cascader.defaultProps = cascaderDefaultProps;

export { Cascader as default };
//# sourceMappingURL=Cascader.js.map
