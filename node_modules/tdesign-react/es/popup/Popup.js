/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { forwardRef, useState, useRef, useCallback, useMemo, isValidElement, cloneElement, useEffect } from 'react';
import { CSSTransition } from 'react-transition-group';
import classNames from 'classnames';
import { usePopper } from 'react-popper';
import useControlled from '../hooks/useControlled.js';
import useAnimation from '../_util/useAnimation.js';
import useConfig from '../_util/useConfig.js';
import composeRefs from '../_util/composeRefs.js';
import Portal from '../common/Portal.js';
import useTriggerProps from './hooks/useTriggerProps.js';
import getTransitionParams from './utils/getTransitionParams.js';
import useMutationObservable from '../_util/useMutationObserver.js';
import useWindowSize from '../_util/useWindowSize.js';
import { popupDefaultProps } from './defaultProps.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../_chunks/dep-e8f6f682.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-863396c0.js';
import '../_chunks/dep-12718f01.js';
import '../_util/noop.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_util/easing.js';
import '../_util/useClickOutside.js';
import '../_chunks/dep-0a541e21.js';
import '../_chunks/dep-5ed520e8.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getPopperPlacement(placement) {
  return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
}

var Popup = /*#__PURE__*/forwardRef(function (props, ref) {
  var trigger = props.trigger,
      content = props.content,
      placement = props.placement,
      attach = props.attach,
      showArrow = props.showArrow,
      destroyOnClose = props.destroyOnClose,
      className = props.className,
      style = props.style,
      overlayClassName = props.overlayClassName,
      overlayStyle = props.overlayStyle,
      triggerElement = props.triggerElement,
      _props$children = props.children,
      children = _props$children === void 0 ? triggerElement : _props$children,
      disabled = props.disabled,
      zIndex = props.zIndex,
      onVisibleChange = props.onVisibleChange,
      _onScroll = props.onScroll,
      expandAnimation = props.expandAnimation,
      _props$popperModifier = props.popperModifiers,
      popperModifiers = _props$popperModifier === void 0 ? [] : _props$popperModifier,
      updateScrollTop = props.updateScrollTop;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useAnimation = useAnimation(),
      keepExpand = _useAnimation.keepExpand,
      keepFade = _useAnimation.keepFade;

  var _useControlled = useControlled(props, "visible", onVisibleChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      visible = _useControlled2[0],
      setVisible = _useControlled2[1];

  var _useWindowSize = useWindowSize(),
      windowHeight = _useWindowSize.height,
      windowWidth = _useWindowSize.width;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      triggerRef = _useState2[0],
      setTriggerRef = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      overlayRef = _useState4[0],
      setOverlayRef = _useState4[1];

  var contentRef = useRef(null);
  var referenceRef = useRef(null);
  var popupRef = useRef(null);
  var popperRef = useRef(null);
  var portalRef = useRef(null);
  var onPopperFirstUpdate = useCallback(function (state) {
    var referenceElmRect = referenceRef.current.getBoundingClientRect();
    var referenceElmTop = referenceElmRect.top,
        referenceElmLeft = referenceElmRect.left,
        bottom = referenceElmRect.bottom,
        right = referenceElmRect.right;
    var referenceElmBottom = window.innerHeight - bottom;
    var referenceElmRight = window.innerWidth - right;
    var _contentRef$current = contentRef.current,
        contentOffsetHeight = _contentRef$current.offsetHeight,
        contentOffsetWidth = _contentRef$current.offsetWidth;
    var newPlacement = state.options.placement;

    if (referenceElmBottom < contentOffsetHeight && referenceElmTop >= contentOffsetHeight) {
      newPlacement = state.options.placement.replace("bottom", "top");
    }

    if (referenceElmTop < contentOffsetHeight && referenceElmBottom >= contentOffsetHeight) {
      newPlacement = state.options.placement.replace("top", "bottom");
    }

    if (referenceElmLeft < contentOffsetWidth && referenceElmRight >= contentOffsetWidth) {
      newPlacement = state.options.placement.replace("left", "right");
    }

    if (referenceElmRight < contentOffsetWidth && referenceElmLeft >= contentOffsetWidth) {
      newPlacement = state.options.placement.replace("right", "left");
    }

    Object.assign(state.options, _objectSpread(_objectSpread({}, state.options), {}, {
      placement: newPlacement
    }));
    popperRef.current.update();
  }, []);
  var options = useMemo(function () {
    return {
      placement: getPopperPlacement(placement),
      onFirstUpdate: onPopperFirstUpdate,
      modifiers: popperModifiers
    };
  }, [onPopperFirstUpdate, placement, popperModifiers]);
  popperRef.current = usePopper(triggerRef, overlayRef, options);
  var _popperRef$current = popperRef.current,
      styles = _popperRef$current.styles,
      attributes = _popperRef$current.attributes;
  var defaultStyles = useMemo(function () {
    if (triggerRef && typeof overlayStyle === "function") return _objectSpread({}, overlayStyle(triggerRef, overlayRef));
    return _objectSpread({}, overlayStyle);
  }, [overlayStyle, triggerRef, overlayRef, visible]);
  var overlayVisibleStyle = defaultStyles;
  var triggerNodeTemp = useMemo(function () {
    var _React$Children$toArr = React.Children.toArray(children),
        _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 1),
        triggerChildNode = _React$Children$toArr2[0];

    if (React.Children.count(children) === 1 && /*#__PURE__*/isValidElement(triggerChildNode)) {
      return triggerChildNode;
    }

    return /* @__PURE__ */React.createElement("span", {
      className: "".concat(classPrefix, "-trigger")
    }, children);
  }, [children, classPrefix]);

  var _useTriggerProps = useTriggerProps({
    current: overlayRef
  }, {
    current: triggerRef
  }, [trigger], visible, setVisible, disabled, triggerNodeTemp),
      _useTriggerProps2 = _slicedToArray(_useTriggerProps, 2),
      triggerProps = _useTriggerProps2[0],
      popupProps = _useTriggerProps2[1];

  var triggerNode = /*#__PURE__*/cloneElement(triggerNodeTemp, _objectSpread({
    ref: composeRefs(triggerNodeTemp.ref, setTriggerRef)
  }, triggerProps));

  var handleExited = function handleExited() {
    if (!destroyOnClose) {
      portalRef.current.style.display = "none";
    }
  };

  var handleEnter = function handleEnter() {
    if (!destroyOnClose) {
      portalRef.current.style.display = "block";
    }
  };

  useMutationObservable(triggerRef, function () {
    var _popperRef$current$up, _popperRef$current2;

    (_popperRef$current$up = (_popperRef$current2 = popperRef.current).update) === null || _popperRef$current$up === void 0 ? void 0 : _popperRef$current$up.call(_popperRef$current2);
  });
  useEffect(function () {
    var _popperRef$current$up2, _popperRef$current3;

    (_popperRef$current$up2 = (_popperRef$current3 = popperRef.current).update) === null || _popperRef$current$up2 === void 0 ? void 0 : _popperRef$current$up2.call(_popperRef$current3);
  }, [content, visible, windowHeight, windowWidth]);
  useEffect(function () {
    if (visible && overlayRef) {
      updateScrollTop === null || updateScrollTop === void 0 ? void 0 : updateScrollTop(contentRef === null || contentRef === void 0 ? void 0 : contentRef.current);
    }
  }, [visible, overlayRef, updateScrollTop]);
  var portal = visible || overlayRef ? /* @__PURE__ */React.createElement(CSSTransition, {
    appear: true,
    "in": visible,
    timeout: 180,
    nodeRef: popupRef,
    unmountOnExit: destroyOnClose,
    onEnter: handleEnter,
    onExited: handleExited
  }, /* @__PURE__ */React.createElement(Portal, {
    triggerNode: triggerRef,
    attach: attach,
    ref: portalRef
  }, /* @__PURE__ */React.createElement(CSSTransition, _objectSpread({
    appear: true,
    timeout: 0,
    "in": visible,
    nodeRef: popupRef
  }, getTransitionParams({
    classPrefix: classPrefix,
    expandAnimation: expandAnimation && keepExpand,
    fadeAnimation: keepFade
  })), /* @__PURE__ */React.createElement("div", _objectSpread(_objectSpread({
    ref: composeRefs(setOverlayRef, ref, popupRef),
    style: _objectSpread(_objectSpread({}, styles.popper), {}, {
      zIndex: zIndex
    }),
    className: "".concat(classPrefix, "-popup")
  }, attributes.popper), popupProps), /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-popup__content"), _defineProperty({}, "".concat(classPrefix, "-popup__content--arrow"), showArrow), overlayClassName),
    style: overlayVisibleStyle,
    ref: contentRef,
    onScroll: function onScroll(e) {
      return _onScroll === null || _onScroll === void 0 ? void 0 : _onScroll({
        e: e
      });
    }
  }, showArrow ? /* @__PURE__ */React.createElement("div", {
    style: styles.arrow,
    className: "".concat(classPrefix, "-popup__arrow")
  }) : null, content))))) : null;
  return /* @__PURE__ */React.createElement("div", {
    className: classNames("".concat(classPrefix, "-popup__reference"), className),
    style: style,
    ref: referenceRef
  }, triggerNode, portal);
});
Popup.displayName = "Popup";
Popup.defaultProps = popupDefaultProps;

export { Popup as default };
//# sourceMappingURL=Popup.js.map
