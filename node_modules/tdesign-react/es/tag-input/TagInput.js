/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { CloseCircleFilledIcon } from 'tdesign-icons-react';
import { i as isFunction_1 } from '../_chunks/dep-531703d1.js';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import useDragSorter from '../_util/useDragSorter.js';
import { Input } from '../input/index.js';
import useTagScroll from './useTagScroll.js';
import useTagList from './useTagList.js';
import useHover from './useHover.js';
import useControlled from '../hooks/useControlled.js';
import { tagInputDefaultProps } from './defaultProps.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-12718f01.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import '../input/Input.js';
import '../_chunks/dep-8ff4a741.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../_util/helper.js';
import '../_chunks/dep-9be29560.js';
import '../_chunks/dep-e8f6f682.js';
import '../_chunks/dep-863396c0.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../input/InputGroup.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../input/defaultProps.js';
import '../_util/noop.js';
import './style/css.js';
import '../input/type.js';
import '../_chunks/dep-bd2639ad.js';
import 'lodash';
import '../tag/index.js';
import '../tag/Tag.js';
import '../tag/CheckTag.js';
import '../tag/defaultProps.js';
import '../tag/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TagInput = /*#__PURE__*/forwardRef(function (props, ref) {
  var _ref;

  var _useConfig = useConfig(),
      prefix = _useConfig.classPrefix;

  var excessTagsDisplayType = props.excessTagsDisplayType,
      autoWidth = props.autoWidth,
      readonly = props.readonly,
      disabled = props.disabled,
      clearable = props.clearable,
      placeholder = props.placeholder,
      valueDisplay = props.valueDisplay,
      _label = props.label,
      inputProps = props.inputProps,
      size = props.size,
      tips = props.tips,
      status = props.status,
      suffixIcon = props.suffixIcon,
      suffix = props.suffix,
      onClick = props.onClick,
      onPaste = props.onPaste,
      _onFocus = props.onFocus,
      _onBlur = props.onBlur;

  var _useControlled = useControlled(props, "inputValue", props.onInputChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      tInputValue = _useControlled2[0],
      setTInputValue = _useControlled2[1];

  var _useHover = useHover(props),
      isHover = _useHover.isHover,
      addHover = _useHover.addHover,
      cancelHover = _useHover.cancelHover;

  var _useDragSorter = useDragSorter(_objectSpread(_objectSpread({}, props), {}, {
    sortOnDraggable: props.dragSort,
    onDragOverCheck: {
      x: true,
      targetClassNameRegExp: new RegExp("^".concat(prefix, "-tag"))
    }
  })),
      getDragProps = _useDragSorter.getDragProps;

  var isCompositionRef = useRef(false);

  var _useTagScroll = useTagScroll(props),
      scrollToRight = _useTagScroll.scrollToRight,
      onWheel = _useTagScroll.onWheel,
      scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
      scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
      tagInputRef = _useTagScroll.tagInputRef;

  var _useTagList = useTagList(_objectSpread(_objectSpread({}, props), {}, {
    getDragProps: getDragProps
  })),
      tagValue = _useTagList.tagValue,
      _onClose = _useTagList.onClose,
      onInnerEnter = _useTagList.onInnerEnter,
      onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
      clearAll = _useTagList.clearAll,
      renderLabel = _useTagList.renderLabel;

  var NAME_CLASS = "".concat(prefix, "-tag-input");
  var WITH_SUFFIX_ICON_CLASS = "".concat(prefix, "-tag-input__with-suffix-icon");
  var CLEAR_CLASS = "".concat(prefix, "-tag-input__suffix-clear");
  var BREAK_LINE_CLASS = "".concat(prefix, "-tag-input--break-line");
  var tagInputPlaceholder = !(tagValue !== null && tagValue !== void 0 && tagValue.length) ? placeholder : "";
  var showClearIcon = Boolean(!readonly && !disabled && clearable && isHover && (tagValue === null || tagValue === void 0 ? void 0 : tagValue.length));
  useImperativeHandle(ref, function () {
    return _objectSpread({}, tagInputRef.current || {});
  });

  var onInputCompositionstart = function onInputCompositionstart(value, context) {
    var _inputProps$onComposi;

    isCompositionRef.current = true;
    inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi = inputProps.onCompositionstart) === null || _inputProps$onComposi === void 0 ? void 0 : _inputProps$onComposi.call(inputProps, value, context);
  };

  var onInputCompositionend = function onInputCompositionend(value, context) {
    var _inputProps$onComposi2;

    isCompositionRef.current = false;
    inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi2 = inputProps.onCompositionend) === null || _inputProps$onComposi2 === void 0 ? void 0 : _inputProps$onComposi2.call(inputProps, value, context);
  };

  var onInputEnter = function onInputEnter(value, context) {
    setTInputValue("", {
      e: context.e,
      trigger: "enter"
    });
    !isCompositionRef.current && onInnerEnter(value, context);
    scrollToRight();
  };

  var onInnerClick = function onInnerClick(context) {
    tagInputRef.current.inputElement.focus();
    onClick === null || onClick === void 0 ? void 0 : onClick(context);
  };

  var onClearClick = function onClearClick(e) {
    clearAll({
      e: e
    });
    setTInputValue("", {
      e: e,
      trigger: "clear"
    });
  };

  var suffixIconNode = showClearIcon ? /* @__PURE__ */React.createElement(CloseCircleFilledIcon, {
    className: CLEAR_CLASS,
    onClick: onClearClick
  }) : suffixIcon;
  var displayNode = isFunction_1(valueDisplay) ? valueDisplay({
    value: tagValue,
    onClose: function onClose(index, item) {
      return _onClose({
        index: index,
        item: item
      });
    }
  }) : valueDisplay;
  var classes = [NAME_CLASS, (_ref = {}, _defineProperty(_ref, BREAK_LINE_CLASS, excessTagsDisplayType === "break-line"), _defineProperty(_ref, WITH_SUFFIX_ICON_CLASS, !!suffixIconNode), _ref), props.className];
  return /* @__PURE__ */React.createElement(Input, _objectSpread(_objectSpread({
    ref: tagInputRef
  }, inputProps), {}, {
    value: tInputValue,
    onChange: function onChange(val, context) {
      setTInputValue(val, _objectSpread(_objectSpread({}, context), {}, {
        trigger: "input"
      }));
    },
    autoWidth: autoWidth,
    onWheel: onWheel,
    size: size,
    readonly: readonly,
    disabled: disabled,
    label: function label() {
      return renderLabel({
        displayNode: displayNode,
        label: _label
      });
    },
    className: classNames(classes),
    style: props.style,
    tips: tips,
    status: status,
    placeholder: tagInputPlaceholder,
    suffix: suffix,
    suffixIcon: suffixIconNode,
    onPaste: onPaste,
    onClick: onInnerClick,
    onEnter: onInputEnter,
    onKeyup: onInputBackspaceKeyUp,
    onMouseenter: function onMouseenter(context) {
      addHover(context);
      scrollToRightOnEnter();
    },
    onMouseleave: function onMouseleave(context) {
      cancelHover(context);
      scrollToLeftOnLeave();
    },
    onFocus: function onFocus(inputValue, context) {
      _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus(tagValue, {
        e: context.e,
        inputValue: inputValue
      });
    },
    onBlur: function onBlur(inputValue, context) {
      _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(tagValue, {
        e: context.e,
        inputValue: inputValue
      });
    },
    onCompositionstart: onInputCompositionstart,
    onCompositionend: onInputCompositionend
  }));
});
TagInput.displayName = "TagInput";
TagInput.defaultProps = tagInputDefaultProps;

export { TagInput as default };
//# sourceMappingURL=TagInput.js.map
