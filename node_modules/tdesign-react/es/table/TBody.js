/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { useMemo } from 'react';
import { c as camelCase_1 } from '../_chunks/dep-9be29560.js';
import { g as get_1 } from '../_chunks/dep-71b3c60f.js';
import { p as pick_1 } from '../_chunks/dep-14dc871a.js';
import classNames from 'classnames';
import TR, { ROW_LISTENERS, TABLE_PROPS } from './TR.js';
import { useLocaleReceiver } from '../locale/LocalReceiver.js';
import useClassName from './hooks/useClassName.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-e8f6f682.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-863396c0.js';
import '../_chunks/dep-12718f01.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../_chunks/dep-084711a9.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-d8cdbac1.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-b9ff0943.js';
import '../_chunks/dep-3cff266a.js';
import '../_chunks/dep-43a6fda3.js';
import './utils.js';
import './hooks/useFixed.js';
import '../_common/js/log/index.js';
import '../_common/js/log/log.js';
import '../_common/js/utils/getScrollbarWidth.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_util/easing.js';
import './Ellipsis.js';
import '../_chunks/dep-0a541e21.js';
import '../_chunks/dep-5ed520e8.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../hooks/useControlled.js';
import '../_util/noop.js';
import '../_util/useAnimation.js';
import '../_util/useConfig.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import '../_util/composeRefs.js';
import '../common/Portal.js';
import 'react-dom';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/utils/getTransitionParams.js';
import '../_util/useMutationObserver.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import './style/css.js';
import '../popup/type.js';
import './hooks/useLazyLoad.js';
import '../_common/js/utils/observe.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ROW_AND_TD_LISTENERS = ROW_LISTENERS.concat("cell-click");
var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
function TBody(props) {
  var data = props.data,
      columns = props.columns;

  var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 2),
      global = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _useClassName = useClassName(),
      tableFullRowClasses = _useClassName.tableFullRowClasses,
      tableBaseClass = _useClassName.tableBaseClass;

  var tbodyClasses = useMemo(function () {
    return [tableBaseClass.body];
  }, [tableBaseClass.body]);

  var renderEmpty = function renderEmpty(columns2) {
    return /* @__PURE__ */React.createElement("tr", {
      className: classNames([tableBaseClass.emptyRow, _defineProperty({}, tableFullRowClasses.base, props.isWidthOverflow)])
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: columns2.length
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames([tableBaseClass.empty, _defineProperty({}, tableFullRowClasses.innerFullRow, props.isWidthOverflow)]),
      style: props.isWidthOverflow ? {
        width: "".concat(props.tableWidth, "px")
      } : {}
    }, props.empty || t(global.empty))));
  };

  var getFullRow = function getFullRow(columnLength2, type) {
    var tType = camelCase_1(type);
    var fullRowNode = {
      "first-full-row": props.firstFullRow,
      "last-full-row": props.lastFullRow
    }[type];
    if (!fullRowNode) return null;
    var isFixedToLeft = props.isWidthOverflow && columns.find(function (col) {
      return col.fixed === "left";
    });
    var classes = [tableFullRowClasses.base, tableFullRowClasses[tType]];
    return /* @__PURE__ */React.createElement("tr", {
      className: classNames(classes)
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: columnLength2
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames(_defineProperty({}, tableFullRowClasses.innerFullRow, isFixedToLeft)),
      style: isFixedToLeft ? {
        width: "".concat(props.tableWidth, "px")
      } : {}
    }, /* @__PURE__ */React.createElement("div", {
      className: tableFullRowClasses.innerFullElement
    }, fullRowNode))));
  };

  var skipSpansMap = /* @__PURE__ */new Map();

  var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, cellSpans) {
    var rowIndex = params.rowIndex,
        colIndex = params.colIndex;
    if (!cellSpans.rowspan && !cellSpans.colspan) return;
    var maxRowIndex = rowIndex + (cellSpans.rowspan || 1);
    var maxColIndex = colIndex + (cellSpans.colspan || 1);

    for (var i = rowIndex; i < maxRowIndex; i++) {
      for (var j = colIndex; j < maxColIndex; j++) {
        if (i !== rowIndex || j !== colIndex) {
          skipSpansMap.set([i, j].join(), true);
        }
      }
    }
  };

  var columnLength = columns.length;
  var dataLength = data.length;
  var trNodeList = [];
  skipSpansMap = /* @__PURE__ */new Map();
  var properties = ["rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
  data === null || data === void 0 ? void 0 : data.forEach(function (row, rowIndex) {
    var trProps = _objectSpread(_objectSpread(_objectSpread({}, pick_1(props, TABLE_PROPS)), {}, {
      rowKey: props.rowKey || "id",
      row: row,
      columns: columns,
      rowIndex: rowIndex,
      dataLength: dataLength,
      skipSpansMap: skipSpansMap
    }, pick_1(props, properties)), {}, {
      onTrRowspanOrColspan: onTrRowspanOrColspan
    });

    if (props.onCellClick) {
      trProps.onCellClick = props.onCellClick;
    }

    var trNode = /* @__PURE__ */React.createElement(TR, _objectSpread(_objectSpread({
      key: get_1(row, props.rowKey || "id") || rowIndex
    }, trProps), {}, {
      onRowMounted: props.handleRowMounted
    }));
    trNodeList.push(trNode);

    if (props.renderExpandedRow) {
      var p = {
        row: row,
        index: rowIndex,
        columns: columns,
        tableWidth: props.tableWidth,
        isWidthOverflow: props.isWidthOverflow
      };
      var expandedContent = props.renderExpandedRow(p);
      expandedContent && trNodeList.push(expandedContent);
    }
  });
  var list = /* @__PURE__ */React.createElement(React.Fragment, null, getFullRow(columnLength, "first-full-row"), trNodeList, getFullRow(columnLength, "last-full-row"));
  var isEmpty = !(data !== null && data !== void 0 && data.length) && !props.loading;
  var translate = "translate(0, ".concat(props.translateY, "px)");
  var posStyle = {
    transform: translate,
    "-ms-transform": translate,
    "-moz-transform": translate,
    "-webkit-transform": translate
  };
  return /* @__PURE__ */React.createElement("tbody", {
    className: classNames(tbodyClasses),
    style: props.isVirtual && _objectSpread({}, posStyle)
  }, isEmpty ? renderEmpty(columns) : list);
}
TBody.displayName = "TBody";

export { ROW_AND_TD_LISTENERS, TBody as default, extendTableProps };
//# sourceMappingURL=TBody.js.map
