/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-08260abc.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-bd2639ad.js';
import { _ as _slicedToArray } from '../../_chunks/dep-744640f5.js';
import React, { useState, useMemo, useEffect } from 'react';
import { MinusRectangleIcon, AddRectangleIcon } from 'tdesign-icons-react';
import { c as cloneDeep_1 } from '../../_chunks/dep-6456ac1e.js';
import { g as get_1 } from '../../_chunks/dep-71b3c60f.js';
import classNames from 'classnames';
import TableTreeStore from './tree-store.js';
import useClassName from './useClassName.js';
import { renderCell } from '../TR.js';
import '../../_chunks/dep-0e5be0b2.js';
import '../../_chunks/dep-12690e1d.js';
import '../../_chunks/dep-089519d1.js';
import '../../_chunks/dep-ac0cc4dd.js';
import '../../_chunks/dep-e3ab6b0d.js';
import '../../_chunks/dep-cc4f2bae.js';
import '../../_chunks/dep-531703d1.js';
import '../../_chunks/dep-21baa91f.js';
import '../../_chunks/dep-4705ff31.js';
import '../../_chunks/dep-38424935.js';
import '../../_chunks/dep-ad150068.js';
import '../../_chunks/dep-d5f141ac.js';
import '../../_chunks/dep-1b27e5c2.js';
import '../../_chunks/dep-6963df41.js';
import '../../_chunks/dep-8fb1642c.js';
import '../../_chunks/dep-bcb59ae2.js';
import '../../_chunks/dep-12718f01.js';
import '../../_chunks/dep-09c318fb.js';
import '../../_chunks/dep-048c506f.js';
import '../../_chunks/dep-febf8cf9.js';
import '../../_chunks/dep-074143e4.js';
import '../../_chunks/dep-a1fd625f.js';
import '../../_chunks/dep-f5ab8a5c.js';
import '../../_chunks/dep-f459ac73.js';
import '../../_chunks/dep-43a6fda3.js';
import '../../_chunks/dep-0e5e855a.js';
import '../../_chunks/dep-084711a9.js';
import '../../_chunks/dep-863396c0.js';
import '../../_chunks/dep-e8f6f682.js';
import '../../_chunks/dep-48a49a3a.js';
import '../utils.js';
import '../../_common/js/log/index.js';
import '../../_common/js/log/log.js';
import '../../_util/useConfig.js';
import '../../_chunks/dep-e3ed7551.js';
import '../../_chunks/dep-67009882.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../config-provider/zh_CN_config.js';
import './useFixed.js';
import '../../_common/js/utils/getScrollbarWidth.js';
import '../../_util/dom.js';
import 'raf';
import '../../_chunks/dep-60c49e74.js';
import '../../_util/easing.js';
import '../Ellipsis.js';
import '../../_chunks/dep-0a541e21.js';
import '../../_chunks/dep-5ed520e8.js';
import '../../popup/index.js';
import '../../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../../hooks/useControlled.js';
import '../../_chunks/dep-0db6b692.js';
import '../../_chunks/dep-6d2697ef.js';
import '../../_chunks/dep-42701b6c.js';
import '../../_util/noop.js';
import '../../_util/useAnimation.js';
import '../../_util/composeRefs.js';
import '../../common/Portal.js';
import 'react-dom';
import '../../popup/hooks/useTriggerProps.js';
import '../../_util/useClickOutside.js';
import '../../popup/utils/getTransitionParams.js';
import '../../_util/useMutationObserver.js';
import '../../_util/useWindowSize.js';
import '../../popup/defaultProps.js';
import './style/css.js';
import '../../popup/type.js';
import './useLazyLoad.js';
import '../../_common/js/utils/observe.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTreeData(props) {
  var data = props.data,
      columns = props.columns,
      tree = props.tree,
      rowKey = props.rowKey;

  var _useState = useState(new TableTreeStore()),
      _useState2 = _slicedToArray(_useState, 1),
      store = _useState2[0];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      treeNodeCol = _useState4[0],
      setTreeNodeCol = _useState4[1];

  var _useState5 = useState(data || []),
      _useState6 = _slicedToArray(_useState5, 2),
      dataSource = _useState6[0],
      setDataSource = _useState6[1];

  var _useClassName = useClassName(),
      tableTreeClasses = _useClassName.tableTreeClasses;

  var rowDataKeys = useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
  useEffect(function () {
    if (!data || !store) return;

    if (!tree || !Object.keys(tree).length) {
      setDataSource(data);
      return;
    }

    var newVal = cloneDeep_1(data);
    setDataSource(newVal);
    store.initialTreeStore(newVal, columns, rowDataKeys);
  }, [data]);
  useEffect(function () {
    if (!tree || !Object.keys(tree).length) return;
    store.initialTreeStore(data, columns, rowDataKeys);
  }, [columns, rowDataKeys]);
  useEffect(function () {
    var treeNodeColTmp = getTreeNodeColumnCol();
    setTreeNodeCol(treeNodeColTmp);
  }, [columns]);

  function getTreeNodeStyle(level) {
    var _props$tree;

    if (level === void 0) return;
    var indent = ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.indent) || 24;
    return {
      paddingLeft: "".concat(level * indent || 1, "px")
    };
  }

  function toggleExpandData(p) {
    var newData = store.toggleExpandData(p, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(newData));

    if (p.trigger === "inner") {
      var _props$onTreeExpandCh, _store$treeDataMap;

      var rowValue = get_1(p.row, rowDataKeys.rowKey);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: store === null || store === void 0 ? void 0 : (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue)
      });
    }
  }

  function getTreeNodeColumnCol() {
    var _props$tree2;

    var columns2 = props.columns;
    var treeNodeColumnIndex = ((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.treeNodeColumnIndex) || 0;

    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;

      treeNodeColumnIndex += 1;
    }

    return columns2[treeNodeColumnIndex];
  }

  function formatTreeColumn(col) {
    if (!col || !treeNodeCol || !store) return {};
    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;

    var newCol = _objectSpread({}, treeNodeCol);

    newCol.cell = function (p) {
      var cellInfo = renderCell(_objectSpread(_objectSpread({}, p), {}, {
        col: _objectSpread({}, treeNodeCol)
      }));
      var currentState = store.treeDataMap.get(get_1(p.row, rowDataKeys.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

      var classes = _defineProperty({}, tableTreeClasses.inlineCol, !!col.ellipsis);

      var childrenNodes = get_1(p.row, rowDataKeys.childrenKey);

      if (childrenNodes && childrenNodes instanceof Array) {
        var _store$treeDataMap$ge;

        var IconNode = (_store$treeDataMap$ge = store.treeDataMap.get(get_1(p.row, rowDataKeys.rowKey))) !== null && _store$treeDataMap$ge !== void 0 && _store$treeDataMap$ge.expanded ? MinusRectangleIcon : AddRectangleIcon;
        return /* @__PURE__ */React.createElement("div", {
          className: classNames([tableTreeClasses.col, classes]),
          style: colStyle
        }, !!childrenNodes.length && /* @__PURE__ */React.createElement(IconNode, {
          className: tableTreeClasses.icon,
          onClick: function onClick() {
            return toggleExpandData(_objectSpread(_objectSpread({}, p), {}, {
              trigger: "inner"
            }));
          }
        }), cellInfo);
      }

      return /* @__PURE__ */React.createElement("div", {
        style: colStyle,
        className: classNames(classes)
      }, cellInfo);
    };

    if (newCol.ellipsis === true) {
      newCol.ellipsis = function (p) {
        return renderCell(_objectSpread(_objectSpread({}, p), {}, {
          col: _objectSpread({}, treeNodeCol)
        }));
      };
    }

    return newCol;
  }

  function setData(key, newRowData) {
    var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);

    var newData = _toConsumableArray(dataSource);

    newData[rowIndex] = newRowData;
    setDataSource(_toConsumableArray(newData));
  }

  function getData(key) {
    return store.getData(key);
  }

  function remove(key) {
    var newData = store.remove(key, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(newData));
  }

  function appendTo(key, newData) {
    var dataTmp = store.appendTo(key, newData, dataSource, rowDataKeys);
    setDataSource(_toConsumableArray(dataTmp));
  }

  return {
    store: store,
    rowDataKeys: rowDataKeys,
    dataSource: dataSource,
    setData: setData,
    getData: getData,
    remove: remove,
    appendTo: appendTo,
    formatTreeColumn: formatTreeColumn,
    toggleExpandData: toggleExpandData
  };
}

export { useTreeData as default };
//# sourceMappingURL=useTreeData.js.map
