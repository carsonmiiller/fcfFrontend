/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-08260abc.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-bd2639ad.js';
import { _ as _slicedToArray } from '../../_chunks/dep-744640f5.js';
import { g as get_1 } from '../../_chunks/dep-71b3c60f.js';
import { useMemo } from 'react';
import useControlled from '../../hooks/useControlled.js';
import '../../_chunks/dep-0e5be0b2.js';
import '../../_chunks/dep-12690e1d.js';
import '../../_chunks/dep-084711a9.js';
import '../../_chunks/dep-a1fd625f.js';
import '../../_chunks/dep-4705ff31.js';
import '../../_chunks/dep-863396c0.js';
import '../../_chunks/dep-21baa91f.js';
import '../../_chunks/dep-12718f01.js';
import '../../_chunks/dep-e3ab6b0d.js';
import '../../_chunks/dep-cc4f2bae.js';
import '../../_chunks/dep-531703d1.js';
import '../../_chunks/dep-38424935.js';
import '../../_chunks/dep-ad150068.js';
import '../../_chunks/dep-d5f141ac.js';
import '../../_chunks/dep-1b27e5c2.js';
import '../../_chunks/dep-e8f6f682.js';
import '../../_chunks/dep-0db6b692.js';
import '../../_chunks/dep-6d2697ef.js';
import '../../_chunks/dep-42701b6c.js';
import '../../_util/noop.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var childrenMap = /* @__PURE__ */new Map();
function getChildrenData(treeDataMap, data, childrenKey, rowKey, r) {
  if (childrenMap.get(data)) return childrenMap.get(data);
  var result = r || {
    allChildren: [],
    allChildrenKeys: []
  };
  var children = get_1(data, childrenKey);
  if (!children || !children.length) return result;
  var selectableChildren = children.filter(function (item) {
    var _treeDataMap$get;

    return !((_treeDataMap$get = treeDataMap.get(get_1(item, rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
  });
  result.allChildren = result.allChildren.concat(selectableChildren);
  var childrenKeys = selectableChildren.map(function (item) {
    return get_1(item, rowKey);
  });
  result.allChildrenKeys = result.allChildrenKeys.concat(childrenKeys);

  for (var i = 0, len = children.length; i < len; i++) {
    var tItem = children[i];
    var c = get_1(tItem, childrenKey);

    if (c !== null && c !== void 0 && c.length) {
      var nextLevelData = getChildrenData(treeDataMap, tItem, childrenKey, rowKey, result);
      result.allChildren = result.allChildren.concat(nextLevelData.allChildren);
      result.allChildrenKeys = result.allChildrenKeys.concat(nextLevelData.allChildrenKeys);
    }
  }

  return result;
}
function removeChildrenKeys(p, r) {
  var selectedRowKeys = p.selectedRowKeys,
      removeKeys = p.removeKeys;
  var result = r || {
    data: [],
    keys: []
  };

  for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
    var key = selectedRowKeys[i];

    if (!removeKeys.includes(key)) {
      result.keys.push(key);
    }
  }

  return result;
}
function getRowDataByKeys(p) {
  var treeDataMap = p.treeDataMap,
      selectedRowKeys = p.selectedRowKeys;
  var result = [];

  for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
    var key = selectedRowKeys[i];
    result.push(treeDataMap.get(key));
  }

  return result;
}
function useTreeSelect(props, treeDataMap) {
  var tree = props.tree,
      rowKey = props.rowKey;

  var _useControlled = useControlled(props, "selectedRowKeys", props.onSelectChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      _ = _useControlled2[0],
      setTSelectedRowKeys = _useControlled2[1];

  var rowDataKeys = useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);

  function onInnerSelectChange(rowKeys, extraData) {
    if (extraData.currentRowKey === "CHECK_ALL_BOX") {
      handleSelectAll(extraData);
    } else {
      handleSelect(rowKeys, extraData);
    }
  }

  function handleSelectAll(extraData) {
    var newRowKeys = [];
    var newRowData = [];

    if (extraData.type === "check") {
      var arr = _toConsumableArray(treeDataMap.values());

      for (var i = 0, len = arr.length; i < len; i++) {
        var item = arr[i];

        if (!item.disabled) {
          newRowData.push(item.row);
          newRowKeys.push(get_1(item.row, rowDataKeys.rowKey));
        }
      }
    }

    var newExtraData = _objectSpread(_objectSpread({}, extraData), {}, {
      selectedRowData: newRowData || []
    });

    setTSelectedRowKeys(newRowKeys, newExtraData);
  }

  function handleSelect(rowKeys, extraData) {
    var newRowKeys = _toConsumableArray(rowKeys);

    if ((props === null || props === void 0 ? void 0 : props.tree.checkStrictly) === false) {
      if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
        var result = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys.childrenKey, rowDataKeys.rowKey);
        var allChildrenKeys = result.allChildrenKeys;
        childrenMap.set(extraData.currentRowData, result);
        newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
      } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
        var children = getChildrenData(treeDataMap, extraData.currentRowData, rowDataKeys.childrenKey, rowDataKeys.rowKey);

        var _result = removeChildrenKeys({
          selectedRowKeys: rowKeys,
          removeKeys: children.allChildrenKeys
        });

        newRowKeys = _result.keys;
      }
    }

    var newRowData = getRowDataByKeys({
      treeDataMap: treeDataMap,
      selectedRowKeys: newRowKeys
    });

    var newExtraData = _objectSpread(_objectSpread({}, extraData), {}, {
      selectedRowData: newRowData
    });

    setTSelectedRowKeys(newRowKeys, newExtraData);
  }

  return {
    onInnerSelectChange: onInnerSelectChange
  };
}

export { childrenMap, useTreeSelect as default, getChildrenData, getRowDataByKeys, removeChildrenKeys };
//# sourceMappingURL=useTreeSelect.js.map
