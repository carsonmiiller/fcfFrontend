/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-bd2639ad.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { useState, isValidElement } from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import DropdownItem from './DropdownItem.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-08260abc.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-12718f01.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import 'tdesign-icons-react';
import '../_util/useRipple.js';
import '../_util/useAnimation.js';
import '../_util/setStyle.js';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_util/easing.js';
import '../_util/helper.js';
import '../_chunks/dep-8ff4a741.js';
import '../_chunks/dep-9be29560.js';
import '../_chunks/dep-e8f6f682.js';
import '../_chunks/dep-863396c0.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../divider/index.js';
import '../divider/Divider.js';
import '../divider/defaultProps.js';
import './style/css.js';
import '../divider/type.js';
import './defaultProps.js';

var DropdownMenu = function DropdownMenu(props) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
      _props$maxColumnWidth = props.maxColumnWidth,
      maxColumnWidth = _props$maxColumnWidth === void 0 ? 100 : _props$maxColumnWidth,
      _props$minColumnWidth = props.minColumnWidth,
      minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth;

  var _useState = useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      path = _useState2[0],
      setPath = _useState2[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var dropdownMenuClass = "".concat(classPrefix, "-dropdown__menu");

  var isActive = function isActive(item, pathPrefix) {
    var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var itemPath = /*#__PURE__*/isValidElement(item) ? "".concat(pathPrefix, "/").concat(item.props.value) : "".concat(pathPrefix, "/").concat(item.value);

    if (excludeSelf && path === itemPath) {
      return false;
    }

    return path.indexOf(itemPath) === 0;
  };

  var isDropdownItem = function isDropdownItem(child) {
    if ( /*#__PURE__*/isValidElement(child) && child.type === DropdownItem) {
      return true;
    }

    return false;
  };

  var getActiveItemChild = function getActiveItemChild(children) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "DropdownItem";

    if (!children) {
      return [];
    }

    var activeItemChildren = React.Children.toArray(children);
    return type === "DropdownItem" ? activeItemChildren.filter(function (e) {
      return isDropdownItem(e);
    }) : activeItemChildren.filter(function (e) {
      return !isDropdownItem(e);
    });
  };

  var handleHoverItem = function handleHoverItem(path2) {
    setPath(path2);
  };

  var handleItemClick = function handleItemClick(options2) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Normal";
    var child = arguments.length > 2 ? arguments[2] : undefined;
    var data = options2.data,
        context = options2.context,
        idx = options2.idx;

    if (type === "Normal") {
      var _options2$idx, _options2$idx$onClick;

      (_options2$idx = options2[idx]) === null || _options2$idx === void 0 ? void 0 : (_options2$idx$onClick = _options2$idx.onClick) === null || _options2$idx$onClick === void 0 ? void 0 : _options2$idx$onClick.call(_options2$idx, data, context);
    } else {
      var _child$props, _child$props$onClick;

      child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : (_child$props$onClick = _child$props.onClick) === null || _child$props$onClick === void 0 ? void 0 : _child$props$onClick.call(_child$props, data, context);
    }

    props.onClick(data, context);
  };

  var renderDropdownColumn = function renderDropdownColumn(children, showSubmenu, pathPrefix) {
    var menuClass = ["".concat(dropdownMenuClass, "-column"), "narrow-scrollbar", {
      submenu__visible: showSubmenu
    }];
    return /* @__PURE__ */React.createElement("div", {
      key: "/".concat(pathPrefix),
      className: classNames(menuClass),
      style: {
        maxHeight: "".concat(maxHeight, "px")
      }
    }, children.map(function (item, idx) {
      if (!isDropdownItem(item)) {
        var optionItem = item;
        return /* @__PURE__ */React.createElement(DropdownItem, {
          key: idx,
          disabled: optionItem.disabled,
          active: isActive(optionItem, pathPrefix) || optionItem.active,
          value: optionItem.value,
          content: optionItem.content,
          divider: optionItem.divider,
          hasChildren: optionItem.children && optionItem.children.length > 0,
          path: "".concat(pathPrefix, "/").concat(optionItem.value),
          maxColumnWidth: maxColumnWidth,
          minColumnWidth: minColumnWidth,
          onClick: function onClick(data, context) {
            return handleItemClick({
              data: data,
              context: context,
              idx: idx
            });
          },
          onHover: handleHoverItem
        });
      }

      var childItem = item;
      return /*#__PURE__*/React.cloneElement(childItem, {
        key: idx,
        hasChildren: getActiveItemChild(childItem.props.children).length > 0,
        path: "".concat(pathPrefix, "/").concat(childItem.props.value),
        maxColumnWidth: maxColumnWidth,
        minColumnWidth: minColumnWidth,
        onHover: handleHoverItem,
        active: isActive(item, pathPrefix) || childItem.props.active,
        children: getActiveItemChild(childItem.props.children, "Normal"),
        onClick: function onClick(data, context) {
          return handleItemClick({
            data: data,
            context: context,
            idx: idx
          }, "DropdownItem", childItem);
        }
      });
    }));
  };

  var dropdownItems = function dropdownItems(options2) {
    var _activeItem$children;

    var pathPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var columns = [];
    var activeItem = options2.find(function (item) {
      return isActive(item, pathPrefix, false);
    });
    columns.push(renderDropdownColumn(options2, !!activeItem, pathPrefix));

    if ( /*#__PURE__*/isValidElement(activeItem)) {
      var activeItemChildren = getActiveItemChild(activeItem.props.children);

      if (activeItemChildren.length > 0) {
        columns.push.apply(columns, _toConsumableArray(dropdownItems(activeItemChildren, "".concat(pathPrefix, "/").concat(activeItem.props.value))));
      }
    } else if (activeItem !== null && activeItem !== void 0 && (_activeItem$children = activeItem.children) !== null && _activeItem$children !== void 0 && _activeItem$children.length) {
      columns.push.apply(columns, _toConsumableArray(dropdownItems(activeItem.children, "".concat(pathPrefix, "/").concat(activeItem.value))));
    }

    return columns;
  };

  var itemContent = getActiveItemChild(props === null || props === void 0 ? void 0 : props.children);
  var renderDropdownItems = dropdownItems(itemContent.length > 0 ? itemContent : options);
  return /* @__PURE__ */React.createElement("div", {
    className: dropdownMenuClass
  }, renderDropdownItems);
};

DropdownMenu.displayName = "DropdownMenu";

export { DropdownMenu as default };
//# sourceMappingURL=DropdownMenu.js.map
