/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../../_chunks/dep-a1655de1.js');
var pick = require('../../../_chunks/dep-46e6aa42.js');
var _common_js_log_log = require('../log/log.js');
require('../../../_chunks/dep-8a3a8f07.js');
require('../../../_chunks/dep-c90cc28f.js');
require('../../../_chunks/dep-3405bda4.js');
require('../../../_chunks/dep-cb0f33ac.js');
require('../../../_chunks/dep-fcf32c81.js');
require('../../../_chunks/dep-b1a67107.js');
require('../../../_chunks/dep-3b69722d.js');
require('../../../_chunks/dep-fde4d28a.js');
require('../../../_chunks/dep-e266830c.js');
require('../../../_chunks/dep-15a4424e.js');
require('../../../_chunks/dep-c40d75ac.js');
require('../../../_chunks/dep-86abec96.js');
require('../../../_chunks/dep-c7b74e6e.js');
require('../../../_chunks/dep-9cacaf01.js');
require('../../../_chunks/dep-542cc308.js');
require('../../../_chunks/dep-8e0a771d.js');
require('../../../_chunks/dep-9c339ffc.js');
require('../../../_chunks/dep-c3bd0e8c.js');
require('../../../_chunks/dep-38856994.js');
require('../../../_chunks/dep-ec5420f8.js');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function getExposedProps(node) {
  var props = pick.pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
  return props;
}

function createNodeModel(node) {
  var props = getExposedProps(node);

  var model = _objectSpread(_objectSpread({}, props), {}, {
    getLevel: function getLevel() {
      return node.getLevel();
    },
    getIndex: function getIndex() {
      return node.getIndex();
    },
    isFirst: function isFirst() {
      return node.isFirst();
    },
    isLast: function isLast() {
      return node.isLast();
    },
    isLeaf: function isLeaf() {
      return node.isLeaf();
    },
    insertBefore: function insertBefore(newData) {
      return node.insertBefore(newData);
    },
    insertAfter: function insertAfter(newData) {
      return node.insertAfter(newData);
    },
    appendData: function appendData(data) {
      return node.append(data);
    },
    getPath: function getPath() {
      var nodes = node.getPath();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getParent: function getParent() {
      var _node$parent;

      return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
    },
    getParents: function getParents() {
      var nodes = node.getParents();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getRoot: function getRoot() {
      var root = node.getRoot();
      return root === null || root === void 0 ? void 0 : root.getModel();
    },
    getSiblings: function getSiblings() {
      var nodes = node.getSiblings();
      return nodes.map(function (item) {
        return item.getModel();
      });
    },
    getChildren: function getChildren(deep) {
      var childrenModel = false;
      var children = node.children;

      if (Array.isArray(children)) {
        if (children.length > 0) {
          if (deep) {
            var nodes = node.walk();
            nodes.shift();
            childrenModel = nodes.map(function (item) {
              return item.getModel();
            });
          } else {
            childrenModel = children.map(function (item) {
              return item.getModel();
            });
          }
        } else {
          childrenModel = false;
        }
      } else if (typeof children === "boolean") {
        childrenModel = children;
      }

      return childrenModel;
    },
    remove: function remove(value) {
      if (!value) {
        node.remove();
        return;
      }

      var tree = node.tree;
      var targetNode = tree.getNode(value);

      if (!targetNode) {
        _common_js_log_log["default"].warnOnce("Tree", "`".concat(value, "` is not exist"));
        return;
      }

      var parents = targetNode.getParents();
      var parentValues = parents.map(function (pnode) {
        return pnode.value;
      });

      if (parentValues.indexOf(node.value) < 0) {
        _common_js_log_log["default"].warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
        return;
      }

      targetNode.remove();
    },
    setData: function setData(data) {
      Object.assign(node.data, data);
    }
  });

  return model;
}
function updateNodeModel(model, node) {
  var props = getExposedProps(node);
  Object.assign(model, props);
}

exports.createNodeModel = createNodeModel;
exports.updateNodeModel = updateNodeModel;
//# sourceMappingURL=tree-node-model.js.map
