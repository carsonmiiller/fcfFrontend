/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../_chunks/dep-f6a4bdd5.js');
var slicedToArray = require('../_chunks/dep-3cf9becb.js');
var React = require('react');
var classNames = require('classnames');
var _util_useConfig = require('../_util/useConfig.js');
var dropdown_DropdownItem = require('./DropdownItem.js');
require('../_chunks/dep-19841e1d.js');
require('../_chunks/dep-38a46f48.js');
require('../_chunks/dep-a1655de1.js');
require('../_chunks/dep-8a149e9f.js');
require('../_chunks/dep-3b69722d.js');
require('../_chunks/dep-fde4d28a.js');
require('../_chunks/dep-e266830c.js');
require('../_chunks/dep-fcf32c81.js');
require('../_chunks/dep-3405bda4.js');
require('../_chunks/dep-15a4424e.js');
require('../_chunks/dep-c40d75ac.js');
require('../_chunks/dep-910dcfa3.js');
require('../_chunks/dep-633a5671.js');
require('../_chunks/dep-9c339ffc.js');
require('../_chunks/dep-b1a67107.js');
require('../_chunks/dep-ab43c961.js');
require('../_chunks/dep-9cacaf01.js');
require('../_chunks/dep-c72c7229.js');
require('../_chunks/dep-8e0a771d.js');
require('../_chunks/dep-c90cc28f.js');
require('../_chunks/dep-542cc308.js');
require('../_chunks/dep-c6637e11.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../config-provider/zh_CN_config.js');
require('tdesign-icons-react');
require('../_util/useRipple.js');
require('../_util/useAnimation.js');
require('../_util/setStyle.js');
require('../_util/dom.js');
require('raf');
require('../_chunks/dep-1d819290.js');
require('../_util/easing.js');
require('../_util/helper.js');
require('../_chunks/dep-23535a52.js');
require('../_chunks/dep-e3db5727.js');
require('../_chunks/dep-86abec96.js');
require('../_chunks/dep-cb0f33ac.js');
require('../_chunks/dep-f3090217.js');
require('../_chunks/dep-d4a0b3f0.js');
require('../_chunks/dep-6dfb2577.js');
require('../divider/index.js');
require('../divider/Divider.js');
require('../divider/defaultProps.js');
require('./defaultProps.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var DropdownMenu = function DropdownMenu(props) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 300 : _props$maxHeight,
      _props$maxColumnWidth = props.maxColumnWidth,
      maxColumnWidth = _props$maxColumnWidth === void 0 ? 100 : _props$maxColumnWidth,
      _props$minColumnWidth = props.minColumnWidth,
      minColumnWidth = _props$minColumnWidth === void 0 ? 10 : _props$minColumnWidth;

  var _useState = React.useState(""),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      path = _useState2[0],
      setPath = _useState2[1];

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var dropdownMenuClass = "".concat(classPrefix, "-dropdown__menu");

  var isActive = function isActive(item, pathPrefix) {
    var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var itemPath = /*#__PURE__*/React.isValidElement(item) ? "".concat(pathPrefix, "/").concat(item.props.value) : "".concat(pathPrefix, "/").concat(item.value);

    if (excludeSelf && path === itemPath) {
      return false;
    }

    return path.indexOf(itemPath) === 0;
  };

  var isDropdownItem = function isDropdownItem(child) {
    if ( /*#__PURE__*/React.isValidElement(child) && child.type === dropdown_DropdownItem["default"]) {
      return true;
    }

    return false;
  };

  var getActiveItemChild = function getActiveItemChild(children) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "DropdownItem";

    if (!children) {
      return [];
    }

    var activeItemChildren = React__default["default"].Children.toArray(children);
    return type === "DropdownItem" ? activeItemChildren.filter(function (e) {
      return isDropdownItem(e);
    }) : activeItemChildren.filter(function (e) {
      return !isDropdownItem(e);
    });
  };

  var handleHoverItem = function handleHoverItem(path2) {
    setPath(path2);
  };

  var handleItemClick = function handleItemClick(options2) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Normal";
    var child = arguments.length > 2 ? arguments[2] : undefined;
    var data = options2.data,
        context = options2.context,
        idx = options2.idx;

    if (type === "Normal") {
      var _options2$idx, _options2$idx$onClick;

      (_options2$idx = options2[idx]) === null || _options2$idx === void 0 ? void 0 : (_options2$idx$onClick = _options2$idx.onClick) === null || _options2$idx$onClick === void 0 ? void 0 : _options2$idx$onClick.call(_options2$idx, data, context);
    } else {
      var _child$props, _child$props$onClick;

      child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : (_child$props$onClick = _child$props.onClick) === null || _child$props$onClick === void 0 ? void 0 : _child$props$onClick.call(_child$props, data, context);
    }

    props.onClick(data, context);
  };

  var renderDropdownColumn = function renderDropdownColumn(children, showSubmenu, pathPrefix) {
    var menuClass = ["".concat(dropdownMenuClass, "-column"), "narrow-scrollbar", {
      submenu__visible: showSubmenu
    }];
    return /* @__PURE__ */React__default["default"].createElement("div", {
      key: "/".concat(pathPrefix),
      className: classNames__default["default"](menuClass),
      style: {
        maxHeight: "".concat(maxHeight, "px")
      }
    }, children.map(function (item, idx) {
      if (!isDropdownItem(item)) {
        var optionItem = item;
        return /* @__PURE__ */React__default["default"].createElement(dropdown_DropdownItem["default"], {
          key: idx,
          disabled: optionItem.disabled,
          active: isActive(optionItem, pathPrefix) || optionItem.active,
          value: optionItem.value,
          content: optionItem.content,
          divider: optionItem.divider,
          hasChildren: optionItem.children && optionItem.children.length > 0,
          path: "".concat(pathPrefix, "/").concat(optionItem.value),
          maxColumnWidth: maxColumnWidth,
          minColumnWidth: minColumnWidth,
          onClick: function onClick(data, context) {
            return handleItemClick({
              data: data,
              context: context,
              idx: idx
            });
          },
          onHover: handleHoverItem
        });
      }

      var childItem = item;
      return /*#__PURE__*/React__default["default"].cloneElement(childItem, {
        key: idx,
        hasChildren: getActiveItemChild(childItem.props.children).length > 0,
        path: "".concat(pathPrefix, "/").concat(childItem.props.value),
        maxColumnWidth: maxColumnWidth,
        minColumnWidth: minColumnWidth,
        onHover: handleHoverItem,
        active: isActive(item, pathPrefix) || childItem.props.active,
        children: getActiveItemChild(childItem.props.children, "Normal"),
        onClick: function onClick(data, context) {
          return handleItemClick({
            data: data,
            context: context,
            idx: idx
          }, "DropdownItem", childItem);
        }
      });
    }));
  };

  var dropdownItems = function dropdownItems(options2) {
    var _activeItem$children;

    var pathPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var columns = [];
    var activeItem = options2.find(function (item) {
      return isActive(item, pathPrefix, false);
    });
    columns.push(renderDropdownColumn(options2, !!activeItem, pathPrefix));

    if ( /*#__PURE__*/React.isValidElement(activeItem)) {
      var activeItemChildren = getActiveItemChild(activeItem.props.children);

      if (activeItemChildren.length > 0) {
        columns.push.apply(columns, toConsumableArray._toConsumableArray(dropdownItems(activeItemChildren, "".concat(pathPrefix, "/").concat(activeItem.props.value))));
      }
    } else if (activeItem !== null && activeItem !== void 0 && (_activeItem$children = activeItem.children) !== null && _activeItem$children !== void 0 && _activeItem$children.length) {
      columns.push.apply(columns, toConsumableArray._toConsumableArray(dropdownItems(activeItem.children, "".concat(pathPrefix, "/").concat(activeItem.value))));
    }

    return columns;
  };

  var itemContent = getActiveItemChild(props === null || props === void 0 ? void 0 : props.children);
  var renderDropdownItems = dropdownItems(itemContent.length > 0 ? itemContent : options);
  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: dropdownMenuClass
  }, renderDropdownItems);
};

DropdownMenu.displayName = "DropdownMenu";

exports["default"] = DropdownMenu;
//# sourceMappingURL=DropdownMenu.js.map
