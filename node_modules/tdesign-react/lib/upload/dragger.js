/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../_chunks/dep-3cf9becb.js');
var React = require('react');
var classNames = require('classnames');
var _util_useConfig = require('../_util/useConfig.js');
var locale_LocalReceiver = require('../locale/LocalReceiver.js');
var upload_themes_draggerProgress = require('./themes/dragger-progress.js');
require('../_chunks/dep-19841e1d.js');
require('../_chunks/dep-38a46f48.js');
require('../_chunks/dep-a1655de1.js');
require('../_chunks/dep-8a149e9f.js');
require('../_chunks/dep-3b69722d.js');
require('../_chunks/dep-fde4d28a.js');
require('../_chunks/dep-e266830c.js');
require('../_chunks/dep-fcf32c81.js');
require('../_chunks/dep-3405bda4.js');
require('../_chunks/dep-15a4424e.js');
require('../_chunks/dep-c40d75ac.js');
require('../_chunks/dep-910dcfa3.js');
require('../_chunks/dep-633a5671.js');
require('../_chunks/dep-9c339ffc.js');
require('../_chunks/dep-b1a67107.js');
require('../_chunks/dep-ab43c961.js');
require('../_chunks/dep-9cacaf01.js');
require('../_chunks/dep-c72c7229.js');
require('../_chunks/dep-8e0a771d.js');
require('../_chunks/dep-c90cc28f.js');
require('../_chunks/dep-542cc308.js');
require('../_chunks/dep-c6637e11.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../config-provider/zh_CN_config.js');
require('tdesign-icons-react');
require('../button/index.js');
require('../button/Button.js');
require('../_chunks/dep-23535a52.js');
require('../_util/useRipple.js');
require('../_util/useAnimation.js');
require('../_util/setStyle.js');
require('../_util/dom.js');
require('raf');
require('../_chunks/dep-1d819290.js');
require('../_util/easing.js');
require('../loading/index.js');
require('../loading/Loading.js');
require('../common/Portal.js');
require('react-dom');
require('../loading/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('../loading/defaultProps.js');
require('../loading/plugin.js');
require('../button/defaultProps.js');
require('./util.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var Dragger = function Dragger(props) {
  var file = props.file,
      display = props.display,
      _onUpload = props.onUpload,
      onRemove = props.onRemove,
      customDraggerRender = props.customDraggerRender,
      onCancel = props.onCancel;

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("upload"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      locale = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      dragActive = _useState2[0],
      setDragActive = _useState2[1];

  var target = React__default["default"].useRef();
  var _locale$dragger = locale.dragger,
      draggingText = _locale$dragger.draggingText,
      dragDropText = _locale$dragger.dragDropText;
  var dragTriggerText = t(locale.triggerUploadText.normal);
  var classes = classNames__default["default"]("".concat(classPrefix, "-upload__dragger"), !file ? "".concat(classPrefix, "-upload__dragger-center") : "", (file === null || file === void 0 ? void 0 : file.status) === "fail" ? "".concat(classPrefix, "-upload__dragger-error") : "");
  var defaultDragElement = React__default["default"].useMemo(function () {
    var unActiveElement = /* @__PURE__ */React__default["default"].createElement("div", null, /* @__PURE__ */React__default["default"].createElement("span", {
      className: "".concat(classPrefix, "-upload--highlight")
    }, dragTriggerText), /* @__PURE__ */React__default["default"].createElement("span", null, "\xA0\xA0/\xA0\xA0", t(draggingText)));
    var activeElement = /* @__PURE__ */React__default["default"].createElement("div", null, t(dragDropText));
    return dragActive ? activeElement : unActiveElement;
  }, [classPrefix, dragActive, dragDropText, dragTriggerText, draggingText, t]);
  var dragElement = React__default["default"].useMemo(function () {
    var content;

    if (file && display !== "custom") {
      content = /* @__PURE__ */React__default["default"].createElement(upload_themes_draggerProgress["default"], {
        onRemove: onRemove,
        display: display,
        onTrigger: props.onTrigger,
        file: file,
        onUpload: function onUpload() {
          _onUpload === null || _onUpload === void 0 ? void 0 : _onUpload(file);
        },
        onCancel: onCancel
      });
    } else {
      content = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-upload__trigger"),
        onClick: props.onTrigger
      }, (customDraggerRender === null || customDraggerRender === void 0 ? void 0 : customDraggerRender({
        dragActive: dragActive
      })) || defaultDragElement);
    }

    return content;
  }, [file, display, onRemove, props.onTrigger, onCancel, _onUpload, classPrefix, customDraggerRender, dragActive, defaultDragElement]);

  var handleDrop = function handleDrop(event) {
    var _props$onChange, _props$onDrop;

    event.preventDefault();
    (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, event.dataTransfer.files);
    (_props$onDrop = props.onDrop) === null || _props$onDrop === void 0 ? void 0 : _props$onDrop.call(props, event);
    setDragActive(false);
  };

  var handleDragenter = function handleDragenter(event) {
    var _props$onDragenter;

    event.preventDefault();
    (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props, event);
    setDragActive(true);
  };

  var handleDragleave = function handleDragleave(event) {
    var _props$onDragleave;

    if (!target.current) return;
    event.preventDefault();
    (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props, event);
    setDragActive(false);
  };

  var handleDragover = function handleDragover(event) {
    event.preventDefault();
  };

  return /* @__PURE__ */React__default["default"].createElement("div", {
    ref: target,
    className: classes,
    onDrop: handleDrop,
    onDragEnter: handleDragenter,
    onDragOver: handleDragover,
    onDragLeave: handleDragleave
  }, dragElement);
};

exports["default"] = Dragger;
//# sourceMappingURL=dragger.js.map
