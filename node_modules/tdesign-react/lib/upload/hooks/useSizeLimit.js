/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var slicedToArray = require('../../_chunks/dep-3cf9becb.js');
var locale_LocalReceiver = require('../../locale/LocalReceiver.js');
require('../../_chunks/dep-19841e1d.js');
require('../../_chunks/dep-a1655de1.js');
require('react');
require('../../_chunks/dep-38a46f48.js');
require('../../_chunks/dep-8a149e9f.js');
require('../../_chunks/dep-3b69722d.js');
require('../../_chunks/dep-fde4d28a.js');
require('../../_chunks/dep-e266830c.js');
require('../../_chunks/dep-fcf32c81.js');
require('../../_chunks/dep-3405bda4.js');
require('../../_chunks/dep-15a4424e.js');
require('../../_chunks/dep-c40d75ac.js');
require('../../_chunks/dep-910dcfa3.js');
require('../../_chunks/dep-633a5671.js');
require('../../_chunks/dep-9c339ffc.js');
require('../../_chunks/dep-b1a67107.js');
require('../../_chunks/dep-ab43c961.js');
require('../../_chunks/dep-9cacaf01.js');
require('../../_chunks/dep-c72c7229.js');
require('../../_chunks/dep-8e0a771d.js');
require('../../_chunks/dep-c90cc28f.js');
require('../../_chunks/dep-542cc308.js');
require('../../_chunks/dep-c6637e11.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../config-provider/zh_CN_config.js');

var SIZE_MAP = {
  B: 1,
  KB: 1024,
  MB: 1048576,
  GB: 1073741824
};

function judgeIsSuitableSize(fileSize, sizeLimit, unit) {
  var units = ["B", "KB", "MB", "GB"];
  var index = units.indexOf(unit);

  if (index === -1) {
    console.warn("TDesign Upload Warn: `sizeLimit.unit` can only be one of ".concat(units.join()));
  }

  return fileSize <= sizeLimit * SIZE_MAP[unit];
}

function useHandleLimit() {
  var _useLocaleReceiver = locale_LocalReceiver.useLocaleReceiver("upload"),
      _useLocaleReceiver2 = slicedToArray._slicedToArray(_useLocaleReceiver, 2),
      local = _useLocaleReceiver2[0],
      t = _useLocaleReceiver2[1];

  return handleSizeLimit;

  function handleSizeLimit() {
    var fileSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var rawSizeLimit = arguments.length > 1 ? arguments[1] : undefined;
    var sizeLimit = typeof rawSizeLimit === "number" ? {
      size: rawSizeLimit,
      unit: "KB"
    } : rawSizeLimit;
    sizeLimit.unit = sizeLimit.unit.toUpperCase();
    var isSuitableSize = judgeIsSuitableSize(fileSize, sizeLimit.size, sizeLimit.unit);
    var errorMsg;

    if (!isSuitableSize) {
      errorMsg = sizeLimit.message ? t(sizeLimit.message, {
        sizeLimit: sizeLimit.size
      }) : "".concat(t(local.sizeLimitMessage, {
        sizeLimit: sizeLimit.size
      }), " ").concat(sizeLimit.unit);
    }

    return [isSuitableSize, errorMsg];
  }
}

exports["default"] = useHandleLimit;
//# sourceMappingURL=useSizeLimit.js.map
