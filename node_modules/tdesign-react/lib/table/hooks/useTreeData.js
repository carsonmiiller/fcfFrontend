/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-a1655de1.js');
var toConsumableArray = require('../../_chunks/dep-f6a4bdd5.js');
var slicedToArray = require('../../_chunks/dep-3cf9becb.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var cloneDeep = require('../../_chunks/dep-1f7e83e9.js');
var get = require('../../_chunks/dep-3181fd9f.js');
var classNames = require('classnames');
var table_hooks_treeStore = require('./tree-store.js');
var table_hooks_useClassName = require('./useClassName.js');
var table_TR = require('../TR.js');
require('../../_chunks/dep-19841e1d.js');
require('../../_chunks/dep-ce5aa35f.js');
require('../../_chunks/dep-8a149e9f.js');
require('../../_chunks/dep-3b69722d.js');
require('../../_chunks/dep-fde4d28a.js');
require('../../_chunks/dep-e266830c.js');
require('../../_chunks/dep-fcf32c81.js');
require('../../_chunks/dep-3405bda4.js');
require('../../_chunks/dep-15a4424e.js');
require('../../_chunks/dep-c40d75ac.js');
require('../../_chunks/dep-910dcfa3.js');
require('../../_chunks/dep-633a5671.js');
require('../../_chunks/dep-9c339ffc.js');
require('../../_chunks/dep-b1a67107.js');
require('../../_chunks/dep-ab43c961.js');
require('../../_chunks/dep-9cacaf01.js');
require('../../_chunks/dep-c72c7229.js');
require('../../_chunks/dep-8e0a771d.js');
require('../../_chunks/dep-c90cc28f.js');
require('../../_chunks/dep-542cc308.js');
require('../../_chunks/dep-dfcfc710.js');
require('../../_chunks/dep-ec5420f8.js');
require('../../_chunks/dep-029baf10.js');
require('../../_chunks/dep-8a3a8f07.js');
require('../../_chunks/dep-cb0f33ac.js');
require('../../_chunks/dep-86abec96.js');
require('../../_chunks/dep-b8367f2e.js');
require('../utils.js');
require('../../_common/js/log/log.js');
require('../../_util/useConfig.js');
require('../../_chunks/dep-38a46f48.js');
require('../../_chunks/dep-c6637e11.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../config-provider/zh_CN_config.js');
require('./useFixed.js');
require('../../_common/js/utils/getScrollbarWidth.js');
require('../../_util/dom.js');
require('raf');
require('../../_chunks/dep-1d819290.js');
require('../../_util/easing.js');
require('../Ellipsis.js');
require('../../_chunks/dep-85b3eaa4.js');
require('../../_chunks/dep-e19f22f6.js');
require('../../popup/index.js');
require('../../popup/Popup.js');
require('react-transition-group');
require('react-popper');
require('../../hooks/useControlled.js');
require('../../_chunks/dep-f3090217.js');
require('../../_chunks/dep-d4a0b3f0.js');
require('../../_chunks/dep-6dfb2577.js');
require('../../_util/noop.js');
require('../../_util/useAnimation.js');
require('../../_util/composeRefs.js');
require('../../common/Portal.js');
require('react-dom');
require('../../popup/hooks/useTriggerProps.js');
require('../../_util/useClickOutside.js');
require('../../popup/utils/getTransitionParams.js');
require('../../_util/useMutationObserver.js');
require('../../_util/useWindowSize.js');
require('../../popup/defaultProps.js');
require('./useLazyLoad.js');
require('../../_common/js/utils/observe.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useTreeData(props) {
  var data = props.data,
      columns = props.columns,
      tree = props.tree,
      rowKey = props.rowKey;

  var _useState = React.useState(new table_hooks_treeStore["default"]()),
      _useState2 = slicedToArray._slicedToArray(_useState, 1),
      store = _useState2[0];

  var _useState3 = React.useState(),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      treeNodeCol = _useState4[0],
      setTreeNodeCol = _useState4[1];

  var _useState5 = React.useState(data || []),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      dataSource = _useState6[0],
      setDataSource = _useState6[1];

  var _useClassName = table_hooks_useClassName["default"](),
      tableTreeClasses = _useClassName.tableTreeClasses;

  var rowDataKeys = React.useMemo(function () {
    return {
      rowKey: rowKey || "id",
      childrenKey: (tree === null || tree === void 0 ? void 0 : tree.childrenKey) || "children"
    };
  }, [rowKey, tree === null || tree === void 0 ? void 0 : tree.childrenKey]);
  React.useEffect(function () {
    if (!data || !store) return;

    if (!tree || !Object.keys(tree).length) {
      setDataSource(data);
      return;
    }

    var newVal = cloneDeep.cloneDeep_1(data);
    setDataSource(newVal);
    store.initialTreeStore(newVal, columns, rowDataKeys);
  }, [data]);
  React.useEffect(function () {
    if (!tree || !Object.keys(tree).length) return;
    store.initialTreeStore(data, columns, rowDataKeys);
  }, [columns, rowDataKeys]);
  React.useEffect(function () {
    var treeNodeColTmp = getTreeNodeColumnCol();
    setTreeNodeCol(treeNodeColTmp);
  }, [columns]);

  function getTreeNodeStyle(level) {
    var _props$tree;

    if (level === void 0) return;
    var indent = ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.indent) || 24;
    return {
      paddingLeft: "".concat(level * indent || 1, "px")
    };
  }

  function toggleExpandData(p) {
    var newData = store.toggleExpandData(p, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(newData));

    if (p.trigger === "inner") {
      var _props$onTreeExpandCh, _store$treeDataMap;

      var rowValue = get.get_1(p.row, rowDataKeys.rowKey);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: store === null || store === void 0 ? void 0 : (_store$treeDataMap = store.treeDataMap) === null || _store$treeDataMap === void 0 ? void 0 : _store$treeDataMap.get(rowValue)
      });
    }
  }

  function getTreeNodeColumnCol() {
    var _props$tree2;

    var columns2 = props.columns;
    var treeNodeColumnIndex = ((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.treeNodeColumnIndex) || 0;

    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;

      treeNodeColumnIndex += 1;
    }

    return columns2[treeNodeColumnIndex];
  }

  function formatTreeColumn(col) {
    if (!col || !treeNodeCol || !store) return {};
    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;

    var newCol = _objectSpread({}, treeNodeCol);

    newCol.cell = function (p) {
      var cellInfo = table_TR.renderCell(_objectSpread(_objectSpread({}, p), {}, {
        col: _objectSpread({}, treeNodeCol)
      }));
      var currentState = store.treeDataMap.get(get.get_1(p.row, rowDataKeys.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

      var classes = defineProperty._defineProperty({}, tableTreeClasses.inlineCol, !!col.ellipsis);

      var childrenNodes = get.get_1(p.row, rowDataKeys.childrenKey);

      if (childrenNodes && childrenNodes instanceof Array) {
        var _store$treeDataMap$ge;

        var IconNode = (_store$treeDataMap$ge = store.treeDataMap.get(get.get_1(p.row, rowDataKeys.rowKey))) !== null && _store$treeDataMap$ge !== void 0 && _store$treeDataMap$ge.expanded ? tdesignIconsReact.MinusRectangleIcon : tdesignIconsReact.AddRectangleIcon;
        return /* @__PURE__ */React__default["default"].createElement("div", {
          className: classNames__default["default"]([tableTreeClasses.col, classes]),
          style: colStyle
        }, !!childrenNodes.length && /* @__PURE__ */React__default["default"].createElement(IconNode, {
          className: tableTreeClasses.icon,
          onClick: function onClick() {
            return toggleExpandData(_objectSpread(_objectSpread({}, p), {}, {
              trigger: "inner"
            }));
          }
        }), cellInfo);
      }

      return /* @__PURE__ */React__default["default"].createElement("div", {
        style: colStyle,
        className: classNames__default["default"](classes)
      }, cellInfo);
    };

    if (newCol.ellipsis === true) {
      newCol.ellipsis = function (p) {
        return table_TR.renderCell(_objectSpread(_objectSpread({}, p), {}, {
          col: _objectSpread({}, treeNodeCol)
        }));
      };
    }

    return newCol;
  }

  function setData(key, newRowData) {
    var rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);

    var newData = toConsumableArray._toConsumableArray(dataSource);

    newData[rowIndex] = newRowData;
    setDataSource(toConsumableArray._toConsumableArray(newData));
  }

  function getData(key) {
    return store.getData(key);
  }

  function remove(key) {
    var newData = store.remove(key, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(newData));
  }

  function appendTo(key, newData) {
    var dataTmp = store.appendTo(key, newData, dataSource, rowDataKeys);
    setDataSource(toConsumableArray._toConsumableArray(dataTmp));
  }

  return {
    store: store,
    rowDataKeys: rowDataKeys,
    dataSource: dataSource,
    setData: setData,
    getData: getData,
    remove: remove,
    appendTo: appendTo,
    formatTreeColumn: formatTreeColumn,
    toggleExpandData: toggleExpandData
  };
}

exports["default"] = useTreeData;
//# sourceMappingURL=useTreeData.js.map
