/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../../_chunks/dep-f6a4bdd5.js');
var defineProperty = require('../../_chunks/dep-a1655de1.js');
var React = require('react');
var Sortable = require('sortablejs');
var get = require('../../_chunks/dep-3181fd9f.js');
var table_hooks_useClassName = require('./useClassName.js');
var _common_js_log_log = require('../../_common/js/log/log.js');
var _common_js_utils_swapDragArrayElement = require('../../_common/js/utils/swapDragArrayElement.js');
require('../../_chunks/dep-19841e1d.js');
require('../../_chunks/dep-8a3a8f07.js');
require('../../_chunks/dep-c90cc28f.js');
require('../../_chunks/dep-3405bda4.js');
require('../../_chunks/dep-cb0f33ac.js');
require('../../_chunks/dep-fcf32c81.js');
require('../../_chunks/dep-b1a67107.js');
require('../../_chunks/dep-3b69722d.js');
require('../../_chunks/dep-fde4d28a.js');
require('../../_chunks/dep-e266830c.js');
require('../../_chunks/dep-15a4424e.js');
require('../../_chunks/dep-c40d75ac.js');
require('../../_chunks/dep-86abec96.js');
require('../../_util/useConfig.js');
require('../../_chunks/dep-38a46f48.js');
require('../../_chunks/dep-8a149e9f.js');
require('../../_chunks/dep-910dcfa3.js');
require('../../_chunks/dep-633a5671.js');
require('../../_chunks/dep-9c339ffc.js');
require('../../_chunks/dep-ab43c961.js');
require('../../_chunks/dep-9cacaf01.js');
require('../../_chunks/dep-c72c7229.js');
require('../../_chunks/dep-8e0a771d.js');
require('../../_chunks/dep-542cc308.js');
require('../../_chunks/dep-c6637e11.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../config-provider/zh_CN_config.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Sortable__default = /*#__PURE__*/_interopDefaultLegacy(Sortable);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useDragSort(props, primaryTableRef) {
  var sortOnRowDraggable = props.sortOnRowDraggable,
      dragSort = props.dragSort,
      columns = props.columns,
      data = props.data,
      onDragSort = props.onDragSort;

  var _useClassName = table_hooks_useClassName["default"](),
      tableDraggableClasses = _useClassName.tableDraggableClasses,
      tableBaseClass = _useClassName.tableBaseClass;

  var dragCol = columns.find(function (item) {
    return item.colKey === "drag";
  });
  var isRowDraggable = sortOnRowDraggable || dragSort === "row";
  var isRowHandlerDraggable = dragSort === "row-handler" && !!dragCol;
  var isColDraggable = dragSort === "col";
  var lastRowList = React.useRef([]);
  var tData = React.useRef();
  var lastColList = React.useRef([]);
  var dragColumns = React.useRef([]);

  if (props.sortOnRowDraggable) {
    _common_js_log_log["default"].warn("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
  }

  React.useEffect(function () {
    lastRowList.current = data.map(function (item) {
      return String(get.get_1(item, props.rowKey));
    });
    tData.current = data;
  }, [data, props.rowKey]);
  React.useEffect(function () {
    lastColList.current = columns.map(function (t) {
      return t.colKey;
    });
    dragColumns.current = columns;
  }, [columns]);

  var registerRowDragEvent = function registerRowDragEvent(element) {
    var _dragInstanceTmp2;

    if (!isRowHandlerDraggable && !isRowDraggable) return;
    var dragInstanceTmp = null;
    var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");

    if (!dragContainer) {
      console.error("tbody does not exist.");
      return null;
    }

    var baseOptions = _objectSpread(_objectSpread({
      animation: 150
    }, props.dragSortOptions), {}, {
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp;

        (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(toConsumableArray._toConsumableArray(lastRowList.current));
        var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
        var params = {
          currentIndex: currentIndex,
          current: data[currentIndex],
          targetIndex: targetIndex,
          target: data[targetIndex],
          currentData: _common_js_utils_swapDragArrayElement["default"](tData.current, currentIndex, targetIndex),
          e: evt,
          sort: "row"
        };
        onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
      }
    });

    if (isRowDraggable) {
      dragInstanceTmp = new Sortable__default["default"](dragContainer, _objectSpread({}, baseOptions));
    } else if (isRowHandlerDraggable) {
      dragInstanceTmp = new Sortable__default["default"](dragContainer, _objectSpread(_objectSpread({}, baseOptions), {}, {
        handle: ".".concat(tableDraggableClasses.handle)
      }));
    }

    lastRowList.current = (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.toArray();
  };

  var registerColDragEvent = function registerColDragEvent(tableElement) {
    var _dragInstanceTmp4;

    if (!isColDraggable || !tableElement) return;
    var dragInstanceTmp = null;

    var options = _objectSpread(_objectSpread({
      animation: 150
    }, props.dragSortOptions), {}, {
      dataIdAttr: "data-colkey",
      direction: "vertical",
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      handle: ".".concat(tableBaseClass.thCellInner),
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp3;

        (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.sort(toConsumableArray._toConsumableArray(lastColList.current));
        var currentIndex = evt.oldIndex,
            targetIndex = evt.newIndex;
        var params = {
          currentIndex: currentIndex,
          current: dragColumns[currentIndex],
          targetIndex: targetIndex,
          target: dragColumns[targetIndex],
          currentData: _common_js_utils_swapDragArrayElement["default"](dragColumns.current, currentIndex, targetIndex),
          e: evt,
          sort: "col"
        };
        onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(params);
      }
    });

    var container = tableElement.querySelector("thead > tr");
    dragInstanceTmp = new Sortable__default["default"](container, options);
    lastColList.current = (_dragInstanceTmp4 = dragInstanceTmp) === null || _dragInstanceTmp4 === void 0 ? void 0 : _dragInstanceTmp4.toArray();
  };

  React.useEffect(function () {
    var _primaryTableRef$curr, _primaryTableRef$curr2;

    if (!primaryTableRef || !primaryTableRef.current) return;
    registerRowDragEvent((_primaryTableRef$curr = primaryTableRef.current) === null || _primaryTableRef$curr === void 0 ? void 0 : _primaryTableRef$curr.tableElement);
    registerColDragEvent((_primaryTableRef$curr2 = primaryTableRef.current) === null || _primaryTableRef$curr2 === void 0 ? void 0 : _primaryTableRef$curr2.tableHtmlElement);
  }, [primaryTableRef]);
  return {
    isRowDraggable: isRowDraggable,
    isRowHandlerDraggable: isRowHandlerDraggable,
    isColDraggable: isColDraggable
  };
}

exports["default"] = useDragSort;
//# sourceMappingURL=useDragSort.js.map
