/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var toConsumableArray = require('../../_chunks/dep-f6a4bdd5.js');
var defineProperty = require('../../_chunks/dep-a1655de1.js');
var slicedToArray = require('../../_chunks/dep-3cf9becb.js');
var React = require('react');
var intersection = require('../../_chunks/dep-3f9b5113.js');
var get = require('../../_chunks/dep-3181fd9f.js');
var isFunction = require('../../_chunks/dep-e266830c.js');
var hooks_useControlled = require('../../hooks/useControlled.js');
var table_utils = require('../utils.js');
var table_hooks_useClassName = require('./useClassName.js');
var checkbox_index = require('../../checkbox/index.js');
var radio_index = require('../../radio/index.js');
var _common_js_log_log = require('../../_common/js/log/log.js');
require('../../_chunks/dep-19841e1d.js');
require('../../_chunks/dep-86abec96.js');
require('../../_chunks/dep-fcf32c81.js');
require('../../_chunks/dep-3405bda4.js');
require('../../_chunks/dep-c90cc28f.js');
require('../../_chunks/dep-cb0f33ac.js');
require('../../_chunks/dep-b1a67107.js');
require('../../_chunks/dep-afd8013f.js');
require('../../_chunks/dep-3b69722d.js');
require('../../_chunks/dep-fde4d28a.js');
require('../../_chunks/dep-15a4424e.js');
require('../../_chunks/dep-c40d75ac.js');
require('../../_chunks/dep-bb21921b.js');
require('../../_chunks/dep-ab43c961.js');
require('../../_chunks/dep-910dcfa3.js');
require('../../_chunks/dep-633a5671.js');
require('../../_chunks/dep-9c339ffc.js');
require('../../_chunks/dep-9cacaf01.js');
require('../../_chunks/dep-8a3a8f07.js');
require('../../_chunks/dep-f3090217.js');
require('../../_chunks/dep-d4a0b3f0.js');
require('../../_chunks/dep-6dfb2577.js');
require('../../_util/noop.js');
require('../../_util/useConfig.js');
require('../../_chunks/dep-38a46f48.js');
require('../../_chunks/dep-8a149e9f.js');
require('../../_chunks/dep-c72c7229.js');
require('../../_chunks/dep-8e0a771d.js');
require('../../_chunks/dep-542cc308.js');
require('../../_chunks/dep-c6637e11.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../config-provider/zh_CN_config.js');
require('../../_chunks/dep-bc4205a0.js');
require('../../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../../common/Check.js');
require('../../_chunks/dep-23535a52.js');
require('classnames');
require('../../_util/helper.js');
require('../../_chunks/dep-e3db5727.js');
require('../../_chunks/dep-bc80a1a5.js');
require('../../checkbox/defaultProps.js');
require('../../_chunks/dep-9d835441.js');
require('../../_util/useCommonClassName.js');
require('../../radio/defaultProps.js');
require('../../_util/useMutationObserver.js');
require('../../_chunks/dep-85b3eaa4.js');
require('../../_chunks/dep-e19f22f6.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function useRowSelect(props) {
  var selectedRowKeys = props.selectedRowKeys,
      columns = props.columns,
      data = props.data,
      rowKey = props.rowKey;

  var _useClassName = table_hooks_useClassName["default"](),
      tableSelectedClasses = _useClassName.tableSelectedClasses;

  var _useState = React.useState(),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      selectedRowClassNames = _useState2[0],
      setSelectedRowClassNames = _useState2[1];

  var _useControlled = hooks_useControlled["default"](props, "selectedRowKeys", props.onSelectChange),
      _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
      tSelectedRowKeys = _useControlled2[0],
      setTSelectedRowKeys = _useControlled2[1];

  var selectColumn = props.columns.find(function (_ref) {
    var type = _ref.type;
    return ["multiple", "single"].includes(type);
  });
  var canSelectedRows = props.data.filter(function (row, rowIndex) {
    return !isDisabled(row, rowIndex);
  });
  var intersectionKeys = intersection.intersection_1(tSelectedRowKeys, canSelectedRows.map(function (t) {
    return get.get_1(t, rowKey || "id");
  }));
  React.useEffect(function () {
    if (!selectColumn && (!tSelectedRowKeys || !tSelectedRowKeys.length)) return;

    var disabledRowFunc = function disabledRowFunc(p) {
      return selectColumn.disabled(p) ? tableSelectedClasses.disabled : "";
    };

    var disabledRowClass = selectColumn !== null && selectColumn !== void 0 && selectColumn.disabled ? disabledRowFunc : void 0;
    var selected = new Set(tSelectedRowKeys);

    var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
      var row = _ref2.row;
      var rowId = get.get_1(row, rowKey || "id");
      return selected.has(rowId) ? tableSelectedClasses.selected : "";
    };

    var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
    setSelectedRowClassNames([disabledRowClass, selectedRowClass]);
  }, [data, columns, tSelectedRowKeys, selectColumn, rowKey]);

  function isDisabled(row, rowIndex) {
    return table_utils.isRowSelectedDisabled(selectColumn, row, rowIndex);
  }

  function getSelectedHeader() {
    var isIndeterminate = intersectionKeys.length > 0 && intersectionKeys.length < canSelectedRows.length;
    return function () {
      return /* @__PURE__ */React__default["default"].createElement(checkbox_index.Checkbox, {
        checked: intersectionKeys.length === canSelectedRows.length,
        indeterminate: isIndeterminate,
        disabled: !canSelectedRows.length,
        onChange: handleSelectAll
      });
    };
  }

  function renderSelectCell(p) {
    var column = p.col,
        _p$row = p.row,
        row = _p$row === void 0 ? {} : _p$row,
        rowIndex = p.rowIndex;
    var checked = tSelectedRowKeys.includes(get.get_1(row, rowKey || "id"));
    var disabled = typeof column.disabled === "function" ? column.disabled({
      row: row,
      rowIndex: rowIndex
    }) : column.disabled;
    var checkProps = isFunction.isFunction_1(column.checkProps) ? column.checkProps({
      row: row,
      rowIndex: rowIndex
    }) : column.checkProps;

    var selectBoxProps = _objectSpread(_objectSpread({
      checked: checked,
      disabled: disabled
    }, checkProps), {}, {
      onChange: function onChange() {
        handleSelectChange(row);
      }
    });

    var onCheckClick = function onCheckClick(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
    };

    if (column.type === "single") return /* @__PURE__ */React__default["default"].createElement(radio_index.Radio, _objectSpread(_objectSpread({}, selectBoxProps), {}, {
      onClick: onCheckClick
    }));
    if (column.type === "multiple") return /* @__PURE__ */React__default["default"].createElement(checkbox_index.Checkbox, _objectSpread(_objectSpread({}, selectBoxProps), {}, {
      onClick: onCheckClick
    }));
    return null;
  }

  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var selectedRowKeys2 = toConsumableArray._toConsumableArray(tSelectedRowKeys);

    var reRowKey = rowKey || "id";
    var id = get.get_1(row, reRowKey);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;

    if (selectColumn.type === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectColumn.type === "single") {
      selectedRowKeys2 = !isExisted ? [id] : [];
    } else {
      _common_js_log_log["default"].warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }

    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: table_utils.filterDataByIds(props.data, selectedRowKeys2, reRowKey),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }

  function handleSelectAll(checked) {
    var reRowKey = rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.map(function (record) {
      return get.get_1(record, reRowKey);
    });
    var disabledSelectedRowKeys = (selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.filter(function (id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(toConsumableArray._toConsumableArray(disabledSelectedRowKeys), toConsumableArray._toConsumableArray(canSelectedRowKeys)) : toConsumableArray._toConsumableArray(disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: table_utils.filterDataByIds(props.data, allIds, reRowKey),
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }

  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection) return col;
    return _objectSpread(_objectSpread({}, col), {}, {
      width: col.width || 64,
      cell: function cell(p) {
        return renderSelectCell(p);
      },
      title: col.type === "multiple" ? getSelectedHeader() : ""
    });
  }

  return {
    selectedRowClassNames: selectedRowClassNames,
    formatToRowSelectColumn: formatToRowSelectColumn
  };
}

exports["default"] = useRowSelect;
//# sourceMappingURL=useRowSelect.js.map
