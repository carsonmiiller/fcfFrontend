{"version":3,"file":"useTreeData.js","sources":["../../../src/table/hooks/useTreeData.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { AddRectangleIcon, MinusRectangleIcon } from 'tdesign-icons-react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport classNames from 'classnames';\nimport TableTreeStore from './tree-store';\nimport { TdEnhancedTableProps, PrimaryTableCol, TableRowData, TableRowValue, TableRowState } from '../type';\nimport useClassName from './useClassName';\nimport { renderCell } from '../TR';\n\nexport default function useTreeData(props: TdEnhancedTableProps) {\n  const { data, columns, tree, rowKey } = props;\n  const [store] = useState(new TableTreeStore() as InstanceType<typeof TableTreeStore>);\n  const [treeNodeCol, setTreeNodeCol] = useState<PrimaryTableCol>();\n  const [dataSource, setDataSource] = useState<TdEnhancedTableProps['data']>(data || []);\n  const { tableTreeClasses } = useClassName();\n\n  const rowDataKeys = useMemo(\n    () => ({\n      rowKey: rowKey || 'id',\n      childrenKey: tree?.childrenKey || 'children',\n    }),\n    [rowKey, tree?.childrenKey],\n  );\n\n  // TODO：行选中会触发 tree 的变化。按理说，不应该\n  useEffect(\n    () => {\n      if (!data || !store) return;\n      // 如果没有树形解构，则不需要相关逻辑\n      if (!tree || !Object.keys(tree).length) {\n        setDataSource(data);\n        return;\n      }\n      const newVal = cloneDeep(data);\n      setDataSource(newVal);\n      store.initialTreeStore(newVal, columns, rowDataKeys);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data],\n  );\n\n  useEffect(() => {\n    // 如果没有树形解构，则不需要相关逻辑\n    if (!tree || !Object.keys(tree).length) return;\n    store.initialTreeStore(data, columns, rowDataKeys);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [columns, rowDataKeys]);\n\n  useEffect(\n    () => {\n      const treeNodeColTmp = getTreeNodeColumnCol();\n      setTreeNodeCol(treeNodeColTmp);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [columns],\n  );\n\n  function getTreeNodeStyle(level: number) {\n    if (level === undefined) return;\n    const indent = props.tree?.indent || 24;\n    // 默认 1px 是为了临界省略\n    return {\n      paddingLeft: `${level * indent || 1}px`,\n    };\n  }\n\n  /**\n   * 组件实例方法，展开或收起某一行\n   * @param p 行数据\n   */\n  function toggleExpandData(p: { row: TableRowData; rowIndex: number; trigger?: 'inner' }) {\n    const newData = store.toggleExpandData(p, dataSource, rowDataKeys);\n    setDataSource([...newData]);\n    if (p.trigger === 'inner') {\n      const rowValue = get(p.row, rowDataKeys.rowKey);\n      props.onTreeExpandChange?.({\n        row: p.row,\n        rowIndex: p.rowIndex,\n        rowState: store?.treeDataMap?.get(rowValue),\n      });\n    }\n  }\n\n  function getTreeNodeColumnCol() {\n    const { columns } = props;\n    let treeNodeColumnIndex = props.tree?.treeNodeColumnIndex || 0;\n    // type 存在，则表示表格内部渲染的特殊列，比如：展开行按钮、复选框、单选按钮等，不能作为树结点列。因此树结点展开列向后顺移\n    while (\n      columns[treeNodeColumnIndex]?.type ||\n      columns[treeNodeColumnIndex]?.colKey === '__EXPAND_ROW_ICON_COLUMN__'\n    ) {\n      treeNodeColumnIndex += 1;\n    }\n    return columns[treeNodeColumnIndex];\n  }\n\n  function formatTreeColumn(col: PrimaryTableCol): PrimaryTableCol {\n    if (!col || !treeNodeCol || !store) return {};\n    if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.colKey) return col;\n    const newCol = { ...treeNodeCol };\n    newCol.cell = (p) => {\n      const cellInfo = renderCell({ ...p, col: { ...treeNodeCol } });\n      const currentState = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey));\n      const colStyle = getTreeNodeStyle(currentState?.level);\n      const classes = { [tableTreeClasses.inlineCol]: !!col.ellipsis };\n      const childrenNodes = get(p.row, rowDataKeys.childrenKey);\n      if (childrenNodes && childrenNodes instanceof Array) {\n        const IconNode = store.treeDataMap.get(get(p.row, rowDataKeys.rowKey))?.expanded\n          ? MinusRectangleIcon\n          : AddRectangleIcon;\n        return (\n          <div className={classNames([tableTreeClasses.col, classes])} style={colStyle}>\n            {!!childrenNodes.length && (\n              <IconNode\n                className={tableTreeClasses.icon}\n                onClick={() => toggleExpandData({ ...p, trigger: 'inner' })}\n              />\n            )}\n            {cellInfo}\n          </div>\n        );\n      }\n      return (\n        <div style={colStyle} className={classNames(classes)}>\n          {cellInfo}\n        </div>\n      );\n    };\n    // 树形节点会显示操作符号 [+] 和 [-]，但省略显示的浮层中不需要操作符\n    if (newCol.ellipsis === true) {\n      newCol.ellipsis = (p) => renderCell({ ...p, col: { ...treeNodeCol } });\n    }\n    return newCol;\n  }\n\n  /**\n   * 组件实例方法，设置行数据，自动刷新界面\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   */\n  function setData<T>(key: TableRowValue, newRowData: T) {\n    const rowIndex = store.updateData(key, newRowData, dataSource, rowDataKeys);\n    const newData = [...dataSource];\n    newData[rowIndex] = newRowData;\n    setDataSource([...newData]);\n  }\n\n  /**\n   * 组件实例方法，获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  function getData(key: TableRowValue): TableRowState {\n    return store.getData(key);\n  }\n\n  /**\n   * 组件实例方法，移除指定节点\n   * @param key 行唯一标识\n   */\n  function remove(key: TableRowValue) {\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    const newData = store.remove(key, dataSource, rowDataKeys);\n    setDataSource([...newData]);\n  }\n\n  /**\n   * 为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  function appendTo<T>(key: TableRowValue, newData: T) {\n    // 引用传值，可自动更新 dataSource。（dataSource 本是内部变量，可以在任何地方进行任何改变）\n    const dataTmp = store.appendTo(key, newData, dataSource, rowDataKeys);\n    setDataSource([...dataTmp]);\n  }\n\n  return {\n    store,\n    rowDataKeys,\n    dataSource,\n    setData,\n    getData,\n    remove,\n    appendTo,\n    formatTreeColumn,\n    toggleExpandData,\n  };\n}\n"],"names":["useTreeData","props","data","columns","tree","rowKey","useState","TableTreeStore","_slicedToArray","store","treeNodeCol","setTreeNodeCol","dataSource","setDataSource","useClassName","tableTreeClasses","rowDataKeys","useMemo","childrenKey","useEffect","Object","keys","length","newVal","cloneDeep","initialTreeStore","treeNodeColTmp","getTreeNodeColumnCol","getTreeNodeStyle","level","indent","paddingLeft","toggleExpandData","p","newData","_toConsumableArray","trigger","rowValue","get","row","onTreeExpandChange","rowIndex","rowState","treeDataMap","columns2","treeNodeColumnIndex","type","colKey","formatTreeColumn","col","newCol","cell","cellInfo","renderCell","currentState","colStyle","classes","inlineCol","ellipsis","childrenNodes","Array","IconNode","expanded","MinusRectangleIcon","AddRectangleIcon","React","createElement","className","classNames","style","icon","onClick","setData","key","newRowData","updateData","getData","remove","appendTo","dataTmp"],"mappings":"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"}