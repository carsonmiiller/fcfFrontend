{"version":3,"file":"useDragSort.js","sources":["../../../src/table/hooks/useDragSort.ts"],"sourcesContent":["// 表格 行拖拽 + 列拖拽功能\nimport { MutableRefObject, useEffect, useRef } from 'react';\nimport Sortable, { SortableEvent, SortableOptions } from 'sortablejs';\nimport get from 'lodash/get';\nimport { TableRowData, TdPrimaryTableProps, DragSortContext } from '../type';\nimport useClassName from './useClassName';\nimport log from '../../_common/js/log';\nimport swapDragArrayElement from '../../_common/js/utils/swapDragArrayElement';\n\n/**\n * TODO:\n * 1. 同时支持行拖拽和列拖拽，此时 dragSort 扩展为支持数组即可\n * 2. 支持多级表头场景下的列拖拽排序，此时需要将叶子结点 tColumns 作为参数传入。tColumns 已在 useMultiHeader 中计算出来\n * 3. 优化列拖拽排序样式（优先级不高，可以慢慢来）\n * @param props\n * @param primaryTableRef\n * @returns\n */\nexport default function useDragSort(props: TdPrimaryTableProps, primaryTableRef: MutableRefObject<any>) {\n  const { sortOnRowDraggable, dragSort, columns, data, onDragSort } = props;\n  const { tableDraggableClasses, tableBaseClass } = useClassName();\n  // 判断是否有拖拽列\n  const dragCol = columns.find((item) => item.colKey === 'drag');\n  // 行拖拽判断条件\n  const isRowDraggable = sortOnRowDraggable || dragSort === 'row';\n  // 行拖拽判断条件-手柄列\n  const isRowHandlerDraggable = dragSort === 'row-handler' && !!dragCol;\n  // 列拖拽判断条件\n  const isColDraggable = dragSort === 'col';\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const lastRowList = useRef([]);\n  // React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const tData = useRef<TableRowData[]>();\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const lastColList = useRef([]);\n  // 为实现受控，存储上一次的变化结果。React 在回调函数中无法获取最新的 state/props 值，因此使用 useRef\n  const dragColumns = useRef([]);\n\n  if (props.sortOnRowDraggable) {\n    log.warn('Table', \"`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.\");\n  }\n\n  useEffect(() => {\n    // 更新排列顺序\n    lastRowList.current = data.map((item) => String(get(item, props.rowKey)));\n    tData.current = data;\n  }, [data, props.rowKey]);\n\n  useEffect(() => {\n    lastColList.current = columns.map((t) => t.colKey);\n    dragColumns.current = columns;\n  }, [columns]);\n\n  const registerRowDragEvent = (element: HTMLElement) => {\n    if (!isRowHandlerDraggable && !isRowDraggable) return;\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const dragContainer = element?.querySelector('tbody');\n    if (!dragContainer) {\n      console.error('tbody does not exist.');\n      return null;\n    }\n    const baseOptions: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      onEnd: (evt: SortableEvent) => {\n        // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n        dragInstanceTmp?.sort([...lastRowList.current]);\n        const { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n        const params: DragSortContext<TableRowData> = {\n          currentIndex,\n          current: data[currentIndex],\n          targetIndex,\n          target: data[targetIndex],\n          currentData: swapDragArrayElement(tData.current, currentIndex, targetIndex),\n          e: evt,\n          sort: 'row',\n        };\n        onDragSort?.(params);\n      },\n    };\n\n    if (isRowDraggable) {\n      dragInstanceTmp = new Sortable(dragContainer, { ...baseOptions });\n    } else if (isRowHandlerDraggable) {\n      dragInstanceTmp = new Sortable(dragContainer, {\n        ...baseOptions,\n        handle: `.${tableDraggableClasses.handle}`,\n      });\n    }\n    lastRowList.current = dragInstanceTmp?.toArray();\n  };\n\n  // TODO: 优化效果\n  const registerColDragEvent = (tableElement: HTMLElement) => {\n    if (!isColDraggable || !tableElement) return;\n    // 拖拽实例\n    let dragInstanceTmp: Sortable = null;\n    const options: SortableOptions = {\n      animation: 150,\n      ...props.dragSortOptions,\n      dataIdAttr: 'data-colkey',\n      direction: 'vertical',\n      ghostClass: tableDraggableClasses.ghost,\n      chosenClass: tableDraggableClasses.chosen,\n      dragClass: tableDraggableClasses.dragging,\n      handle: `.${tableBaseClass.thCellInner}`,\n      onEnd: (evt: SortableEvent) => {\n        // 处理受控：拖拽列表恢复原始排序，等待外部数据 data 变化，更新最终顺序\n        dragInstanceTmp?.sort([...lastColList.current]);\n        const { oldIndex: currentIndex, newIndex: targetIndex } = evt;\n        const params: DragSortContext<TableRowData> = {\n          currentIndex,\n          current: dragColumns[currentIndex],\n          targetIndex,\n          target: dragColumns[targetIndex],\n          currentData: swapDragArrayElement(dragColumns.current, currentIndex, targetIndex),\n          e: evt,\n          sort: 'col',\n        };\n        onDragSort?.(params);\n      },\n    };\n    const container = tableElement.querySelector('thead > tr') as HTMLDivElement;\n    dragInstanceTmp = new Sortable(container, options);\n    lastColList.current = dragInstanceTmp?.toArray();\n  };\n\n  // 注册拖拽事件\n  useEffect(() => {\n    if (!primaryTableRef || !primaryTableRef.current) return;\n    registerRowDragEvent(primaryTableRef.current?.tableElement);\n    registerColDragEvent(primaryTableRef.current?.tableHtmlElement);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [primaryTableRef]);\n\n  return {\n    isRowDraggable,\n    isRowHandlerDraggable,\n    isColDraggable,\n  };\n}\n"],"names":["useDragSort","props","primaryTableRef","sortOnRowDraggable","dragSort","columns","data","onDragSort","useClassName","tableDraggableClasses","tableBaseClass","dragCol","find","item","colKey","isRowDraggable","isRowHandlerDraggable","isColDraggable","lastRowList","useRef","tData","lastColList","dragColumns","log","warn","useEffect","current","map","String","get","rowKey","t","registerRowDragEvent","element","dragInstanceTmp","dragContainer","querySelector","console","error","baseOptions","animation","dragSortOptions","ghostClass","ghost","chosenClass","chosen","dragClass","dragging","onEnd","evt","sort","currentIndex","oldIndex","targetIndex","newIndex","params","target","currentData","swapDragArrayElement","e","Sortable","handle","toArray","registerColDragEvent","tableElement","options","dataIdAttr","direction","thCellInner","container","tableHtmlElement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,eAA5B,EAA6C;AAC1D,EAAA,IAAQC,kBAAR,GAAoEF,KAApE,CAAQE,kBAAR;AAAA,MAA4BC,QAA5B,GAAoEH,KAApE,CAA4BG,QAA5B;AAAA,MAAsCC,OAAtC,GAAoEJ,KAApE,CAAsCI,OAAtC;AAAA,MAA+CC,IAA/C,GAAoEL,KAApE,CAA+CK,IAA/C;AAAA,MAAqDC,UAArD,GAAoEN,KAApE,CAAqDM,UAArD,CAAA;;AACA,EAAA,IAAA,aAAA,GAAkDC,mCAAY,EAA9D;MAAQC,qBAAR,iBAAQA,qBAAR;MAA+BC,cAA/B,iBAA+BA,cAA/B,CAAA;;AACA,EAAA,IAAMC,OAAO,GAAGN,OAAO,CAACO,IAAR,CAAa,UAACC,IAAD,EAAA;AAAA,IAAA,OAAUA,IAAI,CAACC,MAAL,KAAgB,MAA1B,CAAA;AAAA,GAAb,CAAhB,CAAA;AACA,EAAA,IAAMC,cAAc,GAAGZ,kBAAkB,IAAIC,QAAQ,KAAK,KAA1D,CAAA;EACA,IAAMY,qBAAqB,GAAGZ,QAAQ,KAAK,aAAb,IAA8B,CAAC,CAACO,OAA9D,CAAA;AACA,EAAA,IAAMM,cAAc,GAAGb,QAAQ,KAAK,KAApC,CAAA;AACA,EAAA,IAAMc,WAAW,GAAGC,YAAM,CAAC,EAAD,CAA1B,CAAA;EACA,IAAMC,KAAK,GAAGD,YAAM,EAApB,CAAA;AACA,EAAA,IAAME,WAAW,GAAGF,YAAM,CAAC,EAAD,CAA1B,CAAA;AACA,EAAA,IAAMG,WAAW,GAAGH,YAAM,CAAC,EAAD,CAA1B,CAAA;;EACA,IAAIlB,KAAK,CAACE,kBAAV,EAA8B;AAC5BoB,IAAAA,6BAAG,CAACC,IAAJ,CAAS,OAAT,EAAkB,6EAAlB,CAAA,CAAA;AACD,GAAA;;AACDC,EAAAA,eAAS,CAAC,YAAM;IACdP,WAAW,CAACQ,OAAZ,GAAsBpB,IAAI,CAACqB,GAAL,CAAS,UAACd,IAAD,EAAA;MAAA,OAAUe,MAAM,CAACC,SAAG,CAAChB,IAAD,EAAOZ,KAAK,CAAC6B,MAAb,CAAJ,CAAhB,CAAA;AAAA,KAAT,CAAtB,CAAA;IACAV,KAAK,CAACM,OAAN,GAAgBpB,IAAhB,CAAA;GAFO,EAGN,CAACA,IAAD,EAAOL,KAAK,CAAC6B,MAAb,CAHM,CAAT,CAAA;AAIAL,EAAAA,eAAS,CAAC,YAAM;IACdJ,WAAW,CAACK,OAAZ,GAAsBrB,OAAO,CAACsB,GAAR,CAAY,UAACI,CAAD,EAAA;MAAA,OAAOA,CAAC,CAACjB,MAAT,CAAA;AAAA,KAAZ,CAAtB,CAAA;IACAQ,WAAW,CAACI,OAAZ,GAAsBrB,OAAtB,CAAA;AACD,GAHQ,EAGN,CAACA,OAAD,CAHM,CAAT,CAAA;;AAIA,EAAA,IAAM2B,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,OAAD,EAAa;AAAA,IAAA,IAAA,iBAAA,CAAA;;AACxC,IAAA,IAAI,CAACjB,qBAAD,IAA0B,CAACD,cAA/B,EACE,OAAA;IACF,IAAImB,eAAe,GAAG,IAAtB,CAAA;IACA,IAAMC,aAAa,GAAGF,OAAH,KAAGA,IAAAA,IAAAA,OAAH,KAAGA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEG,aAAT,CAAuB,OAAvB,CAAtB,CAAA;;IACA,IAAI,CAACD,aAAL,EAAoB;MAClBE,OAAO,CAACC,KAAR,CAAc,uBAAd,CAAA,CAAA;AACA,MAAA,OAAO,IAAP,CAAA;AACD,KAAA;;AACD,IAAA,IAAMC,WAAW,GAAA,aAAA,CAAA,aAAA,CAAA;AACfC,MAAAA,SAAS,EAAE,GAAA;KACRvC,EAAAA,KAAK,CAACwC,eAFM,CAAA,EAAA,EAAA,EAAA;MAGfC,UAAU,EAAEjC,qBAAqB,CAACkC,KAHnB;MAIfC,WAAW,EAAEnC,qBAAqB,CAACoC,MAJpB;MAKfC,SAAS,EAAErC,qBAAqB,CAACsC,QALlB;MAMfC,KAAK,EAAE,SAACC,KAAAA,CAAAA,GAAD,EAAS;AAAA,QAAA,IAAA,gBAAA,CAAA;;AACd,QAAA,CAAA,gBAAA,GAAAf,eAAe,MAAf,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,gBAAA,CAAiBgB,IAAjB,CAA0BhC,oCAAAA,CAAAA,WAAW,CAACQ,OAAtC,CAAA,CAAA,CAAA;AACA,QAAA,IAAkByB,YAAlB,GAA0DF,GAA1D,CAAQG,QAAR;AAAA,YAA0CC,WAA1C,GAA0DJ,GAA1D,CAAgCK,QAAhC,CAAA;AACA,QAAA,IAAMC,MAAM,GAAG;AACbJ,UAAAA,YAAY,EAAZA,YADa;AAEbzB,UAAAA,OAAO,EAAEpB,IAAI,CAAC6C,YAAD,CAFA;AAGbE,UAAAA,WAAW,EAAXA,WAHa;AAIbG,UAAAA,MAAM,EAAElD,IAAI,CAAC+C,WAAD,CAJC;UAKbI,WAAW,EAAEC,gDAAoB,CAACtC,KAAK,CAACM,OAAP,EAAgByB,YAAhB,EAA8BE,WAA9B,CALpB;AAMbM,UAAAA,CAAC,EAAEV,GANU;AAObC,UAAAA,IAAI,EAAE,KAAA;SAPR,CAAA;QASA3C,UAAU,KAAA,IAAV,IAAAA,UAAU,KAAA,KAAA,CAAV,YAAAA,UAAU,CAAGgD,MAAH,CAAV,CAAA;AACD,OAAA;KAnBH,CAAA,CAAA;;AAqBA,IAAA,IAAIxC,cAAJ,EAAoB;AAClBmB,MAAAA,eAAe,GAAG,IAAI0B,4BAAJ,CAAazB,aAAb,EAAA,aAAA,CAAA,EAAA,EAAiCI,WAAjC,CAAlB,CAAA,CAAA;KADF,MAEO,IAAIvB,qBAAJ,EAA2B;AAChCkB,MAAAA,eAAe,GAAG,IAAI0B,4BAAJ,CAAazB,aAAb,kCACbI,WADa,CAAA,EAAA,EAAA,EAAA;QAEhBsB,MAAM,EAAA,GAAA,CAAA,MAAA,CAAMpD,qBAAqB,CAACoD,MAA5B,CAAA;OAFR,CAAA,CAAA,CAAA;AAID,KAAA;;AACD3C,IAAAA,WAAW,CAACQ,OAAZ,GAAA,CAAA,iBAAA,GAAsBQ,eAAtB,MAAsB,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAiB4B,OAAjB,EAAtB,CAAA;GAtCF,CAAA;;AAwCA,EAAA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,YAAD,EAAkB;AAAA,IAAA,IAAA,iBAAA,CAAA;;AAC7C,IAAA,IAAI,CAAC/C,cAAD,IAAmB,CAAC+C,YAAxB,EACE,OAAA;IACF,IAAI9B,eAAe,GAAG,IAAtB,CAAA;;AACA,IAAA,IAAM+B,OAAO,GAAA,aAAA,CAAA,aAAA,CAAA;AACXzB,MAAAA,SAAS,EAAE,GAAA;KACRvC,EAAAA,KAAK,CAACwC,eAFE,CAAA,EAAA,EAAA,EAAA;AAGXyB,MAAAA,UAAU,EAAE,aAHD;AAIXC,MAAAA,SAAS,EAAE,UAJA;MAKXzB,UAAU,EAAEjC,qBAAqB,CAACkC,KALvB;MAMXC,WAAW,EAAEnC,qBAAqB,CAACoC,MANxB;MAOXC,SAAS,EAAErC,qBAAqB,CAACsC,QAPtB;AAQXc,MAAAA,MAAM,EAAMnD,GAAAA,CAAAA,MAAAA,CAAAA,cAAc,CAAC0D,WAArB,CARK;MASXpB,KAAK,EAAE,SAACC,KAAAA,CAAAA,GAAD,EAAS;AAAA,QAAA,IAAA,iBAAA,CAAA;;AACd,QAAA,CAAA,iBAAA,GAAAf,eAAe,MAAf,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAiBgB,IAAjB,CAA0B7B,oCAAAA,CAAAA,WAAW,CAACK,OAAtC,CAAA,CAAA,CAAA;AACA,QAAA,IAAkByB,YAAlB,GAA0DF,GAA1D,CAAQG,QAAR;AAAA,YAA0CC,WAA1C,GAA0DJ,GAA1D,CAAgCK,QAAhC,CAAA;AACA,QAAA,IAAMC,MAAM,GAAG;AACbJ,UAAAA,YAAY,EAAZA,YADa;AAEbzB,UAAAA,OAAO,EAAEJ,WAAW,CAAC6B,YAAD,CAFP;AAGbE,UAAAA,WAAW,EAAXA,WAHa;AAIbG,UAAAA,MAAM,EAAElC,WAAW,CAAC+B,WAAD,CAJN;UAKbI,WAAW,EAAEC,gDAAoB,CAACpC,WAAW,CAACI,OAAb,EAAsByB,YAAtB,EAAoCE,WAApC,CALpB;AAMbM,UAAAA,CAAC,EAAEV,GANU;AAObC,UAAAA,IAAI,EAAE,KAAA;SAPR,CAAA;QASA3C,UAAU,KAAA,IAAV,IAAAA,UAAU,KAAA,KAAA,CAAV,YAAAA,UAAU,CAAGgD,MAAH,CAAV,CAAA;AACD,OAAA;KAtBH,CAAA,CAAA;;AAwBA,IAAA,IAAMc,SAAS,GAAGL,YAAY,CAAC5B,aAAb,CAA2B,YAA3B,CAAlB,CAAA;AACAF,IAAAA,eAAe,GAAG,IAAI0B,4BAAJ,CAAaS,SAAb,EAAwBJ,OAAxB,CAAlB,CAAA;AACA5C,IAAAA,WAAW,CAACK,OAAZ,GAAA,CAAA,iBAAA,GAAsBQ,eAAtB,MAAsB,IAAA,IAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAiB4B,OAAjB,EAAtB,CAAA;GA9BF,CAAA;;AAgCArC,EAAAA,eAAS,CAAC,YAAM;AAAA,IAAA,IAAA,qBAAA,EAAA,sBAAA,CAAA;;AACd,IAAA,IAAI,CAACvB,eAAD,IAAoB,CAACA,eAAe,CAACwB,OAAzC,EACE,OAAA;AACFM,IAAAA,oBAAoB,0BAAC9B,eAAe,CAACwB,OAAjB,MAAC,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAyBsC,YAA1B,CAApB,CAAA;AACAD,IAAAA,oBAAoB,2BAAC7D,eAAe,CAACwB,OAAjB,MAAC,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAAyB4C,gBAA1B,CAApB,CAAA;AACD,GALQ,EAKN,CAACpE,eAAD,CALM,CAAT,CAAA;EAMA,OAAO;AACLa,IAAAA,cAAc,EAAdA,cADK;AAELC,IAAAA,qBAAqB,EAArBA,qBAFK;AAGLC,IAAAA,cAAc,EAAdA,cAAAA;GAHF,CAAA;AAKD;;;;"}