/// <reference types="react" />
import { RowAndColFixedPosition } from './hooks/useFixed';
import { BaseTableCellParams, TableRowData, RowspanColspan, TdBaseTableProps, TableScroll } from './type';
export interface RenderTdExtra {
    rowAndColFixedPosition: RowAndColFixedPosition;
    columnLength: number;
    dataLength: number;
    cellSpans: RowspanColspan;
}
export interface RenderEllipsisCellParams {
    cellNode: any;
}
export declare type TrCommonProps = Pick<TdBaseTableProps, TrPropsKeys>;
export declare const TABLE_PROPS: readonly ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
export declare type TrPropsKeys = typeof TABLE_PROPS[number];
export interface TrProps extends TrCommonProps {
    rowKey: string;
    row?: TableRowData;
    rowIndex?: number;
    dataLength?: number;
    rowAndColFixedPosition?: RowAndColFixedPosition;
    skipSpansMap?: Map<any, boolean>;
    scrollType?: string;
    isVirtual?: boolean;
    rowHeight?: number;
    trs?: Map<number, object>;
    bufferSize?: number;
    scroll?: TableScroll;
    tableElm?: HTMLDivElement;
    tableContentElm?: HTMLDivElement;
    onRowMounted?: () => void;
    onTrRowspanOrColspan?: (params: BaseTableCellParams<TableRowData>, cellSpans: RowspanColspan) => void;
}
export declare const ROW_LISTENERS: string[];
export declare function renderCell(params: BaseTableCellParams<TableRowData>): any;
declare function TR(props: TrProps): JSX.Element;
declare namespace TR {
    var displayName: string;
}
export default TR;
