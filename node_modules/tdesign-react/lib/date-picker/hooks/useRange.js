/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-a1655de1.js');
var slicedToArray = require('../../_chunks/dep-3cf9becb.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var dayjs = require('dayjs');
var classNames = require('classnames');
var _util_useConfig = require('../../_util/useConfig.js');
var hooks_useControlled = require('../../hooks/useControlled.js');
var datePicker_hooks_useFormat = require('./useFormat.js');
require('../../_chunks/dep-19841e1d.js');
require('../../_chunks/dep-38a46f48.js');
require('../../_chunks/dep-8a149e9f.js');
require('../../_chunks/dep-3b69722d.js');
require('../../_chunks/dep-fde4d28a.js');
require('../../_chunks/dep-e266830c.js');
require('../../_chunks/dep-fcf32c81.js');
require('../../_chunks/dep-3405bda4.js');
require('../../_chunks/dep-15a4424e.js');
require('../../_chunks/dep-c40d75ac.js');
require('../../_chunks/dep-910dcfa3.js');
require('../../_chunks/dep-633a5671.js');
require('../../_chunks/dep-9c339ffc.js');
require('../../_chunks/dep-b1a67107.js');
require('../../_chunks/dep-ab43c961.js');
require('../../_chunks/dep-9cacaf01.js');
require('../../_chunks/dep-c72c7229.js');
require('../../_chunks/dep-8e0a771d.js');
require('../../_chunks/dep-c90cc28f.js');
require('../../_chunks/dep-542cc308.js');
require('../../_chunks/dep-c6637e11.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../config-provider/zh_CN_config.js');
require('../../_chunks/dep-f3090217.js');
require('../../_chunks/dep-d4a0b3f0.js');
require('../../_chunks/dep-6dfb2577.js');
require('../../_chunks/dep-86abec96.js');
require('../../_chunks/dep-cb0f33ac.js');
require('../../_util/noop.js');
require('../../_common/js/date-picker/utils-new.js');
require('../../_chunks/dep-e9185c09.js');
require('../../_chunks/dep-d97f1281.js');
require('../../_chunks/dep-e19f22f6.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PARTIAL_MAP = {
  first: "start",
  second: "end"
};

function initYearMonthTime(value) {
  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "date";
  var format = arguments.length > 2 ? arguments[2] : undefined;
  var timeFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "HH:mm:ss";
  var defaultYearMonthTime = {
    year: [dayjs__default["default"]().year(), dayjs__default["default"]().year()],
    month: [dayjs__default["default"]().month(), dayjs__default["default"]().month()],
    time: [dayjs__default["default"]().format(timeFormat), dayjs__default["default"]().format(timeFormat)]
  };

  if (mode === "year") {
    defaultYearMonthTime.year[1] += 10;
  } else if (mode === "month") {
    defaultYearMonthTime.year[1] += 1;
  } else if (mode === "date") {
    defaultYearMonthTime.month[1] += 1;
  }

  if (!value || !Array.isArray(value) || !value.length) {
    return defaultYearMonthTime;
  }

  return {
    year: value.map(function (v) {
      return dayjs__default["default"](v, format).year();
    }),
    month: value.map(function (v) {
      return dayjs__default["default"](v, format).month();
    }),
    time: value.map(function (v) {
      return dayjs__default["default"](v, format).format(timeFormat);
    })
  };
}

function useRange(props) {
  var _popupPropsFromProps$;

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix,
      globalDatePickerConfig = _useConfig.datePicker;

  var name = "".concat(classPrefix, "-date-range-picker");
  var isMountedRef = React.useRef(false);
  var inputRef = React.useRef();
  var mode = props.mode,
      prefixIcon = props.prefixIcon,
      suffixIcon = props.suffixIcon,
      rangeInputPropsFromProps = props.rangeInputProps,
      popupPropsFromProps = props.popupProps,
      allowInput = props.allowInput,
      clearable = props.clearable,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? globalDatePickerConfig.placeholder[mode] : _props$placeholder,
      _onBlur = props.onBlur,
      _onFocus = props.onFocus,
      onInput = props.onInput;

  var _useControlled = hooks_useControlled["default"](props, "value", props.onChange),
      _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useFormat = datePicker_hooks_useFormat["default"]({
    mode: mode,
    value: value,
    format: props.format,
    valueType: props.valueType,
    enableTimePicker: props.enableTimePicker
  }),
      format = _useFormat.format,
      isValidDate = _useFormat.isValidDate,
      timeFormat = _useFormat.timeFormat,
      formatDate = _useFormat.formatDate,
      formatTime = _useFormat.formatTime;

  if (!Array.isArray(value)) {
    console.error("typeof value: ".concat(value, " must be Array!"));
  } else if (!isValidDate(value, "valueType")) {
    console.error("value: ".concat(value, " is invalid datetime!"));
  }

  var _useState = React.useState(false),
      _useState2 = slicedToArray._slicedToArray(_useState, 2),
      popupVisible = _useState2[0],
      setPopupVisible = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = slicedToArray._slicedToArray(_useState3, 2),
      isHoverCell = _useState4[0],
      setIsHoverCell = _useState4[1];

  var _useState5 = React.useState(0),
      _useState6 = slicedToArray._slicedToArray(_useState5, 2),
      activeIndex = _useState6[0],
      setActiveIndex = _useState6[1];

  var _useState7 = React.useState(false),
      _useState8 = slicedToArray._slicedToArray(_useState7, 2),
      isFirstValueSelected = _useState8[0],
      setIsFirstValueSelected = _useState8[1];

  var _useState9 = React.useState(initYearMonthTime(value, mode, format, timeFormat).time),
      _useState10 = slicedToArray._slicedToArray(_useState9, 2),
      timeValue = _useState10[0],
      setTimeValue = _useState10[1];

  var _useState11 = React.useState(initYearMonthTime(value, mode, format).month),
      _useState12 = slicedToArray._slicedToArray(_useState11, 2),
      month = _useState12[0],
      setMonth = _useState12[1];

  var _useState13 = React.useState(initYearMonthTime(value, mode, format).year),
      _useState14 = slicedToArray._slicedToArray(_useState13, 2),
      year = _useState14[0],
      setYear = _useState14[1];

  var _useState15 = React.useState(formatDate(value)),
      _useState16 = slicedToArray._slicedToArray(_useState15, 2),
      inputValue = _useState16[0],
      setInputValue = _useState16[1];

  var _useState17 = React.useState(formatDate(value)),
      _useState18 = slicedToArray._slicedToArray(_useState17, 2),
      cacheValue = _useState18[0],
      setCacheValue = _useState18[1];

  var rangeInputProps = _objectSpread(_objectSpread({}, rangeInputPropsFromProps), {}, {
    ref: inputRef,
    clearable: clearable,
    prefixIcon: prefixIcon,
    readonly: !allowInput,
    placeholder: placeholder,
    activeIndex: popupVisible ? activeIndex : void 0,
    suffixIcon: suffixIcon || /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.CalendarIcon, null),
    className: classNames__default["default"](defineProperty._defineProperty({}, "".concat(name, "__input--placeholder"), isHoverCell)),
    onClick: function onClick(_ref) {
      var position = _ref.position;
      setActiveIndex(position === "first" ? 0 : 1);
    },
    onClear: function onClear(_ref2) {
      var e = _ref2.e;
      e.stopPropagation();
      setPopupVisible(false);
      onChange([], {
        dayjsValue: [],
        trigger: "clear"
      });
    },
    onBlur: function onBlur(newVal, _ref3) {
      var e = _ref3.e,
          position = _ref3.position;
      _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur({
        value: newVal,
        partial: PARTIAL_MAP[position],
        e: e
      });
    },
    onFocus: function onFocus(newVal, _ref4) {
      var e = _ref4.e,
          position = _ref4.position;
      _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus({
        value: newVal,
        partial: PARTIAL_MAP[position],
        e: e
      });
      setActiveIndex(position === "first" ? 0 : 1);
    },
    onChange: function onChange(newVal, _ref5) {
      var e = _ref5.e,
          position = _ref5.position;
      var index = position === "first" ? 0 : 1;
      onInput === null || onInput === void 0 ? void 0 : onInput({
        input: newVal[index],
        value: value,
        partial: PARTIAL_MAP[position],
        e: e
      });
      setInputValue(newVal);
      if (!isValidDate(newVal)) return;
      var newYear = [];
      var newMonth = [];
      var newTime = [];
      newVal.forEach(function (v, i) {
        newYear.push(dayjs__default["default"](v).year() || year[i]);
        newMonth.push(dayjs__default["default"](v).month() || month[i]);
        newTime.push(dayjs__default["default"](v).format(timeFormat) || timeValue[i]);
      });
      setYear(newYear);
      setMonth(newMonth);
      setTimeValue(newTime);
    },
    onEnter: function onEnter(newVal) {
      if (!isValidDate(newVal) && !isValidDate(value)) return;
      setPopupVisible(false);

      if (isValidDate(newVal)) {
        onChange(formatDate(newVal, "valueType"), {
          dayjsValue: newVal.map(function (v) {
            return dayjs__default["default"](v);
          }),
          trigger: "enter"
        });
      } else if (isValidDate(value)) {
        setInputValue(formatDate(value));
      } else {
        setInputValue([]);
      }
    }
  });

  var popupProps = _objectSpread(_objectSpread({
    expandAnimation: true
  }, popupPropsFromProps), {}, {
    overlayStyle: (_popupPropsFromProps$ = popupPropsFromProps === null || popupPropsFromProps === void 0 ? void 0 : popupPropsFromProps.overlayStyle) !== null && _popupPropsFromProps$ !== void 0 ? _popupPropsFromProps$ : {
      width: "auto"
    },
    overlayClassName: classNames__default["default"](popupPropsFromProps === null || popupPropsFromProps === void 0 ? void 0 : popupPropsFromProps.overlayClassName, "".concat(name, "__panel-container")),
    onVisibleChange: function onVisibleChange(visible, context) {
      if (context.trigger === "trigger-element-click") {
        var indexMap = {
          0: "first",
          1: "second"
        };
        inputRef.current.focus({
          position: indexMap[activeIndex]
        });
        return setPopupVisible(true);
      }

      if (visible) {
        setIsFirstValueSelected(false);
      } else {
        setIsHoverCell(false);
        setInputValue(formatDate(value));
      }

      setPopupVisible(visible);
    }
  });

  React.useEffect(function () {
    if (!value) {
      setInputValue([]);
      setCacheValue([]);
      setTimeValue([dayjs__default["default"]().format(timeFormat), dayjs__default["default"]().format(timeFormat)]);
      return;
    }

    if (!isValidDate(value, "valueType")) return;
    setInputValue(formatDate(value));
    setCacheValue(formatDate(value));
    setTimeValue(formatTime(value));
  }, [value]);
  React.useEffect(function () {
    if (!isMountedRef.current) {
      isMountedRef.current = true;
      return;
    }

    var indexMap = {
      0: "first",
      1: "second"
    };
    inputRef.current.focus({
      position: indexMap[activeIndex]
    });
  }, [activeIndex]);
  return {
    year: year,
    month: month,
    value: value,
    timeValue: timeValue,
    inputValue: inputValue,
    popupVisible: popupVisible,
    rangeInputProps: rangeInputProps,
    popupProps: popupProps,
    isHoverCell: isHoverCell,
    onChange: onChange,
    setYear: setYear,
    setMonth: setMonth,
    setTimeValue: setTimeValue,
    setIsHoverCell: setIsHoverCell,
    setInputValue: setInputValue,
    setPopupVisible: setPopupVisible,
    activeIndex: activeIndex,
    setActiveIndex: setActiveIndex,
    isFirstValueSelected: isFirstValueSelected,
    setIsFirstValueSelected: setIsFirstValueSelected,
    cacheValue: cacheValue,
    setCacheValue: setCacheValue
  };
}

exports.PARTIAL_MAP = PARTIAL_MAP;
exports["default"] = useRange;
//# sourceMappingURL=useRange.js.map
