import type { DateValue, TdDatePickerProps, TdDateRangePickerProps } from '../type';
export interface formatProps {
    mode: TdDatePickerProps['mode'];
    format: TdDatePickerProps['format'];
    valueType: TdDatePickerProps['valueType'];
    enableTimePicker: TdDatePickerProps['enableTimePicker'];
    value: TdDatePickerProps['value'] | TdDateRangePickerProps['value'];
}
export declare const TIME_FORMAT = "HH:mm:ss";
export default function useFormat(props: formatProps): {
    format: string;
    valueType: string;
    isValidDate: (value: DateValue | DateValue[], type?: string) => boolean;
    timeFormat: string;
    formatTime: (value: DateValue | DateValue[]) => any;
    formatDate: (newDate: DateValue | DateValue[], type?: string) => any;
    getDefaultFormat: typeof getDefaultFormat;
};
export declare function getDefaultFormat({ mode, format, valueType, enableTimePicker, }: {
    mode?: string;
    format?: string;
    valueType?: string;
    enableTimePicker?: boolean;
}): {
    format: string;
    valueType: string;
    timeFormat: string;
};
