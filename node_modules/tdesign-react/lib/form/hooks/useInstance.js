/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../../_chunks/dep-a1655de1.js');
var slicedToArray = require('../../_chunks/dep-3cf9becb.js');
var toConsumableArray = require('../../_chunks/dep-f6a4bdd5.js');
var isEmpty = require('../../_chunks/dep-6f1d8823.js');
var isFunction = require('../../_chunks/dep-e266830c.js');
var configProvider_ConfigContext = require('../../_chunks/dep-38a46f48.js');
var flatten = require('../../_chunks/dep-38856994.js');
var _util_useConfig = require('../../_util/useConfig.js');
require('../../_chunks/dep-19841e1d.js');
require('../../_chunks/dep-029baf10.js');
require('../../_chunks/dep-c72c7229.js');
require('../../_chunks/dep-fcf32c81.js');
require('../../_chunks/dep-3405bda4.js');
require('../../_chunks/dep-9c339ffc.js');
require('../../_chunks/dep-b1a67107.js');
require('../../_chunks/dep-ab43c961.js');
require('../../_chunks/dep-fde4d28a.js');
require('../../_chunks/dep-15a4424e.js');
require('../../_chunks/dep-8e0a771d.js');
require('../../_chunks/dep-c90cc28f.js');
require('../../_chunks/dep-633a5671.js');
require('react');
require('../../_chunks/dep-8a149e9f.js');
require('../../_chunks/dep-3b69722d.js');
require('../../_chunks/dep-c40d75ac.js');
require('../../_chunks/dep-910dcfa3.js');
require('../../_chunks/dep-9cacaf01.js');
require('../../_chunks/dep-542cc308.js');
require('../../_chunks/dep-c6637e11.js');
require('../../_common/js/global-config/locale/zh_CN.js');
require('../../config-provider/zh_CN_config.js');
require('../../_chunks/dep-ec5420f8.js');

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getMapValue(name, formMapRef) {
  var mapKeys = toConsumableArray._toConsumableArray(formMapRef.current.keys());

  var key = mapKeys.find(function (key2) {
    return String(key2) === String(name);
  });
  return formMapRef.current.get(key);
}

function travalMapFromObject(obj, formMapRef, callback) {
  var _iterator = _createForOfIteratorHelper(formMapRef.current.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = slicedToArray._slicedToArray(_step.value, 2),
          mapName = _step$value[0],
          formItemRef = _step$value[1];

      if (Array.isArray(mapName)) {
        var symbol = Symbol("name");
        var fieldValue = null;

        for (var i = 0; i < mapName.length; i++) {
          var item = mapName[i];

          if (Reflect.has(fieldValue || obj, item)) {
            fieldValue = Reflect.get(fieldValue || obj, item);
          } else {
            fieldValue = symbol;
            break;
          }
        }

        if (fieldValue !== symbol) {
          callback(formItemRef, fieldValue);
        }
      } else if (Reflect.has(obj, mapName)) {
        callback(formItemRef, obj[mapName]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function useInstance(props, formRef, formMapRef) {
  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var FORM_ITEM_CLASS_PREFIX = "".concat(classPrefix, "-form-item__");
  var scrollToFirstError = props.scrollToFirstError,
      _props$preventSubmitD = props.preventSubmitDefault,
      preventSubmitDefault = _props$preventSubmitD === void 0 ? true : _props$preventSubmitD,
      onSubmit = props.onSubmit;

  function getFirstError(r) {
    var _r$firstKey$;

    if (r === true) return;

    var _Object$keys = Object.keys(r),
        _Object$keys2 = slicedToArray._slicedToArray(_Object$keys, 1),
        firstKey = _Object$keys2[0];

    if (scrollToFirstError) {
      scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX + firstKey));
    }

    return (_r$firstKey$ = r[firstKey][0]) === null || _r$firstKey$ === void 0 ? void 0 : _r$firstKey$.message;
  }

  function scrollTo(selector) {
    var dom = formRef.current.querySelector(selector);
    var behavior = scrollToFirstError;
    dom && dom.scrollIntoView({
      behavior: behavior
    });
  }

  function submit(e) {
    if (preventSubmitDefault) {
      var _e$preventDefault, _e$stopPropagation;

      e === null || e === void 0 ? void 0 : (_e$preventDefault = e.preventDefault) === null || _e$preventDefault === void 0 ? void 0 : _e$preventDefault.call(e);
      e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
    }

    validate().then(function (r) {
      var firstError = getFirstError(r);
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit({
        validateResult: r,
        firstError: firstError,
        e: e
      });
    });
  }

  function validate(param) {
    function needValidate(name, fields2) {
      if (!fields2 || !Array.isArray(fields2)) return true;
      return fields2.indexOf(name) !== -1;
    }

    var _ref = param || {},
        fields = _ref.fields,
        _ref$trigger = _ref.trigger,
        trigger = _ref$trigger === void 0 ? "all" : _ref$trigger;

    var list = toConsumableArray._toConsumableArray(formMapRef.current.values()).filter(function (formItemRef) {
      var _formItemRef$current, _formItemRef$current2;

      return isFunction.isFunction_1((_formItemRef$current = formItemRef.current) === null || _formItemRef$current === void 0 ? void 0 : _formItemRef$current.validate) && needValidate((_formItemRef$current2 = formItemRef.current) === null || _formItemRef$current2 === void 0 ? void 0 : _formItemRef$current2.name, fields);
    }).map(function (formItemRef) {
      var _formItemRef$current3;

      return (_formItemRef$current3 = formItemRef.current) === null || _formItemRef$current3 === void 0 ? void 0 : _formItemRef$current3.validate(trigger);
    });

    return new Promise(function (resolve) {
      Promise.all(flatten.flatten_1(list)).then(function (arr) {
        var r = arr.reduce(function (r2, err) {
          return Object.assign(r2 || {}, err);
        }, {});
        Object.keys(r).forEach(function (key) {
          if (r[key] === true) {
            delete r[key];
          } else {
            r[key] = r[key].filter(function (fr) {
              return fr.result === false;
            });
          }

          if (r[key] && key.includes(",")) {
            var keyList = key.split(",");
            var fieldValue = keyList.reduceRight(function (prev, curr) {
              return defineProperty._defineProperty({}, curr, prev);
            }, r[key]);
            configProvider_ConfigContext.merge_1(r, fieldValue);
            delete r[key];
          }
        });
        resolve(isEmpty.isEmpty_1(r) ? true : r);
      })["catch"](console.error);
    });
  }

  function getFieldValue(name) {
    var _formItemRef$current4;

    if (!name) return null;
    var formItemRef = getMapValue(name, formMapRef);
    return formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current4 = formItemRef.current) === null || _formItemRef$current4 === void 0 ? void 0 : _formItemRef$current4.value;
  }

  function getFieldsValue(nameList) {
    var fieldsValue = {};

    if (nameList === true) {
      var _iterator2 = _createForOfIteratorHelper(formMapRef.current.entries()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = slicedToArray._slicedToArray(_step2.value, 2),
              name = _step2$value[0],
              formItemRef = _step2$value[1];

          if (Array.isArray(name)) {
            var fieldValue = name.reduceRight(function (prev, curr) {
              return defineProperty._defineProperty({}, curr, prev);
            }, formItemRef.current.value);
            configProvider_ConfigContext.merge_1(fieldsValue, fieldValue);
          } else {
            fieldsValue[name] = formItemRef.current.value;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else {
      if (!Array.isArray(nameList)) throw new Error("getFieldsValue \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
      nameList.forEach(function (name) {
        var formItemRef = getMapValue(name, formMapRef);

        if (Array.isArray(name)) {
          var _fieldValue = name.reduceRight(function (prev, curr) {
            return defineProperty._defineProperty({}, curr, prev);
          }, formItemRef.current.value);

          configProvider_ConfigContext.merge_1(fieldsValue, _fieldValue);
        } else {
          var _formItemRef$current5;

          formItemRef && (fieldsValue[name] = formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current5 = formItemRef.current) === null || _formItemRef$current5 === void 0 ? void 0 : _formItemRef$current5.value);
        }
      });
    }

    return fieldsValue;
  }

  function setFieldsValue() {
    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    travalMapFromObject(fields, formMapRef, function (formItemRef, fieldValue) {
      var _formItemRef$current6, _formItemRef$current7;

      formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current6 = formItemRef.current) === null || _formItemRef$current6 === void 0 ? void 0 : (_formItemRef$current7 = _formItemRef$current6.setValue) === null || _formItemRef$current7 === void 0 ? void 0 : _formItemRef$current7.call(_formItemRef$current6, fieldValue);
    });
  }

  function setFields() {
    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    if (!Array.isArray(fields)) throw new Error("setFields \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
    fields.forEach(function (field) {
      var _formItemRef$current8;

      var name = field.name,
          value = field.value,
          status = field.status;
      var formItemRef = getMapValue(name, formMapRef);
      formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current8 = formItemRef.current) === null || _formItemRef$current8 === void 0 ? void 0 : _formItemRef$current8.setField({
        value: value,
        status: status
      });
    });
  }

  function reset(params) {
    if (typeof params === "undefined") {
      toConsumableArray._toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
        var _formItemRef$current9;

        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current9 = formItemRef.current) === null || _formItemRef$current9 === void 0 ? void 0 : _formItemRef$current9.resetField();
      });
    } else {
      var _params$type = params.type,
          type = _params$type === void 0 ? "initial" : _params$type,
          _params$fields = params.fields,
          fields = _params$fields === void 0 ? [] : _params$fields;
      fields.forEach(function (name) {
        var _formItemRef$current10;

        var formItemRef = getMapValue(name, formMapRef);
        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current10 = formItemRef.current) === null || _formItemRef$current10 === void 0 ? void 0 : _formItemRef$current10.resetField(type);
      });
    }
  }

  function clearValidate(fields) {
    if (typeof fields === "undefined") {
      toConsumableArray._toConsumableArray(formMapRef.current.values()).forEach(function (formItemRef) {
        var _formItemRef$current11;

        formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current11 = formItemRef.current) === null || _formItemRef$current11 === void 0 ? void 0 : _formItemRef$current11.resetValidate();
      });
    } else {
      if (!Array.isArray(fields)) throw new Error("clearValidate \u53C2\u6570\u9700\u8981 Array \u7C7B\u578B");
      fields.forEach(function (name) {
        var _formItemRef$current12;

        var formItemRef = getMapValue(name, formMapRef);
        (_formItemRef$current12 = formItemRef.current) === null || _formItemRef$current12 === void 0 ? void 0 : _formItemRef$current12.resetValidate();
      });
    }
  }

  function setValidateMessage(message) {
    travalMapFromObject(message, formMapRef, function (formItemRef, fieldValue) {
      var _formItemRef$current13, _formItemRef$current14;

      formItemRef === null || formItemRef === void 0 ? void 0 : (_formItemRef$current13 = formItemRef.current) === null || _formItemRef$current13 === void 0 ? void 0 : (_formItemRef$current14 = _formItemRef$current13.setValidateMessage) === null || _formItemRef$current14 === void 0 ? void 0 : _formItemRef$current14.call(_formItemRef$current13, fieldValue);
    });
  }

  return {
    submit: submit,
    reset: reset,
    validate: validate,
    clearValidate: clearValidate,
    setFields: setFields,
    setFieldsValue: setFieldsValue,
    setValidateMessage: setValidateMessage,
    getFieldValue: getFieldValue,
    getFieldsValue: getFieldsValue
  };
}

exports["default"] = useInstance;
//# sourceMappingURL=useInstance.js.map
