{"version":3,"file":"useInstance.js","sources":["../../../src/form/hooks/useInstance.tsx"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport merge from 'lodash/merge';\nimport flatten from 'lodash/flatten';\nimport type { TdFormProps, FormValidateResult, FormResetParams, FormValidateMessage, AllValidateResult } from '../type';\nimport useConfig from '../../_util/useConfig';\n\nfunction getMapValue(\n  name: string | number | Array<string | number>,\n  formMapRef: React.MutableRefObject<Map<any, any>>,\n) {\n  // 提取所有 map key\n  const mapKeys = [...formMapRef.current.keys()];\n  // 转译为字符串后比对 key 兼容数组格式\n  const key = mapKeys.find((key) => String(key) === String(name));\n  // 拿到 key 引用地址获取 value\n  return formMapRef.current.get(key);\n}\n\n// 通过对象数据类型获取 map 引用\nfunction travalMapFromObject(\n  obj: Record<any, any>,\n  formMapRef: React.MutableRefObject<Map<any, any>>,\n  callback: Function,\n) {\n  for (const [mapName, formItemRef] of formMapRef.current.entries()) {\n    // 支持嵌套数据结构\n    if (Array.isArray(mapName)) {\n      // 创建唯一临时变量 symbol\n      const symbol = Symbol('name');\n      let fieldValue = null;\n\n      for (let i = 0; i < mapName.length; i++) {\n        const item = mapName[i];\n        if (Reflect.has(fieldValue || obj, item)) {\n          fieldValue = Reflect.get(fieldValue || obj, item);\n        } else {\n          // 当反射无法获取到值则重置为 symbol\n          fieldValue = symbol;\n          break;\n        }\n      }\n\n      // 说明设置了值\n      if (fieldValue !== symbol) {\n        callback(formItemRef, fieldValue);\n      }\n    } else if (Reflect.has(obj, mapName)) {\n      callback(formItemRef, obj[mapName]);\n    }\n  }\n}\n\nexport default function useInstance(props: TdFormProps, formRef, formMapRef: React.MutableRefObject<Map<any, any>>) {\n  const { classPrefix } = useConfig();\n  const FORM_ITEM_CLASS_PREFIX = `${classPrefix}-form-item__`;\n\n  const { scrollToFirstError, preventSubmitDefault = true, onSubmit } = props;\n\n  // 获取第一个错误表单\n  function getFirstError(r: FormValidateResult<FormData>) {\n    if (r === true) return;\n    const [firstKey] = Object.keys(r);\n    if (scrollToFirstError) {\n      scrollTo(`.${FORM_ITEM_CLASS_PREFIX + firstKey}`);\n    }\n    return r[firstKey][0]?.message;\n  }\n\n  // 校验不通过时，滚动到第一个错误表单\n  function scrollTo(selector: string) {\n    const dom = formRef.current.querySelector(selector);\n    const behavior = scrollToFirstError as ScrollBehavior;\n    dom && dom.scrollIntoView({ behavior });\n  }\n\n  // 对外方法 手动提交表单\n  function submit(e?: React.FormEvent<HTMLFormElement>) {\n    if (preventSubmitDefault) {\n      e?.preventDefault?.();\n      e?.stopPropagation?.();\n    }\n    validate().then((r) => {\n      const firstError = getFirstError(r);\n      onSubmit?.({ validateResult: r, firstError, e });\n    });\n  }\n\n  // 对外方法，该方法会触发全部表单组件错误信息显示\n  function validate(param?: Record<string, any>): Promise<FormValidateResult<FormData>> {\n    function needValidate(name: string, fields: string[]) {\n      if (!fields || !Array.isArray(fields)) return true;\n      return fields.indexOf(name) !== -1;\n    }\n\n    const { fields, trigger = 'all' } = param || {};\n    const list = [...formMapRef.current.values()]\n      .filter(\n        (formItemRef) => isFunction(formItemRef.current?.validate) && needValidate(formItemRef.current?.name, fields),\n      )\n      .map((formItemRef) => formItemRef.current?.validate(trigger));\n\n    return new Promise((resolve) => {\n      Promise.all(flatten(list))\n        .then((arr: any) => {\n          const r = arr.reduce((r, err) => Object.assign(r || {}, err), {});\n          Object.keys(r).forEach((key) => {\n            if (r[key] === true) {\n              delete r[key];\n            } else {\n              r[key] = r[key].filter((fr: AllValidateResult) => fr.result === false);\n            }\n\n            // 整理嵌套数据\n            if (r[key] && key.includes(',')) {\n              const keyList = key.split(',');\n              const fieldValue = keyList.reduceRight((prev, curr) => ({ [curr]: prev }), r[key]);\n              merge(r, fieldValue);\n              delete r[key];\n            }\n          });\n          resolve(isEmpty(r) ? true : r);\n        })\n        .catch(console.error);\n    });\n  }\n\n  // 对外方法，获取对应 formItem 的值\n  function getFieldValue(name: string | number | Array<string | number>) {\n    if (!name) return null;\n\n    const formItemRef = getMapValue(name, formMapRef);\n    return formItemRef?.current?.value;\n  }\n\n  // 对外方法，获取一组字段名对应的值，当调用 getFieldsValue(true) 时返回所有值\n  function getFieldsValue(nameList: string[] | boolean) {\n    const fieldsValue = {};\n\n    if (nameList === true) {\n      for (const [name, formItemRef] of formMapRef.current.entries()) {\n        // 支持数组嵌套\n        if (Array.isArray(name)) {\n          const fieldValue = name.reduceRight((prev, curr) => ({ [curr]: prev }), formItemRef.current.value);\n          merge(fieldsValue, fieldValue);\n        } else {\n          fieldsValue[name] = formItemRef.current.value;\n        }\n      }\n    } else {\n      if (!Array.isArray(nameList)) throw new Error('getFieldsValue 参数需要 Array 类型');\n\n      nameList.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        // 支持数组嵌套\n        if (Array.isArray(name)) {\n          const fieldValue = name.reduceRight((prev, curr) => ({ [curr]: prev }), formItemRef.current.value);\n          merge(fieldsValue, fieldValue);\n        } else {\n          formItemRef && (fieldsValue[name] = formItemRef?.current?.value);\n        }\n      });\n    }\n    return fieldsValue;\n  }\n\n  // 对外方法，设置对应 formItem 的值\n  function setFieldsValue(fields = {}) {\n    travalMapFromObject(fields, formMapRef, (formItemRef, fieldValue) => {\n      formItemRef?.current?.setValue?.(fieldValue);\n    });\n  }\n\n  // 对外方法，设置对应 formItem 的数据\n  function setFields(fields = []) {\n    if (!Array.isArray(fields)) throw new Error('setFields 参数需要 Array 类型');\n\n    fields.forEach((field) => {\n      const { name, value, status } = field;\n      const formItemRef = getMapValue(name, formMapRef);\n\n      formItemRef?.current?.setField({ value, status });\n    });\n  }\n\n  // 对外方法，重置对应 formItem 的数据\n  function reset(params: FormResetParams) {\n    // reset all\n    if (typeof params === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetField();\n      });\n    } else {\n      const { type = 'initial', fields = [] } = params;\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef?.current?.resetField(type);\n      });\n    }\n  }\n\n  // 对外方法，重置对应 formItem 的状态\n  function clearValidate(fields?: Array<keyof FormData>) {\n    // reset all\n    if (typeof fields === 'undefined') {\n      [...formMapRef.current.values()].forEach((formItemRef) => {\n        formItemRef?.current?.resetValidate();\n      });\n    } else {\n      if (!Array.isArray(fields)) throw new Error('clearValidate 参数需要 Array 类型');\n\n      fields.forEach((name) => {\n        const formItemRef = getMapValue(name, formMapRef);\n        formItemRef.current?.resetValidate();\n      });\n    }\n  }\n\n  // 对外方法，设置 formItem 的错误信息\n  function setValidateMessage(message: FormValidateMessage<FormData>) {\n    travalMapFromObject(message, formMapRef, (formItemRef, fieldValue) => {\n      formItemRef?.current?.setValidateMessage?.(fieldValue);\n    });\n  }\n\n  return {\n    submit,\n    reset,\n    validate,\n    clearValidate,\n    setFields,\n    setFieldsValue,\n    setValidateMessage,\n    getFieldValue,\n    getFieldsValue,\n  };\n}\n"],"names":["getMapValue","name","formMapRef","mapKeys","current","keys","key","find","key2","String","get","travalMapFromObject","obj","callback","entries","_slicedToArray","mapName","formItemRef","Array","isArray","symbol","Symbol","fieldValue","i","length","item","Reflect","has","useInstance","props","formRef","useConfig","classPrefix","FORM_ITEM_CLASS_PREFIX","scrollToFirstError","preventSubmitDefault","onSubmit","getFirstError","r","Object","firstKey","scrollTo","message","selector","dom","querySelector","behavior","scrollIntoView","submit","e","preventDefault","stopPropagation","validate","then","firstError","validateResult","param","needValidate","fields2","indexOf","fields","trigger","list","_toConsumableArray","values","filter","isFunction","map","Promise","resolve","all","flatten","arr","reduce","r2","err","assign","forEach","fr","result","includes","keyList","split","reduceRight","prev","curr","merge","isEmpty","console","error","getFieldValue","value","getFieldsValue","nameList","fieldsValue","Error","setFieldsValue","setValue","setFields","field","status","setField","reset","params","resetField","type","clearValidate","resetValidate","setValidateMessage"],"mappings":"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"}