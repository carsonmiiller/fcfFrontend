/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-a1655de1.js');
var React = require('react');
var classNames = require('classnames');
var tdesignIconsReact = require('tdesign-icons-react');
var _util_useConfig = require('../_util/useConfig.js');
var _util_linearGradient = require('../_util/linearGradient.js');
var progress_defaultProps = require('./defaultProps.js');
require('../_chunks/dep-38a46f48.js');
require('../_chunks/dep-8a149e9f.js');
require('../_chunks/dep-3b69722d.js');
require('../_chunks/dep-fde4d28a.js');
require('../_chunks/dep-e266830c.js');
require('../_chunks/dep-fcf32c81.js');
require('../_chunks/dep-3405bda4.js');
require('../_chunks/dep-15a4424e.js');
require('../_chunks/dep-c40d75ac.js');
require('../_chunks/dep-910dcfa3.js');
require('../_chunks/dep-633a5671.js');
require('../_chunks/dep-9c339ffc.js');
require('../_chunks/dep-b1a67107.js');
require('../_chunks/dep-ab43c961.js');
require('../_chunks/dep-9cacaf01.js');
require('../_chunks/dep-c72c7229.js');
require('../_chunks/dep-8e0a771d.js');
require('../_chunks/dep-c90cc28f.js');
require('../_chunks/dep-542cc308.js');
require('../_chunks/dep-c6637e11.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../config-provider/zh_CN_config.js');
require('../_chunks/dep-23535a52.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var Progress = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var theme = props.theme,
      percentage = props.percentage,
      label = props.label,
      _props$color = props.color,
      color = _props$color === void 0 ? "" : _props$color,
      trackColor = props.trackColor,
      strokeWidth = props.strokeWidth,
      size = props.size,
      className = props.className;
  var status = props.status;

  if (!status && percentage >= 100) {
    status = "success";
  }

  var iconMap = {
    success: tdesignIconsReact.CheckCircleFilledIcon,
    error: tdesignIconsReact.CloseCircleFilledIcon,
    warning: tdesignIconsReact.ErrorCircleFilledIcon
  };

  var _useConfig = _util_useConfig["default"](),
      classPrefix = _useConfig.classPrefix;

  var getInfoContent = function getInfoContent() {
    if (!label) {
      return "";
    }

    var info;

    if (typeof label === "boolean") {
      info = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__info")
      }, "".concat(percentage, "%"));

      if (["success", "error", "warning"].includes(status)) {
        var Icon = iconMap[status];
        info = /* @__PURE__ */React__default["default"].createElement("div", {
          className: "".concat(classPrefix, "-progress__info")
        }, /* @__PURE__ */React__default["default"].createElement(Icon, {
          className: "".concat(classPrefix, "-progress__icon")
        }));
      }
    } else {
      info = /* @__PURE__ */React__default["default"].createElement("div", {
        className: "".concat(classPrefix, "-progress__info")
      }, label);
    }

    return info;
  };

  var statusClassName = "".concat(classPrefix, "-progress--status--").concat(status);
  var progressDom;

  if (theme === "circle") {
    iconMap = {
      success: tdesignIconsReact.CheckCircleIcon,
      error: tdesignIconsReact.CloseCircleIcon,
      warning: tdesignIconsReact.ErrorCircleIcon
    };

    var getDiameter = function getDiameter() {
      var diameter2 = 112;

      if (!size) {
        return diameter2;
      }

      switch (size) {
        default:
          diameter2 = Number(size);
          break;

        case "small":
          diameter2 = 72;
          break;

        case "medium":
          diameter2 = 112;
          break;

        case "large":
          diameter2 = 160;
          break;
      }

      return diameter2;
    };

    var getCircleStokeWidth = function getCircleStokeWidth() {
      if (!strokeWidth) {
        if (size === "small") {
          return 4;
        }
      }

      if (typeof strokeWidth !== "number" || Number.isNaN(strokeWidth)) {
        return 6;
      }

      return strokeWidth;
    };

    var circleStokeWidth = getCircleStokeWidth();
    var diameter = getDiameter();
    var radius = diameter / 2;
    var innerRadius = radius - circleStokeWidth;
    var perimeter = Math.PI * 2 * radius;
    var percent = percentage / 100;
    var strokeDasharray = "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
    var fontSizeRatio = innerRadius * 0.27;
    var circleBoxStyle = {
      width: diameter,
      height: diameter,
      fontSize: 4 + fontSizeRatio
    };
    var circlePathStyle = {
      stroke: color,
      strokeLinecap: circleStokeWidth < 30 ? "round" : "buff"
    };
    var circleCenterInViewBox = radius + circleStokeWidth / 2;
    progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames__default["default"]("".concat(classPrefix, "-progress--circle"), defineProperty._defineProperty({}, "".concat(statusClassName), status)),
      style: circleBoxStyle
    }, getInfoContent(), /* @__PURE__ */React__default["default"].createElement("svg", {
      width: diameter,
      height: diameter,
      viewBox: "0 0 ".concat(diameter + circleStokeWidth, " ").concat(diameter + circleStokeWidth)
    }, /* @__PURE__ */React__default["default"].createElement("circle", {
      cx: circleCenterInViewBox,
      cy: circleCenterInViewBox,
      r: radius,
      strokeWidth: circleStokeWidth,
      stroke: trackColor || "var(--td-bg-color-component)",
      fill: "none"
    }), percentage > 0 && /* @__PURE__ */React__default["default"].createElement("circle", {
      cx: circleCenterInViewBox,
      cy: circleCenterInViewBox,
      r: radius,
      strokeWidth: circleStokeWidth,
      fill: "none",
      transform: "matrix(0,-1,1,0,0,".concat(diameter + circleStokeWidth, ")"),
      strokeDasharray: strokeDasharray,
      className: "".concat(classPrefix, "-progress__circle-inner"),
      style: circlePathStyle
    })));
    return /* @__PURE__ */React__default["default"].createElement("div", {
      className: className
    }, progressDom);
  }

  var getHeight = function getHeight() {
    if (strokeWidth) {
      return typeof strokeWidth === "string" ? strokeWidth : "".concat(strokeWidth, "px");
    }
  };

  var trackStyle = {
    height: getHeight(),
    backgroundColor: trackColor,
    borderRadius: getHeight()
  };
  var barStyle = {
    width: "".concat(percentage, "%"),
    background: _util_linearGradient["default"](color),
    borderRadius: getHeight()
  };

  if (theme === "plump") {
    var _classNames2;

    var PLUMP_SEPARATE = 10;
    progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames__default["default"]("".concat(classPrefix, "-progress__bar"), "".concat(classPrefix, "-progress--plump"), (_classNames2 = {}, defineProperty._defineProperty(_classNames2, "".concat(statusClassName), status), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-progress--over-ten"), percentage > PLUMP_SEPARATE), defineProperty._defineProperty(_classNames2, "".concat(classPrefix, "-progress--under-ten"), percentage <= PLUMP_SEPARATE), _classNames2)),
      style: trackStyle
    }, percentage > PLUMP_SEPARATE ? /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-progress__inner"),
      style: barStyle
    }, label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-progress__info"),
      style: {
        color: "#fff"
      }
    }, "".concat(percentage, "%"))) : /* @__PURE__ */React__default["default"].createElement(React__default["default"].Fragment, null, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-progress__inner"),
      style: barStyle
    }), label && /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-progress__info")
    }, "".concat(percentage, "%"))));
  } else {
    progressDom = /* @__PURE__ */React__default["default"].createElement("div", {
      ref: ref,
      className: classNames__default["default"]("".concat(classPrefix, "-progress--thin"), defineProperty._defineProperty({}, "".concat(statusClassName), status))
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-progress__bar"),
      style: trackStyle
    }, /* @__PURE__ */React__default["default"].createElement("div", {
      className: "".concat(classPrefix, "-progress__inner"),
      style: barStyle
    })), getInfoContent());
  }

  return /* @__PURE__ */React__default["default"].createElement("div", {
    className: className
  }, progressDom);
});
Progress.displayName = "Progress";
Progress.defaultProps = progress_defaultProps.progressDefaultProps;

exports["default"] = Progress;
//# sourceMappingURL=Progress.js.map
