/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var defineProperty = require('../_chunks/dep-a1655de1.js');
var slicedToArray = require('../_chunks/dep-3cf9becb.js');
var React = require('react');
var tdesignIconsReact = require('tdesign-icons-react');
var isFunction = require('../_chunks/dep-e266830c.js');
var classNames = require('classnames');
var _util_useConfig = require('../_util/useConfig.js');
var _util_useDragSorter = require('../_util/useDragSorter.js');
var input_index = require('../input/index.js');
var tagInput_useTagScroll = require('./useTagScroll.js');
var tagInput_useTagList = require('./useTagList.js');
var tagInput_useHover = require('./useHover.js');
var hooks_useControlled = require('../hooks/useControlled.js');
var tagInput_defaultProps = require('./defaultProps.js');
require('../_chunks/dep-19841e1d.js');
require('../_chunks/dep-fcf32c81.js');
require('../_chunks/dep-3405bda4.js');
require('../_chunks/dep-15a4424e.js');
require('../_chunks/dep-38a46f48.js');
require('../_chunks/dep-8a149e9f.js');
require('../_chunks/dep-3b69722d.js');
require('../_chunks/dep-fde4d28a.js');
require('../_chunks/dep-c40d75ac.js');
require('../_chunks/dep-910dcfa3.js');
require('../_chunks/dep-633a5671.js');
require('../_chunks/dep-9c339ffc.js');
require('../_chunks/dep-b1a67107.js');
require('../_chunks/dep-ab43c961.js');
require('../_chunks/dep-9cacaf01.js');
require('../_chunks/dep-c72c7229.js');
require('../_chunks/dep-8e0a771d.js');
require('../_chunks/dep-c90cc28f.js');
require('../_chunks/dep-542cc308.js');
require('../_chunks/dep-c6637e11.js');
require('../_common/js/global-config/locale/zh_CN.js');
require('../config-provider/zh_CN_config.js');
require('../input/Input.js');
require('../_chunks/dep-23535a52.js');
require('../_util/forwardRefWithStatics.js');
require('hoist-non-react-statics');
require('../_util/helper.js');
require('../_chunks/dep-e3db5727.js');
require('../_chunks/dep-86abec96.js');
require('../_chunks/dep-cb0f33ac.js');
require('../_chunks/dep-f3090217.js');
require('../_chunks/dep-d4a0b3f0.js');
require('../_chunks/dep-6dfb2577.js');
require('../input/InputGroup.js');
require('../locale/LocalReceiver.js');
require('../input/defaultProps.js');
require('../_util/noop.js');
require('../_chunks/dep-f6a4bdd5.js');
require('lodash');
require('../tag/index.js');
require('../tag/Tag.js');
require('../tag/CheckTag.js');
require('../tag/defaultProps.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { defineProperty._defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var TagInput = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref;

  var _useConfig = _util_useConfig["default"](),
      prefix = _useConfig.classPrefix;

  var excessTagsDisplayType = props.excessTagsDisplayType,
      autoWidth = props.autoWidth,
      readonly = props.readonly,
      disabled = props.disabled,
      clearable = props.clearable,
      placeholder = props.placeholder,
      valueDisplay = props.valueDisplay,
      _label = props.label,
      inputProps = props.inputProps,
      size = props.size,
      tips = props.tips,
      status = props.status,
      suffixIcon = props.suffixIcon,
      suffix = props.suffix,
      onClick = props.onClick,
      onPaste = props.onPaste,
      _onFocus = props.onFocus,
      _onBlur = props.onBlur;

  var _useControlled = hooks_useControlled["default"](props, "inputValue", props.onInputChange),
      _useControlled2 = slicedToArray._slicedToArray(_useControlled, 2),
      tInputValue = _useControlled2[0],
      setTInputValue = _useControlled2[1];

  var _useHover = tagInput_useHover["default"](props),
      isHover = _useHover.isHover,
      addHover = _useHover.addHover,
      cancelHover = _useHover.cancelHover;

  var _useDragSorter = _util_useDragSorter["default"](_objectSpread(_objectSpread({}, props), {}, {
    sortOnDraggable: props.dragSort,
    onDragOverCheck: {
      x: true,
      targetClassNameRegExp: new RegExp("^".concat(prefix, "-tag"))
    }
  })),
      getDragProps = _useDragSorter.getDragProps;

  var isCompositionRef = React.useRef(false);

  var _useTagScroll = tagInput_useTagScroll["default"](props),
      scrollToRight = _useTagScroll.scrollToRight,
      onWheel = _useTagScroll.onWheel,
      scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
      scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
      tagInputRef = _useTagScroll.tagInputRef;

  var _useTagList = tagInput_useTagList["default"](_objectSpread(_objectSpread({}, props), {}, {
    getDragProps: getDragProps
  })),
      tagValue = _useTagList.tagValue,
      _onClose = _useTagList.onClose,
      onInnerEnter = _useTagList.onInnerEnter,
      onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
      clearAll = _useTagList.clearAll,
      renderLabel = _useTagList.renderLabel;

  var NAME_CLASS = "".concat(prefix, "-tag-input");
  var WITH_SUFFIX_ICON_CLASS = "".concat(prefix, "-tag-input__with-suffix-icon");
  var CLEAR_CLASS = "".concat(prefix, "-tag-input__suffix-clear");
  var BREAK_LINE_CLASS = "".concat(prefix, "-tag-input--break-line");
  var tagInputPlaceholder = !(tagValue !== null && tagValue !== void 0 && tagValue.length) ? placeholder : "";
  var showClearIcon = Boolean(!readonly && !disabled && clearable && isHover && (tagValue === null || tagValue === void 0 ? void 0 : tagValue.length));
  React.useImperativeHandle(ref, function () {
    return _objectSpread({}, tagInputRef.current || {});
  });

  var onInputCompositionstart = function onInputCompositionstart(value, context) {
    var _inputProps$onComposi;

    isCompositionRef.current = true;
    inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi = inputProps.onCompositionstart) === null || _inputProps$onComposi === void 0 ? void 0 : _inputProps$onComposi.call(inputProps, value, context);
  };

  var onInputCompositionend = function onInputCompositionend(value, context) {
    var _inputProps$onComposi2;

    isCompositionRef.current = false;
    inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi2 = inputProps.onCompositionend) === null || _inputProps$onComposi2 === void 0 ? void 0 : _inputProps$onComposi2.call(inputProps, value, context);
  };

  var onInputEnter = function onInputEnter(value, context) {
    setTInputValue("", {
      e: context.e,
      trigger: "enter"
    });
    !isCompositionRef.current && onInnerEnter(value, context);
    scrollToRight();
  };

  var onInnerClick = function onInnerClick(context) {
    tagInputRef.current.inputElement.focus();
    onClick === null || onClick === void 0 ? void 0 : onClick(context);
  };

  var onClearClick = function onClearClick(e) {
    clearAll({
      e: e
    });
    setTInputValue("", {
      e: e,
      trigger: "clear"
    });
  };

  var suffixIconNode = showClearIcon ? /* @__PURE__ */React__default["default"].createElement(tdesignIconsReact.CloseCircleFilledIcon, {
    className: CLEAR_CLASS,
    onClick: onClearClick
  }) : suffixIcon;
  var displayNode = isFunction.isFunction_1(valueDisplay) ? valueDisplay({
    value: tagValue,
    onClose: function onClose(index, item) {
      return _onClose({
        index: index,
        item: item
      });
    }
  }) : valueDisplay;
  var classes = [NAME_CLASS, (_ref = {}, defineProperty._defineProperty(_ref, BREAK_LINE_CLASS, excessTagsDisplayType === "break-line"), defineProperty._defineProperty(_ref, WITH_SUFFIX_ICON_CLASS, !!suffixIconNode), _ref), props.className];
  return /* @__PURE__ */React__default["default"].createElement(input_index.Input, _objectSpread(_objectSpread({
    ref: tagInputRef
  }, inputProps), {}, {
    value: tInputValue,
    onChange: function onChange(val, context) {
      setTInputValue(val, _objectSpread(_objectSpread({}, context), {}, {
        trigger: "input"
      }));
    },
    autoWidth: autoWidth,
    onWheel: onWheel,
    size: size,
    readonly: readonly,
    disabled: disabled,
    label: function label() {
      return renderLabel({
        displayNode: displayNode,
        label: _label
      });
    },
    className: classNames__default["default"](classes),
    style: props.style,
    tips: tips,
    status: status,
    placeholder: tagInputPlaceholder,
    suffix: suffix,
    suffixIcon: suffixIconNode,
    onPaste: onPaste,
    onClick: onInnerClick,
    onEnter: onInputEnter,
    onKeyup: onInputBackspaceKeyUp,
    onMouseenter: function onMouseenter(context) {
      addHover(context);
      scrollToRightOnEnter();
    },
    onMouseleave: function onMouseleave(context) {
      cancelHover(context);
      scrollToLeftOnLeave();
    },
    onFocus: function onFocus(inputValue, context) {
      _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus(tagValue, {
        e: context.e,
        inputValue: inputValue
      });
    },
    onBlur: function onBlur(inputValue, context) {
      _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(tagValue, {
        e: context.e,
        inputValue: inputValue
      });
    },
    onCompositionstart: onInputCompositionstart,
    onCompositionend: onInputCompositionend
  }));
});
TagInput.displayName = "TagInput";
TagInput.defaultProps = tagInput_defaultProps.tagInputDefaultProps;

exports["default"] = TagInput;
//# sourceMappingURL=TagInput.js.map
