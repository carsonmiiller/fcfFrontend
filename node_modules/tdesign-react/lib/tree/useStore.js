/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var cloneDeep = require('../_chunks/dep-1f7e83e9.js');
var _util_useUpdateEffect = require('../_util/useUpdateEffect.js');
var _common_js_tree_treeStore = require('../_common/js/tree/tree-store.js');
var _util_usePersistFn = require('../_util/usePersistFn.js');
require('../_chunks/dep-ce5aa35f.js');
require('../_chunks/dep-8a149e9f.js');
require('../_chunks/dep-3b69722d.js');
require('../_chunks/dep-fde4d28a.js');
require('../_chunks/dep-e266830c.js');
require('../_chunks/dep-fcf32c81.js');
require('../_chunks/dep-3405bda4.js');
require('../_chunks/dep-15a4424e.js');
require('../_chunks/dep-c40d75ac.js');
require('../_chunks/dep-910dcfa3.js');
require('../_chunks/dep-633a5671.js');
require('../_chunks/dep-9c339ffc.js');
require('../_chunks/dep-b1a67107.js');
require('../_chunks/dep-ab43c961.js');
require('../_chunks/dep-9cacaf01.js');
require('../_chunks/dep-c72c7229.js');
require('../_chunks/dep-8e0a771d.js');
require('../_chunks/dep-c90cc28f.js');
require('../_chunks/dep-542cc308.js');
require('../_chunks/dep-dfcfc710.js');
require('../_chunks/dep-ec5420f8.js');
require('../_chunks/dep-029baf10.js');
require('../_util/useLayoutEffect.js');
require('../_util/dom.js');
require('raf');
require('../_chunks/dep-1d819290.js');
require('../_util/easing.js');
require('../_chunks/dep-a1655de1.js');
require('../_chunks/dep-b8367f2e.js');
require('../_chunks/dep-3b8bf060.js');
require('../_chunks/dep-afd8013f.js');
require('../_chunks/dep-bb21921b.js');
require('../_chunks/dep-86abec96.js');
require('../_chunks/dep-cb0f33ac.js');
require('../_chunks/dep-38856994.js');
require('../_chunks/dep-e3db5727.js');
require('../_chunks/dep-f3090217.js');
require('../_chunks/dep-d4a0b3f0.js');
require('../_chunks/dep-6dfb2577.js');
require('../_common/js/tree/tree-node.js');
require('../_chunks/dep-75cfd7f6.js');
require('../_chunks/dep-f6a4bdd5.js');
require('../_chunks/dep-19841e1d.js');
require('../_chunks/dep-3181fd9f.js');
require('../_chunks/dep-8a3a8f07.js');
require('../_common/js/tree/tree-node-model.js');
require('../_chunks/dep-46e6aa42.js');
require('../_chunks/dep-c7b74e6e.js');
require('../_chunks/dep-c3bd0e8c.js');
require('../_common/js/log/log.js');

function useStore(props, refresh) {
  var storeRef = React.useRef();
  var data = props.data,
      keys = props.keys,
      expandAll = props.expandAll,
      expandParent = props.expandParent,
      expanded = props.expanded,
      expandLevel = props.expandLevel,
      expandMutex = props.expandMutex,
      activable = props.activable,
      activeMultiple = props.activeMultiple,
      actived = props.actived,
      disabled = props.disabled,
      checkable = props.checkable,
      value = props.value,
      checkStrictly = props.checkStrictly,
      load = props.load,
      lazy = props.lazy,
      valueMode = props.valueMode,
      filter = props.filter,
      _onLoad = props.onLoad,
      _props$allowFoldNodeO = props.allowFoldNodeOnFilter,
      allowFoldNodeOnFilter = _props$allowFoldNodeO === void 0 ? false : _props$allowFoldNodeO;
  var handleUpdate = _util_usePersistFn.usePersistFn(function () {
    refresh();
  });

  var getExpandedArr = function getExpandedArr(arr, store2) {
    var expandedMap = /* @__PURE__ */new Map();
    arr.forEach(function (val) {
      expandedMap.set(val, true);

      if (expandParent) {
        var node = store2.getNode(val);
        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
      }
    });
    return Array.from(expandedMap.keys());
  };

  var createStore = function createStore() {
    var store2 = new _common_js_tree_treeStore.TreeStore({
      keys: keys,
      activable: activable,
      activeMultiple: activeMultiple,
      checkable: checkable,
      checkStrictly: checkStrictly,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      disabled: disabled,
      load: load,
      lazy: lazy,
      valueMode: valueMode,
      filter: filter,
      onLoad: function onLoad(info) {
        var node = info.node;
        _onLoad === null || _onLoad === void 0 ? void 0 : _onLoad({
          node: node.getModel()
        });
      },
      onUpdate: handleUpdate,
      allowFoldNodeOnFilter: allowFoldNodeOnFilter
    });
    var list = cloneDeep.cloneDeep_1(data);

    if (!Array.isArray(list)) {
      list = [];
    }

    store2.append(list);
    store2.refreshNodes();

    if (Array.isArray(value)) {
      store2.setChecked(value);
    }

    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store2);
      store2.setExpanded(expandedArr);
    }

    if (Array.isArray(actived)) {
      store2.setActived(actived);
    }

    store2.refreshNodes();
    return store2;
  };

  if (!storeRef.current) {
    storeRef.current = createStore();
  }

  var store = storeRef.current;
  _util_useUpdateEffect["default"](function () {
    if (data && Array.isArray(data)) {
      store.removeAll();
      store.append(data);
    }
  }, [data, store]);
  _util_useUpdateEffect["default"](function () {
    store.setConfig({
      keys: keys,
      expandAll: expandAll,
      expandLevel: expandLevel,
      expandMutex: expandMutex,
      expandParent: expandParent,
      activable: activable,
      activeMultiple: activeMultiple,
      disabled: disabled,
      checkable: checkable,
      checkStrictly: checkStrictly,
      load: load,
      lazy: lazy,
      valueMode: valueMode
    });
    store.refreshState();
  }, [activable, activeMultiple, checkStrictly, checkable, disabled, expandAll, expandLevel, expandMutex, expandParent, keys, lazy, load, store, valueMode]);
  _util_useUpdateEffect["default"](function () {
    if (Array.isArray(value)) {
      store.replaceChecked(value);
    }
  }, [store, value]);
  _util_useUpdateEffect["default"](function () {
    if (Array.isArray(expanded)) {
      var expandedArr = getExpandedArr(expanded, store);
      store.replaceExpanded(expandedArr);
    }
  }, [expanded, store]);
  _util_useUpdateEffect["default"](function () {
    if (Array.isArray(actived)) {
      store.replaceActived(actived);
    }
  }, [actived, store]);
  _util_useUpdateEffect["default"](function () {
    store.setConfig({
      filter: filter
    });
    store.updateAll();
  }, [filter, store]);
  return storeRef.current;
}

exports.useStore = useStore;
//# sourceMappingURL=useStore.js.map
