/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { useState, useEffect } from 'react';
import classNames from 'classnames';
import { TimeIcon } from 'tdesign-icons-react';
import noop from '../_util/noop.js';
import useControlled from '../hooks/useControlled.js';
import useConfig from '../_util/useConfig.js';
import { RangeInputPopup } from '../range-input/index.js';
import TimePickerPanel from './panel/TimePickerPanel.js';
import { useTimePickerTextConfig } from './hooks/useTimePickerTextConfig.js';
import { validateInputValue, formatInputValue } from '../_common/js/time-picker/utils.js';
import { TIME_PICKER_EMPTY } from '../_common/js/time-picker/const.js';
import { timeRangePickerDefaultProps } from './defaultProps.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../_chunks/dep-e8f6f682.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-863396c0.js';
import '../_chunks/dep-12718f01.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import '../range-input/RangeInput.js';
import '../_chunks/dep-8ff4a741.js';
import '../input/index.js';
import '../input/Input.js';
import '../_util/forwardRefWithStatics.js';
import 'hoist-non-react-statics';
import '../_util/helper.js';
import '../_chunks/dep-9be29560.js';
import '../input/InputGroup.js';
import '../locale/LocalReceiver.js';
import '../config-provider/index.js';
import '../config-provider/ConfigProvider.js';
import '../input/defaultProps.js';
import '../input/style/index.js';
import '../input/type.js';
import '../range-input/defaultProps.js';
import '../range-input/RangeInputPopup.js';
import '../popup/index.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../_util/useAnimation.js';
import '../_util/composeRefs.js';
import '../common/Portal.js';
import 'react-dom';
import '../_util/dom.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_util/easing.js';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/utils/getTransitionParams.js';
import '../_util/useMutationObserver.js';
import '../_chunks/dep-0a541e21.js';
import '../_chunks/dep-5ed520e8.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/style/index.js';
import '../popup/type.js';
import '../select-input/useOverlayStyle.js';
import '../range-input/style/index.js';
import '../range-input/type.js';
import 'dayjs';
import '../_chunks/dep-0b46b8b5.js';
import '../_chunks/dep-c739cdde.js';
import '../_chunks/dep-87214e71.js';
import '../button/index.js';
import '../button/Button.js';
import '../_util/useRipple.js';
import '../_util/setStyle.js';
import '../loading/index.js';
import '../loading/Loading.js';
import '../loading/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../loading/defaultProps.js';
import '../loading/plugin.js';
import '../loading/style/index.js';
import '../loading/type.js';
import '../button/defaultProps.js';
import '../button/style/index.js';
import '../button/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var defaultArrVal = [void 0, void 0];

var TimeRangePicker = function TimeRangePicker(props) {
  var TEXT_CONFIG = useTimePickerTextConfig();
  var allowInput = props.allowInput,
      clearable = props.clearable,
      disabled = props.disabled,
      format = props.format,
      hideDisabledTime = props.hideDisabledTime,
      _props$placeholder = props.placeholder,
      placeholder = _props$placeholder === void 0 ? TEXT_CONFIG.rangePlaceholder : _props$placeholder,
      size = props.size,
      steps = props.steps,
      disableTime = props.disableTime,
      _props$onBlur = props.onBlur,
      onBlur = _props$onBlur === void 0 ? noop : _props$onBlur,
      _props$onFocus = props.onFocus,
      onFocus = _props$onFocus === void 0 ? noop : _props$onFocus,
      _props$onInput = props.onInput,
      onInput = _props$onInput === void 0 ? noop : _props$onInput,
      style = props.style,
      className = props.className;

  var _useControlled = useControlled(props, "value", props.onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      value = _useControlled2[0],
      onChange = _useControlled2[1];

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isPanelShowed = _useState2[0],
      setPanelShow = _useState2[1];

  var _useState3 = useState(void 0),
      _useState4 = _slicedToArray(_useState3, 2),
      currentPanelIdx = _useState4[0],
      setCurrentPanelIdx = _useState4[1];

  var _useState5 = useState(["", ""]),
      _useState6 = _slicedToArray(_useState5, 2),
      currentValue = _useState6[0],
      setCurrentValue = _useState6[1];

  var name = "".concat(classPrefix, "-time-picker");
  var inputClasses = classNames("".concat(name, "__group"), _defineProperty({}, "".concat(classPrefix, "-is-focused"), isPanelShowed));

  var handleShowPopup = function handleShowPopup(visible) {
    setPanelShow(visible);
  };

  var handleClear = function handleClear(context) {
    var e = context.e;
    e.stopPropagation();
    onChange(void 0);
  };

  var handleClick = function handleClick(_ref) {
    var position = _ref.position;
    setCurrentPanelIdx(position === "first" ? 0 : 1);
  };

  var handleTimeChange = function handleTimeChange(newValue) {
    if (currentPanelIdx === 0) {
      var _currentValue$;

      setCurrentValue([newValue, (_currentValue$ = currentValue[1]) !== null && _currentValue$ !== void 0 ? _currentValue$ : newValue]);
    } else {
      var _currentValue$2;

      setCurrentValue([(_currentValue$2 = currentValue[0]) !== null && _currentValue$2 !== void 0 ? _currentValue$2 : newValue, newValue]);
    }
  };

  var handleInputBlur = function handleInputBlur(value2, _ref2) {
    var e = _ref2.e;

    if (allowInput) {
      var isValidTime = validateInputValue(currentValue[currentPanelIdx], format);

      if (isValidTime) {
        var _currentValue$3, _currentValue$4;

        var formattedVal = formatInputValue(currentValue[currentPanelIdx], format);
        currentPanelIdx === 0 ? setCurrentValue([formattedVal, (_currentValue$3 = currentValue[1]) !== null && _currentValue$3 !== void 0 ? _currentValue$3 : formattedVal]) : setCurrentValue([(_currentValue$4 = currentValue[0]) !== null && _currentValue$4 !== void 0 ? _currentValue$4 : formattedVal, formattedVal]);
      }
    }

    onBlur({
      value: value2,
      e: e
    });
  };

  var handleInputChange = function handleInputChange(inputVal, _ref3) {
    var e = _ref3.e,
        position = _ref3.position;
    setCurrentValue(inputVal);
    onInput({
      value: value,
      e: e,
      position: position
    });
  };

  var handleClickConfirm = function handleClickConfirm() {
    var isValidTime = !currentValue.find(function (v) {
      return !validateInputValue(v, format);
    });
    if (isValidTime) onChange(currentValue);
    setPanelShow(false);
  };

  var handleFocus = function handleFocus(value2, _ref4) {
    var e = _ref4.e,
        position = _ref4.position;
    onFocus({
      value: value2,
      e: e,
      position: position
    });
  };

  useEffect(function () {
    setCurrentValue(isPanelShowed ? value !== null && value !== void 0 ? value : TIME_PICKER_EMPTY : defaultArrVal);
    if (!isPanelShowed) setCurrentPanelIdx(void 0);
  }, [isPanelShowed]);
  return /* @__PURE__ */React.createElement("div", {
    className: classNames(name, className),
    style: style
  }, /* @__PURE__ */React.createElement(RangeInputPopup, {
    style: style,
    disabled: disabled,
    popupVisible: isPanelShowed,
    onPopupVisibleChange: handleShowPopup,
    popupProps: _objectSpread({
      overlayStyle: {
        width: "auto"
      }
    }, props.popupProps),
    onInputChange: handleInputChange,
    inputValue: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : defaultArrVal,
    rangeInputProps: _objectSpread({
      size: size,
      clearable: clearable,
      className: inputClasses,
      value: isPanelShowed ? currentValue : value !== null && value !== void 0 ? value : void 0,
      placeholder: placeholder,
      suffixIcon: /* @__PURE__ */React.createElement(TimeIcon, null),
      onClear: handleClear,
      onClick: handleClick,
      onFocus: handleFocus,
      onBlur: handleInputBlur,
      readonly: !allowInput,
      activeIndex: currentPanelIdx
    }, props.rangeInputProps),
    panel: /* @__PURE__ */React.createElement(TimePickerPanel, {
      steps: steps,
      format: format,
      disableTime: disableTime,
      hideDisabledTime: hideDisabledTime,
      isFooterDisplay: true,
      value: currentValue[currentPanelIdx || 0],
      onChange: handleTimeChange,
      handleConfirmClick: handleClickConfirm,
      position: currentPanelIdx === 0 ? "start" : "end"
    })
  }));
};

TimeRangePicker.displayName = "TimeRangePicker";
TimeRangePicker.defaultProps = timeRangePickerDefaultProps;

export { TimeRangePicker as default };
//# sourceMappingURL=TimeRangePicker.js.map
