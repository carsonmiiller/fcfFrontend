/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../../_chunks/dep-744640f5.js';
import { c as chunk_1, _ as _extends } from '../../../_chunks/dep-3d09d1f3.js';
import dayjs from 'dayjs';
import { c as commonjsGlobal } from '../../../_chunks/dep-12690e1d.js';
import '../../../_chunks/dep-0e5be0b2.js';
import '../../../_chunks/dep-42701b6c.js';
import '../../../_chunks/dep-67009882.js';
import '../../../_chunks/dep-4705ff31.js';
import '../../../_chunks/dep-1b27e5c2.js';
import '../../../_chunks/dep-8fb1642c.js';
import '../../../_chunks/dep-531703d1.js';
import '../../../_chunks/dep-21baa91f.js';
import '../../../_chunks/dep-38424935.js';
import '../../../_chunks/dep-ad150068.js';
import '../../../_chunks/dep-d5f141ac.js';
import '../../../_chunks/dep-bcb59ae2.js';
import '../../../_chunks/dep-f5ab8a5c.js';
import '../../../_chunks/dep-87214e71.js';
import '../../../_chunks/dep-5ed520e8.js';
import '../../../_chunks/dep-863396c0.js';
import '../../../_chunks/dep-12718f01.js';

var isBetween = {exports: {}};

(function (module, exports) {
  !function (e, i) {
    "object" == 'object' && "undefined" != 'object' ? module.exports = i() : "function" == typeof undefined && undefined.amd ? undefined(i) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isBetween = i();
  }(commonjsGlobal, function () {
    "use strict";

    return function (e, i, t) {
      i.prototype.isBetween = function (e, i, s, f) {
        var n = t(e),
            o = t(i),
            r = "(" === (f = f || "()")[0],
            u = ")" === f[1];
        return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
      };
    };
  });
})(isBetween, isBetween.exports);

var dayJsIsBetween = isBetween.exports;

dayjs.extend(dayJsIsBetween);
function firstUpperCase(str) {
  if (!str) return str;
  return str[0].toUpperCase().concat(str.substring(1, str.length));
}

function getFirstDayOfMonth(_ref) {
  var year = _ref.year,
      month = _ref.month;
  return new Date(year, month, 1);
}

function getDaysInMonth(_ref2) {
  var year = _ref2.year,
      month = _ref2.month;
  return new Date(year, month + 1, 0).getDate();
}

function getLastDayOfMonth(_ref3) {
  var year = _ref3.year,
      month = _ref3.month;
  return new Date(year, month, getDaysInMonth({
    year: year,
    month: month
  }));
}

function isSameYear(date1, date2) {
  return date1.getFullYear() === date2.getFullYear();
}

function isSameMonth(date1, date2) {
  return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
}

function isSameDate(date1, date2) {
  return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
}

function compareAsc(date1, date2) {
  var d1 = date1.getTime();
  var d2 = date2.getTime();
  if (d1 < d2) return -1;
  if (d1 > d2) return 1;
  return 0;
}

function isSame(date1, date2) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
  var func = {
    isSameYear: isSameYear,
    isSameMonth: isSameMonth,
    isSameDate: isSameDate
  };
  return func["isSame".concat(firstUpperCase(type))](date1, date2);
}
function outOfRanges(d, min, max) {
  return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
}
function getToday() {
  var now = new Date();
  return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
}
function getDateObj(date) {
  var tempDate = date;

  if (!(date instanceof Date)) {
    tempDate = getToday();
  }

  return {
    year: tempDate.getFullYear(),
    month: tempDate.getMonth(),
    date: tempDate.getDate(),
    hours: tempDate.getHours(),
    minutes: tempDate.getMinutes(),
    seconds: tempDate.getSeconds(),
    milliseconds: tempDate.getMilliseconds(),
    meridiem: tempDate.getHours() > 11 ? "PM" : "AM"
  };
}
function setDateTime(date, hours, minutes, seconds, milliseconds) {
  return dayjs(date).hour(hours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
}
function subtractMonth(date, num) {
  return dayjs(date).subtract(num, "month").toDate();
}
function addMonth(date, num) {
  return dayjs(date).add(num, "month").toDate();
}
function getWeeks(_ref4, _ref5) {
  var year = _ref4.year,
      month = _ref4.month;
  var firstDayOfWeek = _ref5.firstDayOfWeek,
      _ref5$disableDate = _ref5.disableDate,
      disableDate = _ref5$disableDate === void 0 ? function () {
    return false;
  } : _ref5$disableDate,
      minDate = _ref5.minDate,
      maxDate = _ref5.maxDate;
  var prependDay = getFirstDayOfMonth({
    year: year,
    month: month
  });
  var appendDay = getLastDayOfMonth({
    year: year,
    month: month
  });
  var maxDays = getDaysInMonth({
    year: year,
    month: month
  });
  var daysArr = [];
  var i = 1;
  var today = getToday();

  for (i; i <= maxDays; i++) {
    var currentDay = new Date(year, month, i);
    daysArr.push({
      text: i,
      active: false,
      value: currentDay,
      disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
      now: isSame(today, currentDay),
      firstDayOfMonth: i === 1,
      lastDayOfMonth: i === maxDays,
      type: "current-month"
    });
  }

  if (prependDay.getDay() !== firstDayOfWeek) {
    prependDay.setDate(0);

    while (true) {
      daysArr.unshift({
        text: prependDay.getDate().toString(),
        active: false,
        value: new Date(prependDay),
        disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
        additional: true,
        type: "prev-month"
      });
      prependDay.setDate(prependDay.getDate() - 1);
      if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
    }
  }

  var LEN = 42;

  while (daysArr.length < LEN) {
    appendDay.setDate(appendDay.getDate() + 1);
    daysArr.push({
      text: appendDay.getDate(),
      active: false,
      value: new Date(appendDay),
      disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
      additional: true,
      type: "next-month"
    });
  }

  return chunk_1(daysArr, 7);
}
function getYears(year, _ref6) {
  var _ref6$disableDate = _ref6.disableDate,
      disableDate = _ref6$disableDate === void 0 ? function () {
    return false;
  } : _ref6$disableDate,
      minDate = _ref6.minDate,
      maxDate = _ref6.maxDate;
  var startYear = parseInt((year / 10).toString(), 10) * 10;
  var endYear = startYear + 9;
  var yearArr = [];
  var today = getToday();

  for (var i = startYear; i <= endYear; i++) {
    var date = new Date(i, 1);
    var disabledMonth = 0;
    var outOfRangeMonth = 0;

    for (var j = 0; j < 12; j++) {
      var d = new Date(i, j);
      if (typeof disableDate === "function" && disableDate(d)) disabledMonth += 1;
      if (outOfRanges(d, minDate, maxDate)) outOfRangeMonth += 1;
    }

    yearArr.push({
      value: date,
      now: isSame(date, today, "year"),
      disabled: disabledMonth === 12 || outOfRangeMonth === 12,
      active: false,
      text: "".concat(date.getFullYear())
    });
  }

  return chunk_1(yearArr, 3);
}
function getMonths(year, params) {
  var _params$disableDate = params.disableDate,
      disableDate = _params$disableDate === void 0 ? function () {
    return false;
  } : _params$disableDate,
      minDate = params.minDate,
      maxDate = params.maxDate,
      monthLocal = params.monthLocal;
  var MonthArr = [];
  var today = getToday();

  for (var i = 0; i <= 11; i++) {
    var date = new Date(year, i);
    var disabledDay = 0;
    var outOfRangeDay = 0;
    var daysInMonth = getDaysInMonth({
      year: year,
      month: i
    });

    for (var j = 1; j <= daysInMonth; j++) {
      var d = new Date(year, i, j);
      if (typeof disableDate === "function" && disableDate(d)) disabledDay += 1;
      if (outOfRanges(d, minDate, maxDate)) outOfRangeDay += 1;
    }

    MonthArr.push({
      value: date,
      now: isSame(date, today, "month"),
      disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
      active: false,
      text: monthLocal[date.getMonth()]
    });
  }

  return chunk_1(MonthArr, 3);
}
function flagActive(data, _ref7) {
  var args = _extends({}, _ref7);

  var start = args.start,
      end = args.end,
      hoverStart = args.hoverStart,
      hoverEnd = args.hoverEnd,
      _args$type = args.type,
      type = _args$type === void 0 ? "date" : _args$type,
      _args$isRange = args.isRange,
      isRange = _args$isRange === void 0 ? false : _args$isRange;

  if (!isRange) {
    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        _item.active = start && isSame(item.value, start, type) && !_item.additional;
        return _item;
      });
    });
  }

  return data.map(function (row) {
    return row.map(function (item) {
      var _item = item;
      var date = item.value;
      var isStart = start && isSame(start, date, type);
      var isHoverStart = hoverStart && isSame(hoverStart, date, type);
      var isEnd = end && isSame(end, date, type);
      var isHoverEnd = hoverEnd && isSame(hoverEnd, date, type);
      _item.active = (isStart || isEnd) && !_item.additional;

      if (start && end) {
        _item.highlight = dayjs(date).isBetween(start, end, type, "[]") && !_item.additional;
        _item.startOfRange = isStart;
        _item.endOfRange = isEnd;
      }

      if (hoverStart && hoverEnd) {
        _item.hoverHighlight = dayjs(date).isBetween(hoverStart, hoverEnd, type, "[]") && !_item.additional;
        _item.hoverStartOfRange = isHoverStart;
        _item.hoverEndOfRange = isHoverEnd;
      }

      return _item;
    });
  });
}
function extractTimeFormat() {
  var dateFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var res = dateFormat.match(/(a\s)?h{1,2}:m{1,2}(:s{1,2})?(\sa)?/i);
  if (!res) return null;
  return res[0];
}
function extractTimeObj() {
  var timeFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var matchedMeridiem = timeFormat.match(/[ap]m/i) || [""];
  var timeReg = /\d{1,2}:\d{1,2}(:\d{1,2})?(:\d{1,3})?/;
  var matchedTimeStr = timeFormat.match(timeReg) || ["0:0:0:0"];

  var _matchedTimeStr$0$spl = matchedTimeStr[0].split(":"),
      _matchedTimeStr$0$spl2 = _slicedToArray(_matchedTimeStr$0$spl, 4),
      _matchedTimeStr$0$spl3 = _matchedTimeStr$0$spl2[0],
      hours = _matchedTimeStr$0$spl3 === void 0 ? 0 : _matchedTimeStr$0$spl3,
      _matchedTimeStr$0$spl4 = _matchedTimeStr$0$spl2[1],
      minutes = _matchedTimeStr$0$spl4 === void 0 ? 0 : _matchedTimeStr$0$spl4,
      _matchedTimeStr$0$spl5 = _matchedTimeStr$0$spl2[2],
      seconds = _matchedTimeStr$0$spl5 === void 0 ? 0 : _matchedTimeStr$0$spl5,
      _matchedTimeStr$0$spl6 = _matchedTimeStr$0$spl2[3],
      milliseconds = _matchedTimeStr$0$spl6 === void 0 ? 0 : _matchedTimeStr$0$spl6;

  return {
    hours: +hours,
    minutes: +minutes,
    seconds: +seconds,
    milliseconds: +milliseconds,
    meridiem: matchedMeridiem[0]
  };
}
function isEnabledDate(_ref8) {
  var value = _ref8.value,
      disableDate = _ref8.disableDate,
      mode = _ref8.mode,
      format = _ref8.format;
  if (!disableDate) return true;
  var isEnabled = true;

  if (typeof disableDate === "function") {
    return !disableDate(value);
  }

  if (Array.isArray(disableDate)) {
    var formattedDisabledDate = disableDate.map(function (item) {
      return dayjs(item, format);
    });
    var isIncludes = formattedDisabledDate.some(function (item) {
      return item.isSame(dayjs(value));
    });
    return !isIncludes;
  }

  var from = disableDate.from,
      to = disableDate.to,
      before = disableDate.before,
      after = disableDate.after;

  if (from && to) {
    var compareMin = dayjs(new Date(from));
    var compareMax = dayjs(new Date(to));
    return !dayjs(value).isBetween(compareMin, compareMax, mode, "[]");
  }

  var min = before ? new Date(before) : null;
  var max = after ? new Date(after) : null;

  if (max && min) {
    var _compareMin = dayjs(new Date(min));

    var _compareMax = dayjs(new Date(max));

    isEnabled = dayjs(value).isBetween(_compareMin, _compareMax, mode, "[]");
  } else if (min) {
    var _compareMin2 = dayjs(new Date(min));

    isEnabled = !dayjs(value).isBefore(_compareMin2, mode);
  } else if (max) {
    var _compareMax2 = dayjs(new Date(max));

    isEnabled = !dayjs(value).isAfter(_compareMax2, mode);
  }

  return isEnabled;
}

export { addMonth, extractTimeFormat, extractTimeObj, firstUpperCase, flagActive, getDateObj, getMonths, getToday, getWeeks, getYears, isEnabledDate, isSame, outOfRanges, setDateTime, subtractMonth };
//# sourceMappingURL=utils-new.js.map
