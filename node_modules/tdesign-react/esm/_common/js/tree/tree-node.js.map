{"version":3,"file":"tree-node.js","sources":["../../../../node_modules/lodash/uniqueId.js","../../../../src/_common/js/tree/tree-node.ts"],"sourcesContent":["var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","import uniqueId from 'lodash/uniqueId';\nimport get from 'lodash/get';\nimport { TreeStore } from './tree-store';\nimport {\n  TreeNodeValue,\n  TreeNodeState,\n  TypeIdMap,\n  TypeTreeItem,\n  TypeSettingOptions,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n} from './types';\nimport {\n  createNodeModel,\n  updateNodeModel,\n} from './tree-node-model';\n\nconst { hasOwnProperty } = Object.prototype;\n\nconst defaultStatus = {\n  expandMutex: false,\n  activable: false,\n  checkable: false,\n  disabled: false,\n  draggable: false,\n  loading: false,\n};\n\n// vm 开头为视图属性，不可以外部设置\n// 用于触发视图更新\nexport class TreeNode {\n  // 节点隶属的树实例\n  public tree: TreeStore;\n\n  // 节点 id ，唯一标志\n  public value: string;\n\n  // 节点文本\n  public label: string;\n\n  // 节点数据\n  public data: TypeTreeNodeData;\n\n  // 父节点\n  public parent: TreeNode;\n\n  // 子节点列表\n  public children: TreeNode[] | boolean;\n\n  // 暴露的 treeNodeModel，这个对象的属性和 api 提供给用户使用\n  public model: TypeTreeNodeModel;\n\n  // 是否为叶节点\n  public vmIsLeaf: boolean;\n\n  // 是否为子节点中的第一个\n  public vmIsFirst: boolean;\n\n  // 是否为子节点中的最后\n  public vmIsLast: boolean;\n\n  // 节点是否是经过过滤剩下的\n  public vmIsRest: boolean;\n\n  // 节点是否展示为锁定状态\n  public vmIsLocked: boolean;\n\n  // 节点在视图上实际的展开状态\n  public expanded: boolean;\n\n  // 展开时是否收起同级节点，对子节点生效\n  public expandMutex: boolean;\n\n  // 节点在视图上实际的激活状态\n  public actived: boolean;\n\n  // 是否可激活\n  public activable: boolean;\n\n  // 是否可选中\n  public checkable: boolean;\n\n  // 是否可选中的视图呈现\n  public vmCheckable: boolean;\n\n  // 节点在视图上实际的选中态\n  public checked: boolean;\n\n  // 节点实际是否为半选状态\n  public indeterminate: boolean;\n\n  // 节点是否已禁用\n  public disabled: boolean;\n\n  // 节点是否可拖动\n  public draggable: boolean;\n\n  // 节点是否可视\n  public visible: boolean;\n\n  // 节点在树中的层级\n  public level: number;\n\n  // 节点是否正在加载数据\n  public loading: boolean;\n\n  public constructor(\n    tree: TreeStore,\n    data?: TypeTreeNodeData,\n    parent?: TreeNode,\n  ) {\n    this.data = data;\n    this.tree = tree;\n\n    const config = tree.config || {};\n    const prefix = config.prefix || 't';\n    const keys = get(tree, 'config.keys') || {};\n    const propChildren = keys.children || 'children';\n    const propLabel = keys.label || 'label';\n    const propValue = keys.value || 'value';\n\n    this.model = null;\n    this.children = null;\n    this.vmCheckable = false;\n    this.vmIsLeaf = false;\n    this.vmIsFirst = false;\n    this.vmIsLast = false;\n    this.vmIsRest = true;\n    this.vmIsLocked = false;\n\n    const spec = {\n      ...defaultStatus,\n      actived: false,\n      expanded: false,\n      checked: false,\n      ...data,\n    };\n    const children = spec[propChildren];\n\n    this.set(spec);\n    this.label = spec[propLabel] || '';\n    this.value = spec[propValue] || uniqueId(prefix);\n    this.tree.nodeMap.set(this.value, this);\n\n    if (parent && parent instanceof TreeNode) {\n      this.parent = parent;\n    } else {\n      this.parent = null;\n    }\n\n    // 子节点为 true 的状态逻辑需要放到状态计算之前\n    // 初始化加载逻辑需要依据这个来进行\n    if (children === true) {\n      this.children = children;\n    }\n\n    // 初始化状态计算\n    this.level = 0;\n    this.visible = true;\n\n    this.actived = spec.actived;\n    this.initActived();\n\n    this.expanded = spec.expanded;\n    this.initExpanded();\n\n    this.checked = spec.checked;\n    this.initChecked();\n\n    this.update();\n    tree.reflow(this);\n\n    // 这里的子节点加载逻辑不能放到状态计算之前\n    // 因为子节点状态计算依赖父节点状态\n    if (Array.isArray(children)) {\n      this.append(children);\n    } else if (children === true && !config.lazy) {\n      this.loadChildren();\n    }\n\n    // checked 状态依赖于子节点状态\n    // 因此初始化状态放到子节点插入之后\n    this.checked = false;\n    this.indeterminate = false;\n    this.updateChecked();\n  }\n\n  /* ------ 状态初始化 ------ */\n\n  // 初始化选中态\n  public initChecked() {\n    const { tree, value, parent } = this;\n    const { checkStrictly } = tree.config;\n    let { checked } = this;\n    checked = parent?.isChecked();\n    if (checked && !checkStrictly) {\n      tree.checkedMap.set(value, true);\n    }\n    this.checked = checked;\n  }\n\n  // 初始化节点展开状态\n  public initExpanded(): void {\n    const { tree } = this;\n    let { expanded } = this;\n    const { config } = tree;\n    if (\n      typeof config.expandLevel === 'number'\n      && this.getLevel() < config.expandLevel\n    ) {\n      tree.expandedMap.set(this.value, true);\n      expanded = true;\n    }\n    if (config.expandAll) {\n      expanded = true;\n    }\n    if (this.children === true && config.lazy) {\n      expanded = false;\n    }\n    if (expanded) {\n      tree.expandedMap.set(this.value, true);\n    } else {\n      tree.expandedMap.delete(this.value);\n    }\n    this.expanded = expanded;\n  }\n\n  // 初始化高亮状态\n  public initActived(): void {\n    const { tree, actived } = this;\n    if (actived) {\n      tree.activedMap.set(this.value, true);\n    }\n  }\n\n  /* ------ 节点操作 ------ */\n\n  // 追加数据\n  public append(data: TypeTreeNodeData | TypeTreeNodeData[]): void {\n    const list = [];\n    if (!Array.isArray(data)) {\n      list.push(data);\n    } else {\n      list.push(...data);\n    }\n    if (list.length <= 0) {\n      return;\n    }\n    if (!Array.isArray(this.children)) {\n      this.children = [];\n    }\n    const { children, tree } = this;\n    list.forEach((item) => {\n      let node = null;\n      if (item instanceof TreeNode) {\n        node = item;\n        node.appendTo(this.tree, this);\n      } else {\n        node = new TreeNode(this.tree, item, this);\n        children.push(node);\n      }\n    });\n    tree.reflow(this);\n    this.updateRelated();\n  }\n\n  // 将当前节点追加到某个父节点的子节点列表中\n  public appendTo(\n    tree: TreeStore,\n    parent?: TreeNode,\n    index?: number,\n  ): void {\n    const parentNode = parent;\n    if (!parentNode) return;\n\n    const targetParents = parentNode.getParents();\n    const includeCurrent = targetParents.some((node) => node.value === this.value);\n    if (includeCurrent) {\n      // 不能将父节点插入到子节点\n      return;\n    }\n\n    if (Array.isArray(parentNode.children)) {\n      let targetIndex = 0;\n      if (typeof index === 'number') {\n        targetIndex = index;\n      }\n      const targetPosNode = parentNode.children[targetIndex];\n      if (targetPosNode.value === this.value) {\n        // 无需将节点插入到原位置\n        return;\n      }\n    }\n\n    this.remove();\n    this.parent = parentNode;\n\n    let siblings = null;\n    if (parentNode instanceof TreeNode) {\n      if (!Array.isArray(parentNode.children)) {\n        parentNode.children = [];\n      }\n      siblings = parent.children;\n    } else {\n      siblings = tree.children;\n    }\n    if (Array.isArray(siblings)) {\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, this);\n      } else {\n        siblings.push(this);\n      }\n    }\n\n    // 插入节点应当继承展开状态\n    // 但建议不要继承选中状态和高亮状态\n    const nodes = this.walk();\n    nodes.forEach((item) => {\n      const node = item;\n      node.tree = tree;\n      tree.nodeMap.set(node.value, node);\n      if (node.expanded) {\n        tree.expandedMap.set(node.value, true);\n      }\n    });\n\n    const updateNodes = parentNode.walk();\n    updateNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n\n    tree.reflow();\n  }\n\n  // 插入一个同级节点数据\n  public insert(\n    item: TypeTreeItem,\n    index?: number,\n  ): void {\n    const { tree, parent } = this;\n    const siblings = this.getSiblings();\n    let node = null;\n    if (item instanceof TreeNode) {\n      node = item;\n      node.appendTo(tree, parent, index);\n    } else if (item) {\n      node = new TreeNode(tree, item, parent);\n      if (typeof index === 'number') {\n        siblings.splice(index, 0, node);\n      }\n      siblings.forEach((sibling) => {\n        sibling.update();\n      });\n    }\n    tree.reflow();\n  }\n\n  // 在当前节点之前插入节点\n  public insertBefore(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index);\n  }\n\n  // 在当前节点之后插入节点\n  public insertAfter(newData: TypeTreeItem): void {\n    const index = this.getIndex();\n    this.insert(newData, index + 1);\n  }\n\n  // 从一个树移除本节点\n  public remove(): void {\n    const { tree } = this;\n\n    const nodes = this.walk();\n    const siblings = this.getSiblings();\n    const index = this.getIndex();\n    // 从父节点的子节点列表中移除自己\n    // 但不要将自己的父节点移除，避免渲染与判断失败\n    if (Array.isArray(siblings)) {\n      siblings.splice(index, 1);\n    }\n    // 清理与树的关系，但不清理自身状态\n    nodes.forEach((node) => {\n      node.clean();\n    });\n    // 同级节点的连线状态会受到影响\n    siblings.forEach((node) => {\n      node.update();\n    });\n    // 父节点选中态会受到影响\n    this.updateParents();\n    tree.reflow();\n  }\n\n  // 清除本节点与一个树的关系\n  public clean(): void {\n    const { tree, value } = this;\n    tree.activedMap.delete(value);\n    tree.checkedMap.delete(value);\n    tree.expandedMap.delete(value);\n    tree.nodeMap.delete(value);\n  }\n\n  // 异步加载子节点数据\n  public async loadChildren(): Promise<void> {\n    const config = get(this, 'tree.config') || {};\n    if (this.children === true && !this.loading) {\n      if (typeof config.load === 'function') {\n        this.loading = true;\n        this.update();\n        let list = [];\n        list = await config.load(this);\n        this.tree.emit('load', {\n          node: this,\n          data: list,\n        });\n        this.loading = false;\n        if (Array.isArray(list) && list.length > 0) {\n          this.append(list);\n        } else {\n          this.children = false;\n        }\n        this.update();\n      }\n    }\n  }\n\n  // 设置状态\n  public set(item: TreeNodeState): void {\n    const { tree } = this;\n    const keys = Object.keys(item);\n    keys.forEach((key) => {\n      if (hasOwnProperty.call(defaultStatus, key) || key === 'label') {\n        this[key] = item[key];\n      }\n    });\n    tree.updated(this);\n  }\n\n  /* ------ 节点获取 ------- */\n\n  // 获取单个父节点\n  public getParent(): TreeNode {\n    return this.parent;\n  }\n\n  // 获取所有父节点\n  public getParents(): TreeNode[] {\n    const parents = [];\n    let node = this.parent;\n    while (node) {\n      parents.push(node);\n      node = node.parent;\n    }\n    return parents;\n  }\n\n  // 获取兄弟节点，包含自己在内\n  public getSiblings(): TreeNode[] {\n    const { parent, tree } = this;\n    let list: TreeNode[] = [];\n    if (parent) {\n      if (Array.isArray(parent.children)) {\n        list = parent.children;\n      }\n    } else if (tree) {\n      list = tree.children;\n    }\n    return list;\n  }\n\n  // 获取根节点\n  public getRoot(): TreeNode {\n    const parents = this.getParents();\n    return parents[parents.length - 1] || null;\n  }\n\n  // 获取节点在父节点的子节点列表中的位置\n  // 如果没有父节点，则获取节点在根节点列表的位置\n  public getIndex(): number {\n    const list = this.getSiblings();\n    return list.indexOf(this);\n  }\n\n  // 返回路径节点\n  public getPath(): TreeNode[] {\n    const nodes = this.getParents();\n    nodes.unshift(this);\n    return nodes.reverse();\n  }\n\n  // 获取节点所在层级\n  public getLevel(): number {\n    const parents = this.getParents();\n    return parents.length;\n  }\n\n  /* ------ 节点状态判断 ------ */\n\n  // 判断节点是否被过滤\n  public isRest(): boolean {\n    const {\n      config,\n      filterMap,\n    } = this.tree;\n\n    let rest = true;\n    if (typeof config.filter === 'function') {\n      const nodeModel = this.getModel();\n      rest = config.filter(nodeModel);\n    }\n\n    if (rest) {\n      filterMap.set(this.value, true);\n    } else if (filterMap.get(this.value)) {\n      filterMap.delete(this.value);\n    }\n\n    return rest;\n  }\n\n  // 判断节点是否可视\n  public isVisible(): boolean {\n    const {\n      nodeMap,\n    } = this.tree;\n\n    let visible = true;\n\n    // 锁定状态，直接呈现\n    if (this.vmIsLocked) {\n      return true;\n    }\n\n    // 在当前树上，未被移除\n    if (nodeMap.get(this.value)) {\n      // 节点未被过滤\n      const filterVisible = this.isRest();\n\n      // 所有父节点展开\n      let expandVisible = true;\n      const parents = this.getParents();\n      if (parents.length > 0) {\n        expandVisible = parents.every((node: TreeNode) => node.isExpanded());\n      }\n\n      // 节点为未被过滤节点的父节点\n      visible = expandVisible && filterVisible;\n    } else {\n      visible = false;\n    }\n    return visible;\n  }\n\n  // 判断节点是否被禁用\n  public isDisabled() {\n    if (this.vmIsLocked) return true;\n    const treeDisabled = get(this, 'tree.config.disabled');\n    return !!(treeDisabled || this.disabled);\n  }\n\n  // 判断节点是否支持互斥展开\n  public isExpandMutex() {\n    return !!(get(this, 'tree.config.expandMutex') || this.expandMutex);\n  }\n\n  // 节点可高亮\n  public isActivable() {\n    return !!(get(this, 'tree.config.activable') || this.activable);\n  }\n\n  // 是否可选\n  public isCheckable() {\n    return !!(get(this, 'tree.config.checkable') || this.checkable);\n  }\n\n  // 检查节点是否被激活\n  public isActived(map?: Map<string, boolean>): boolean {\n    const { tree, value } = this;\n    const activedMap = map || tree.activedMap;\n    return !!(tree.nodeMap.get(value) && activedMap.get(value));\n  }\n\n  // 检查节点是否已展开\n  public isExpanded(map?: Map<string, boolean>): boolean {\n    const { tree, value, vmIsLocked } = this;\n    if (vmIsLocked) return true;\n    const expandedMap = map || tree.expandedMap;\n    return !!(tree.nodeMap.get(value) && expandedMap.get(value));\n  }\n\n  // 计算属性，判断节点是否被选中\n  // map: 预期选中项map，用于计算节点在预期环境中的选中态\n  public isChecked(map?: TypeIdMap): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    let checked = false;\n    const checkedMap = map || tree.checkedMap;\n    if (tree.nodeMap.get(this.value)) {\n      if (checkedMap.get(this.value)) {\n        // 如果在 checked 节点列表中，则直接为 true\n        checked = true;\n      } else if (\n        Array.isArray(children)\n        && children.length > 0\n        && !checkStrictly\n      ) {\n        // 如果是父节点，需检查所有子节点状态\n        checked = children.every((node) => {\n          const childIsChecked = node.isChecked(checkedMap);\n          return childIsChecked;\n        });\n      } else if (!checkStrictly) {\n        // 从父节点状态推断子节点状态\n        // 这里再调用 isChecked 会导致死循环\n        const parents = this.getParents();\n        checked = parents.some((node) => checkedMap.get(node.value));\n      }\n    }\n    return !!checked;\n  }\n\n  // 是否为半选状态\n  public isIndeterminate(): boolean {\n    const { children, tree } = this;\n    const { checkStrictly } = tree.config;\n    if (checkStrictly) {\n      return false;\n    }\n    let indeterminate = false;\n    if (Array.isArray(children)) {\n      // 叶节点不存在半选状态\n      let childChecked: null | boolean = null;\n      indeterminate = children.some((node: TreeNode) => {\n        if (node.isIndeterminate()) {\n          // 子节点有任意一个半选，则其为半选状态\n          return true;\n        }\n        if (childChecked === null) {\n          childChecked = node.isChecked();\n        }\n        if (childChecked !== node.isChecked()) {\n          // 子节点选中状态不一致，则其为半选状态\n          return true;\n        }\n        return false;\n      });\n    }\n    return indeterminate;\n  }\n\n  public isFirst(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[0] === this;\n  }\n\n  public isLast(): boolean {\n    const siblings = this.getSiblings();\n    return siblings[siblings.length - 1] === this;\n  }\n\n  // 是叶节点\n  public isLeaf(): boolean {\n    let isLeaf = false;\n    if (Array.isArray(this.children)) {\n      isLeaf = this.children.length <= 0;\n    } else {\n      isLeaf = !this.children;\n    }\n    return isLeaf;\n  }\n\n  /* ------ 节点状态切换 ------ */\n\n  // 锁定节点\n  // 搜索过滤节点时，路径节点需要固定呈现，视其为锁定态\n  public lock(lockState: boolean): void {\n    this.vmIsLocked = lockState;\n    this.expanded = this.isExpanded();\n    this.visible = this.isVisible();\n  }\n\n  // 节点展开关闭后需要调用的状态检查函数\n  public afterExpanded(): void {\n    this.update();\n    // 节点展开时检查延迟加载的数据\n    if (this.expanded && this.children === true) {\n      this.loadChildren();\n    }\n  }\n\n  // 展开或者关闭节点\n  public toggleExpanded(): TreeNodeValue[] {\n    return this.setExpanded(!this.isExpanded());\n  }\n\n  // 设置节点展开状态\n  public setExpanded(expanded: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n\n    let map = tree.expandedMap;\n    if (!options.directly) {\n      map = new Map(tree.expandedMap);\n    }\n\n    // 手风琴效果，先折叠同级节点\n    if (expanded) {\n      const shouldExpandNodes = [];\n      shouldExpandNodes.push(this);\n      if (get(tree, 'config.expandParent')) {\n        this.getParents().forEach((node) => {\n          shouldExpandNodes.push(node);\n        });\n      }\n      shouldExpandNodes.forEach((node) => {\n        let isExpandMutex = false;\n        if (node.parent) {\n          isExpandMutex = node.parent.isExpandMutex();\n        } else {\n          isExpandMutex = tree?.config?.expandMutex;\n        }\n        if (isExpandMutex) {\n          const siblings = node.getSiblings();\n          siblings.forEach((snode) => {\n            map.delete(snode.value);\n          });\n        }\n        map.set(node.value, true);\n      });\n    } else {\n      map.delete(this.value);\n    }\n\n    if (options.directly) {\n      this.afterExpanded();\n      this.update();\n      this.updateChildren();\n    }\n\n    return tree.getExpanded(map);\n  }\n\n  // 切换节点激活态\n  public toggleActived(): TreeNodeValue[] {\n    return this.setActived(!this.isActived());\n  }\n\n  // 设置节点激活态\n  public setActived(actived: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    const config = tree.config || {};\n    let map = tree.activedMap;\n    if (!options.directly) {\n      map = new Map(tree.activedMap);\n    }\n    if (this.isActivable()) {\n      if (actived) {\n        if (!config.activeMultiple) {\n          map.clear();\n        }\n        map.set(this.value, true);\n      } else {\n        map.delete(this.value);\n      }\n    }\n    if (options.directly) {\n      this.update();\n    }\n    return tree.getActived(map);\n  }\n\n  // 切换选中态\n  public toggleChecked(): TreeNodeValue[] {\n    return this.setChecked(!this.isChecked());\n  }\n\n  // 更新单个节点的选中态\n  // 返回树选中列表\n  public setChecked(checked: boolean, opts?: TypeSettingOptions): TreeNodeValue[] {\n    const { tree } = this;\n    const config = tree.config || {};\n    const options = {\n      directly: false,\n      ...opts,\n    };\n    let map = tree.checkedMap;\n    if (!options.directly) {\n      map = new Map(tree.checkedMap);\n    }\n    if (this.isCheckable() && checked !== this.isChecked()) {\n      if (config.checkStrictly) {\n        if (checked) {\n          map.set(this.value, true);\n        } else {\n          map.delete(this.value);\n        }\n      } else {\n        const children = this.walk();\n        // 子节点的预期选中态与当前节点同步\n        children.forEach((node) => {\n          if (checked) {\n            map.set(node.value, true);\n          } else {\n            map.delete(node.value);\n          }\n        });\n        // 消除全部父节点的预期选中态\n        // 父节点的预期选中态将通过计算得出\n        const parents = this.getParents();\n        parents.forEach((node) => {\n          map.delete(node.value);\n        });\n      }\n    }\n    if (options.directly) {\n      if (config.checkStrictly) {\n        this.updateChecked();\n      } else {\n        const relatedNodes = tree.getRelatedNodes([this.value]);\n        relatedNodes.forEach((node) => {\n          node.updateChecked();\n        });\n      }\n    }\n    return tree.getChecked(map);\n  }\n\n  /* ------ 节点状态更新 ------ */\n\n  // 更新节点状态\n  public update(): void {\n    this.level = this.getLevel();\n    this.actived = this.isActived();\n    this.expanded = this.isExpanded();\n    this.vmCheckable = this.isCheckable();\n    this.visible = this.isVisible();\n    this.vmIsRest = this.isRest();\n    this.vmIsFirst = this.isFirst();\n    this.vmIsLast = this.isLast();\n    this.vmIsLeaf = this.isLeaf();\n    this.tree.updated(this);\n  }\n\n  // 更新选中态属性值\n  public updateChecked(): void {\n    const { tree } = this;\n    this.vmCheckable = this.isCheckable();\n    if (this.vmCheckable && !this.disabled) {\n      this.checked = this.isChecked();\n      if (this.checked) {\n        tree.checkedMap.set(this.value, true);\n      }\n      this.indeterminate = this.isIndeterminate();\n      tree.updated(this);\n    }\n  }\n\n  // 更新所有子节点状态\n  // 注意:不包含自己\n  public updateChildren(): void {\n    const { children } = this;\n    if (Array.isArray(children)) {\n      children.forEach((node) => {\n        node.update();\n        node.updateChecked();\n        node.updateChildren();\n      });\n    }\n  }\n\n  // 父节点状态更新\n  // 注意:不包含自己\n  public updateParents(): void {\n    const { parent } = this;\n    if (parent) {\n      parent.update();\n      parent.updateChecked();\n      parent.updateParents();\n    }\n  }\n\n  // 更新上下游相关节点\n  public updateRelated() {\n    const { tree } = this;\n    const relatedNodes = tree.getRelatedNodes([this.value]);\n    relatedNodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n    tree.reflow();\n  }\n\n  /* ------ 节点遍历 ------ */\n\n  // 获取包含自己在内所有的子节点\n  public walk(): TreeNode[] {\n    const { children } = this;\n    let list: TreeNode[] = [];\n    list.push(this);\n    if (Array.isArray(children) && children.length > 0) {\n      children.forEach((node) => {\n        list = list.concat(node.walk());\n      });\n    }\n    return list;\n  }\n\n  // TreeNode 对象 => TypeTreeNodeModel 对象\n  // 用于 treeNode 对外暴露的 api\n  // 经过封装的对象，减少了对外暴露的 api，利于代码重构\n  public getModel(): TypeTreeNodeModel {\n    let { model } = this;\n    if (!model) {\n      model = createNodeModel(this);\n      this.model = model;\n    }\n    updateNodeModel(model, this);\n    return model;\n  }\n}\n\nexport default TreeNode;\n"],"names":["toString","require$$0","idCounter","uniqueId","prefix","id","uniqueId_1","hasOwnProperty","Object","prototype","defaultStatus","expandMutex","activable","checkable","disabled","draggable","loading","TreeNode","tree","data","parent","config","keys","get","propChildren","children","propLabel","label","propValue","value","model","vmCheckable","vmIsLeaf","vmIsFirst","vmIsLast","vmIsRest","vmIsLocked","spec","actived","expanded","checked","set","nodeMap","level","visible","initActived","initExpanded","initChecked","update","reflow","Array","isArray","append","lazy","loadChildren","indeterminate","updateChecked","checkStrictly","isChecked","checkedMap","expandLevel","getLevel","expandedMap","expandAll","activedMap","list","push","length","forEach","item","node","appendTo","updateRelated","index","parentNode","targetParents","getParents","includeCurrent","some","targetIndex","targetPosNode","remove","siblings","splice","nodes","walk","updateNodes","getSiblings","sibling","newData","getIndex","insert","clean","updateParents","_regeneratorRuntime","load","emit","key","call","updated","parents","indexOf","unshift","reverse","filterMap","rest","filter","nodeModel","getModel","filterVisible","isRest","expandVisible","every","isExpanded","treeDisabled","map","childIsChecked","childChecked","isIndeterminate","isLeaf","lockState","isVisible","setExpanded","opts","options","directly","Map","shouldExpandNodes","isExpandMutex","snode","afterExpanded","updateChildren","getExpanded","setActived","isActived","isActivable","activeMultiple","clear","getActived","setChecked","isCheckable","relatedNodes","getRelatedNodes","getChecked","isFirst","isLast","concat","createNodeModel","updateNodeModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,QAAQ,GAAGC,UAAf,CAAA;AAEA;;AACA,IAAIC,SAAS,GAAG,CAAhB,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;EACxB,IAAIC,EAAE,GAAG,EAAEH,SAAX,CAAA;AACA,EAAA,OAAOF,QAAQ,CAACI,MAAD,CAAR,GAAmBC,EAA1B,CAAA;AACD,CAAA;;AAED,IAAAC,UAAc,GAAGH,QAAjB;;;;;ACrBA,IAAQI,cAAR,GAA2BC,MAAM,CAACC,SAAlC,CAAQF,cAAR,CAAA;AACA,IAAMG,aAAa,GAAG;AACpBC,EAAAA,WAAW,EAAE,KADO;AAEpBC,EAAAA,SAAS,EAAE,KAFS;AAGpBC,EAAAA,SAAS,EAAE,KAHS;AAIpBC,EAAAA,QAAQ,EAAE,KAJU;AAKpBC,EAAAA,SAAS,EAAE,KALS;AAMpBC,EAAAA,OAAO,EAAE,KAAA;AANW,CAAtB,CAAA;AAQA,IAAaC,QAAb,gBAAA,YAAA;AA0BE,EAAA,SAAA,QAAA,CAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;;IAC9B,IAAKD,CAAAA,IAAL,GAAYA,IAAZ,CAAA;IACA,IAAKD,CAAAA,IAAL,GAAYA,IAAZ,CAAA;AACA,IAAA,IAAMG,MAAM,GAAGH,IAAI,CAACG,MAAL,IAAe,EAA9B,CAAA;AACA,IAAA,IAAMjB,MAAM,GAAGiB,MAAM,CAACjB,MAAP,IAAiB,GAAhC,CAAA;IACA,IAAMkB,IAAI,GAAGC,KAAG,CAACL,IAAD,EAAO,aAAP,CAAH,IAA4B,EAAzC,CAAA;AACA,IAAA,IAAMM,YAAY,GAAGF,IAAI,CAACG,QAAL,IAAiB,UAAtC,CAAA;AACA,IAAA,IAAMC,SAAS,GAAGJ,IAAI,CAACK,KAAL,IAAc,OAAhC,CAAA;AACA,IAAA,IAAMC,SAAS,GAAGN,IAAI,CAACO,KAAL,IAAc,OAAhC,CAAA;IACA,IAAKC,CAAAA,KAAL,GAAa,IAAb,CAAA;IACA,IAAKL,CAAAA,QAAL,GAAgB,IAAhB,CAAA;IACA,IAAKM,CAAAA,WAAL,GAAmB,KAAnB,CAAA;IACA,IAAKC,CAAAA,QAAL,GAAgB,KAAhB,CAAA;IACA,IAAKC,CAAAA,SAAL,GAAiB,KAAjB,CAAA;IACA,IAAKC,CAAAA,QAAL,GAAgB,KAAhB,CAAA;IACA,IAAKC,CAAAA,QAAL,GAAgB,IAAhB,CAAA;IACA,IAAKC,CAAAA,UAAL,GAAkB,KAAlB,CAAA;;IACA,IAAMC,IAAI,mCACL3B,aADK,CAAA,EAAA,EAAA,EAAA;AAER4B,MAAAA,OAAO,EAAE,KAFD;AAGRC,MAAAA,QAAQ,EAAE,KAHF;AAIRC,MAAAA,OAAO,EAAE,KAAA;AAJD,KAAA,EAKLrB,IALK,CAAV,CAAA;;AAOA,IAAA,IAAMM,QAAQ,GAAGY,IAAI,CAACb,YAAD,CAArB,CAAA;IACA,IAAKiB,CAAAA,GAAL,CAASJ,IAAT,CAAA,CAAA;AACA,IAAA,IAAA,CAAKV,KAAL,GAAaU,IAAI,CAACX,SAAD,CAAJ,IAAmB,EAAhC,CAAA;IACA,IAAKG,CAAAA,KAAL,GAAaQ,IAAI,CAACT,SAAD,CAAJ,IAAmBzB,UAAQ,CAACC,MAAD,CAAxC,CAAA;IACA,IAAKc,CAAAA,IAAL,CAAUwB,OAAV,CAAkBD,GAAlB,CAAsB,IAAA,CAAKZ,KAA3B,EAAkC,IAAlC,CAAA,CAAA;;AACA,IAAA,IAAIT,MAAM,IAAIA,MAAM,YAAYH,QAAhC,EAA0C;MACxC,IAAKG,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACD,KAFD,MAEO;MACL,IAAKA,CAAAA,MAAL,GAAc,IAAd,CAAA;AACD,KAAA;;IACD,IAAIK,QAAQ,KAAK,IAAjB,EAAuB;MACrB,IAAKA,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;AACD,KAAA;;IACD,IAAKkB,CAAAA,KAAL,GAAa,CAAb,CAAA;IACA,IAAKC,CAAAA,OAAL,GAAe,IAAf,CAAA;AACA,IAAA,IAAA,CAAKN,OAAL,GAAeD,IAAI,CAACC,OAApB,CAAA;AACA,IAAA,IAAA,CAAKO,WAAL,EAAA,CAAA;AACA,IAAA,IAAA,CAAKN,QAAL,GAAgBF,IAAI,CAACE,QAArB,CAAA;AACA,IAAA,IAAA,CAAKO,YAAL,EAAA,CAAA;AACA,IAAA,IAAA,CAAKN,OAAL,GAAeH,IAAI,CAACG,OAApB,CAAA;AACA,IAAA,IAAA,CAAKO,WAAL,EAAA,CAAA;AACA,IAAA,IAAA,CAAKC,MAAL,EAAA,CAAA;IACA9B,IAAI,CAAC+B,MAAL,CAAY,IAAZ,CAAA,CAAA;;AACA,IAAA,IAAIC,KAAK,CAACC,OAAN,CAAc1B,QAAd,CAAJ,EAA6B;MAC3B,IAAK2B,CAAAA,MAAL,CAAY3B,QAAZ,CAAA,CAAA;KADF,MAEO,IAAIA,QAAQ,KAAK,IAAb,IAAqB,CAACJ,MAAM,CAACgC,IAAjC,EAAuC;AAC5C,MAAA,IAAA,CAAKC,YAAL,EAAA,CAAA;AACD,KAAA;;IACD,IAAKd,CAAAA,OAAL,GAAe,KAAf,CAAA;IACA,IAAKe,CAAAA,aAAL,GAAqB,KAArB,CAAA;AACA,IAAA,IAAA,CAAKC,aAAL,EAAA,CAAA;AACD,GAAA;;AAjFH,EAAA,YAAA,CAAA,QAAA,EAAA,CAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAkFE,SAAc,WAAA,GAAA;AACZ,MAAA,IAAQtC,IAAR,GAAgC,IAAhC,CAAQA,IAAR;AAAA,UAAcW,KAAd,GAAgC,IAAhC,CAAcA,KAAd;AAAA,UAAqBT,MAArB,GAAgC,IAAhC,CAAqBA,MAArB,CAAA;AACA,MAAA,IAAQqC,aAAR,GAA0BvC,IAAI,CAACG,MAA/B,CAAQoC,aAAR,CAAA;AACA,MAAA,IAAMjB,OAAN,GAAkB,IAAlB,CAAMA,OAAN,CAAA;MACAA,OAAO,GAAGpB,MAAH,KAAGA,IAAAA,IAAAA,MAAH,uBAAGA,MAAM,CAAEsC,SAAR,EAAV,CAAA;;AACA,MAAA,IAAIlB,OAAO,IAAI,CAACiB,aAAhB,EAA+B;AAC7BvC,QAAAA,IAAI,CAACyC,UAAL,CAAgBlB,GAAhB,CAAoBZ,KAApB,EAA2B,IAA3B,CAAA,CAAA;AACD,OAAA;;MACD,IAAKW,CAAAA,OAAL,GAAeA,OAAf,CAAA;AACD,KAAA;AA3FH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EA4FE,SAAe,YAAA,GAAA;AACb,MAAA,IAAQtB,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;AACA,MAAA,IAAMqB,QAAN,GAAmB,IAAnB,CAAMA,QAAN,CAAA;AACA,MAAA,IAAQlB,MAAR,GAAmBH,IAAnB,CAAQG,MAAR,CAAA;;AACA,MAAA,IAAI,OAAOA,MAAM,CAACuC,WAAd,KAA8B,QAA9B,IAA0C,IAAA,CAAKC,QAAL,EAAA,GAAkBxC,MAAM,CAACuC,WAAvE,EAAoF;QAClF1C,IAAI,CAAC4C,WAAL,CAAiBrB,GAAjB,CAAqB,IAAKZ,CAAAA,KAA1B,EAAiC,IAAjC,CAAA,CAAA;AACAU,QAAAA,QAAQ,GAAG,IAAX,CAAA;AACD,OAAA;;MACD,IAAIlB,MAAM,CAAC0C,SAAX,EAAsB;AACpBxB,QAAAA,QAAQ,GAAG,IAAX,CAAA;AACD,OAAA;;MACD,IAAI,IAAA,CAAKd,QAAL,KAAkB,IAAlB,IAA0BJ,MAAM,CAACgC,IAArC,EAA2C;AACzCd,QAAAA,QAAQ,GAAG,KAAX,CAAA;AACD,OAAA;;AACD,MAAA,IAAIA,QAAJ,EAAc;QACZrB,IAAI,CAAC4C,WAAL,CAAiBrB,GAAjB,CAAqB,IAAKZ,CAAAA,KAA1B,EAAiC,IAAjC,CAAA,CAAA;AACD,OAFD,MAEO;AACLX,QAAAA,IAAI,CAAC4C,WAAL,CAAwB,QAAA,CAAA,CAAA,IAAA,CAAKjC,KAA7B,CAAA,CAAA;AACD,OAAA;;MACD,IAAKU,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;AACD,KAAA;AAhHH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAiHE,SAAc,WAAA,GAAA;AACZ,MAAA,IAAQrB,IAAR,GAA0B,IAA1B,CAAQA,IAAR;AAAA,UAAcoB,OAAd,GAA0B,IAA1B,CAAcA,OAAd,CAAA;;AACA,MAAA,IAAIA,OAAJ,EAAa;QACXpB,IAAI,CAAC8C,UAAL,CAAgBvB,GAAhB,CAAoB,IAAKZ,CAAAA,KAAzB,EAAgC,IAAhC,CAAA,CAAA;AACD,OAAA;AACF,KAAA;AAtHH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;IAAA,KAuHE,EAAA,SAAA,MAAA,CAAOV,IAAP,EAAa;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;MACX,IAAM8C,IAAI,GAAG,EAAb,CAAA;;AACA,MAAA,IAAI,CAACf,KAAK,CAACC,OAAN,CAAchC,IAAd,CAAL,EAA0B;QACxB8C,IAAI,CAACC,IAAL,CAAU/C,IAAV,CAAA,CAAA;AACD,OAFD,MAEO;AACL8C,QAAAA,IAAI,CAACC,IAAL,CAAA,KAAA,CAAAD,IAAI,EAAA,kBAAA,CAAS9C,IAAT,CAAJ,CAAA,CAAA;AACD,OAAA;;AACD,MAAA,IAAI8C,IAAI,CAACE,MAAL,IAAe,CAAnB,EAAsB;AACpB,QAAA,OAAA;AACD,OAAA;;MACD,IAAI,CAACjB,KAAK,CAACC,OAAN,CAAc,IAAK1B,CAAAA,QAAnB,CAAL,EAAmC;QACjC,IAAKA,CAAAA,QAAL,GAAgB,EAAhB,CAAA;AACD,OAAA;;AACD,MAAA,IAAQA,QAAR,GAA2B,IAA3B,CAAQA,QAAR;AAAA,UAAkBP,IAAlB,GAA2B,IAA3B,CAAkBA,IAAlB,CAAA;AACA+C,MAAAA,IAAI,CAACG,OAAL,CAAa,UAACC,IAAD,EAAU;QACrB,IAAIC,IAAI,GAAG,IAAX,CAAA;;QACA,IAAID,IAAI,YAAYpD,QAApB,EAA8B;AAC5BqD,UAAAA,IAAI,GAAGD,IAAP,CAAA;AACAC,UAAAA,IAAI,CAACC,QAAL,CAAc,KAAI,CAACrD,IAAnB,EAAyB,KAAzB,CAAA,CAAA;AACD,SAHD,MAGO;UACLoD,IAAI,GAAG,IAAIrD,QAAJ,CAAa,KAAI,CAACC,IAAlB,EAAwBmD,IAAxB,EAA8B,KAA9B,CAAP,CAAA;UACA5C,QAAQ,CAACyC,IAAT,CAAcI,IAAd,CAAA,CAAA;AACD,SAAA;OARH,CAAA,CAAA;MAUApD,IAAI,CAAC+B,MAAL,CAAY,IAAZ,CAAA,CAAA;AACA,MAAA,IAAA,CAAKuB,aAAL,EAAA,CAAA;AACD,KAAA;AAjJH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAkJE,kBAAStD,IAAT,EAAeE,MAAf,EAAuBqD,KAAvB,EAA8B;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;MAC5B,IAAMC,UAAU,GAAGtD,MAAnB,CAAA;MACA,IAAI,CAACsD,UAAL,EACE,OAAA;AACF,MAAA,IAAMC,aAAa,GAAGD,UAAU,CAACE,UAAX,EAAtB,CAAA;AACA,MAAA,IAAMC,cAAc,GAAGF,aAAa,CAACG,IAAd,CAAmB,UAACR,IAAD,EAAA;AAAA,QAAA,OAAUA,IAAI,CAACzC,KAAL,KAAe,MAAI,CAACA,KAA9B,CAAA;AAAA,OAAnB,CAAvB,CAAA;;AACA,MAAA,IAAIgD,cAAJ,EAAoB;AAClB,QAAA,OAAA;AACD,OAAA;;MACD,IAAI3B,KAAK,CAACC,OAAN,CAAcuB,UAAU,CAACjD,QAAzB,CAAJ,EAAwC;QACtC,IAAIsD,WAAW,GAAG,CAAlB,CAAA;;AACA,QAAA,IAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;AAC7BM,UAAAA,WAAW,GAAGN,KAAd,CAAA;AACD,SAAA;;AACD,QAAA,IAAMO,aAAa,GAAGN,UAAU,CAACjD,QAAX,CAAoBsD,WAApB,CAAtB,CAAA;;AACA,QAAA,IAAIC,aAAa,CAACnD,KAAd,KAAwB,IAAA,CAAKA,KAAjC,EAAwC;AACtC,UAAA,OAAA;AACD,SAAA;AACF,OAAA;;AACD,MAAA,IAAA,CAAKoD,MAAL,EAAA,CAAA;MACA,IAAK7D,CAAAA,MAAL,GAAcsD,UAAd,CAAA;MACA,IAAIQ,QAAQ,GAAG,IAAf,CAAA;;MACA,IAAIR,UAAU,YAAYzD,QAA1B,EAAoC;QAClC,IAAI,CAACiC,KAAK,CAACC,OAAN,CAAcuB,UAAU,CAACjD,QAAzB,CAAL,EAAyC;UACvCiD,UAAU,CAACjD,QAAX,GAAsB,EAAtB,CAAA;AACD,SAAA;;QACDyD,QAAQ,GAAG9D,MAAM,CAACK,QAAlB,CAAA;AACD,OALD,MAKO;QACLyD,QAAQ,GAAGhE,IAAI,CAACO,QAAhB,CAAA;AACD,OAAA;;AACD,MAAA,IAAIyB,KAAK,CAACC,OAAN,CAAc+B,QAAd,CAAJ,EAA6B;AAC3B,QAAA,IAAI,OAAOT,KAAP,KAAiB,QAArB,EAA+B;AAC7BS,UAAAA,QAAQ,CAACC,MAAT,CAAgBV,KAAhB,EAAuB,CAAvB,EAA0B,IAA1B,CAAA,CAAA;AACD,SAFD,MAEO;UACLS,QAAQ,CAAChB,IAAT,CAAc,IAAd,CAAA,CAAA;AACD,SAAA;AACF,OAAA;;AACD,MAAA,IAAMkB,KAAK,GAAG,IAAKC,CAAAA,IAAL,EAAd,CAAA;AACAD,MAAAA,KAAK,CAAChB,OAAN,CAAc,UAACC,IAAD,EAAU;QACtB,IAAMC,IAAI,GAAGD,IAAb,CAAA;QACAC,IAAI,CAACpD,IAAL,GAAYA,IAAZ,CAAA;QACAA,IAAI,CAACwB,OAAL,CAAaD,GAAb,CAAiB6B,IAAI,CAACzC,KAAtB,EAA6ByC,IAA7B,CAAA,CAAA;;QACA,IAAIA,IAAI,CAAC/B,QAAT,EAAmB;UACjBrB,IAAI,CAAC4C,WAAL,CAAiBrB,GAAjB,CAAqB6B,IAAI,CAACzC,KAA1B,EAAiC,IAAjC,CAAA,CAAA;AACD,SAAA;OANH,CAAA,CAAA;AAQA,MAAA,IAAMyD,WAAW,GAAGZ,UAAU,CAACW,IAAX,EAApB,CAAA;AACAC,MAAAA,WAAW,CAAClB,OAAZ,CAAoB,UAACE,IAAD,EAAU;AAC5BA,QAAAA,IAAI,CAACtB,MAAL,EAAA,CAAA;AACAsB,QAAAA,IAAI,CAACd,aAAL,EAAA,CAAA;OAFF,CAAA,CAAA;AAIAtC,MAAAA,IAAI,CAAC+B,MAAL,EAAA,CAAA;AACD,KAAA;AAtMH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAuME,SAAOoB,MAAAA,CAAAA,IAAP,EAAaI,KAAb,EAAoB;AAClB,MAAA,IAAQvD,IAAR,GAAyB,IAAzB,CAAQA,IAAR;AAAA,UAAcE,MAAd,GAAyB,IAAzB,CAAcA,MAAd,CAAA;AACA,MAAA,IAAM8D,QAAQ,GAAG,IAAKK,CAAAA,WAAL,EAAjB,CAAA;MACA,IAAIjB,IAAI,GAAG,IAAX,CAAA;;MACA,IAAID,IAAI,YAAYpD,QAApB,EAA8B;AAC5BqD,QAAAA,IAAI,GAAGD,IAAP,CAAA;AACAC,QAAAA,IAAI,CAACC,QAAL,CAAcrD,IAAd,EAAoBE,MAApB,EAA4BqD,KAA5B,CAAA,CAAA;OAFF,MAGO,IAAIJ,IAAJ,EAAU;QACfC,IAAI,GAAG,IAAIrD,QAAJ,CAAaC,IAAb,EAAmBmD,IAAnB,EAAyBjD,MAAzB,CAAP,CAAA;;AACA,QAAA,IAAI,OAAOqD,KAAP,KAAiB,QAArB,EAA+B;AAC7BS,UAAAA,QAAQ,CAACC,MAAT,CAAgBV,KAAhB,EAAuB,CAAvB,EAA0BH,IAA1B,CAAA,CAAA;AACD,SAAA;;AACDY,QAAAA,QAAQ,CAACd,OAAT,CAAiB,UAACoB,OAAD,EAAa;AAC5BA,UAAAA,OAAO,CAACxC,MAAR,EAAA,CAAA;SADF,CAAA,CAAA;AAGD,OAAA;;AACD9B,MAAAA,IAAI,CAAC+B,MAAL,EAAA,CAAA;AACD,KAAA;AAxNH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;IAAA,KAyNE,EAAA,SAAA,YAAA,CAAawC,OAAb,EAAsB;AACpB,MAAA,IAAMhB,KAAK,GAAG,IAAKiB,CAAAA,QAAL,EAAd,CAAA;AACA,MAAA,IAAA,CAAKC,MAAL,CAAYF,OAAZ,EAAqBhB,KAArB,CAAA,CAAA;AACD,KAAA;AA5NH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;IAAA,KA6NE,EAAA,SAAA,WAAA,CAAYgB,OAAZ,EAAqB;AACnB,MAAA,IAAMhB,KAAK,GAAG,IAAKiB,CAAAA,QAAL,EAAd,CAAA;AACA,MAAA,IAAA,CAAKC,MAAL,CAAYF,OAAZ,EAAqBhB,KAAK,GAAG,CAA7B,CAAA,CAAA;AACD,KAAA;AAhOH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAiOE,SAAS,MAAA,GAAA;AACP,MAAA,IAAQvD,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;AACA,MAAA,IAAMkE,KAAK,GAAG,IAAKC,CAAAA,IAAL,EAAd,CAAA;AACA,MAAA,IAAMH,QAAQ,GAAG,IAAKK,CAAAA,WAAL,EAAjB,CAAA;AACA,MAAA,IAAMd,KAAK,GAAG,IAAKiB,CAAAA,QAAL,EAAd,CAAA;;AACA,MAAA,IAAIxC,KAAK,CAACC,OAAN,CAAc+B,QAAd,CAAJ,EAA6B;AAC3BA,QAAAA,QAAQ,CAACC,MAAT,CAAgBV,KAAhB,EAAuB,CAAvB,CAAA,CAAA;AACD,OAAA;;AACDW,MAAAA,KAAK,CAAChB,OAAN,CAAc,UAACE,IAAD,EAAU;AACtBA,QAAAA,IAAI,CAACsB,KAAL,EAAA,CAAA;OADF,CAAA,CAAA;AAGAV,MAAAA,QAAQ,CAACd,OAAT,CAAiB,UAACE,IAAD,EAAU;AACzBA,QAAAA,IAAI,CAACtB,MAAL,EAAA,CAAA;OADF,CAAA,CAAA;AAGA,MAAA,IAAA,CAAK6C,aAAL,EAAA,CAAA;AACA3E,MAAAA,IAAI,CAAC+B,MAAL,EAAA,CAAA;AACD,KAAA;AAjPH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAkPE,SAAQ,KAAA,GAAA;AACN,MAAA,IAAQ/B,IAAR,GAAwB,IAAxB,CAAQA,IAAR;AAAA,UAAcW,KAAd,GAAwB,IAAxB,CAAcA,KAAd,CAAA;MACAX,IAAI,CAAC8C,UAAL,CAAA,QAAA,CAAA,CAAuBnC,KAAvB,CAAA,CAAA;MACAX,IAAI,CAACyC,UAAL,CAAA,QAAA,CAAA,CAAuB9B,KAAvB,CAAA,CAAA;MACAX,IAAI,CAAC4C,WAAL,CAAA,QAAA,CAAA,CAAwBjC,KAAxB,CAAA,CAAA;MACAX,IAAI,CAACwB,OAAL,CAAA,QAAA,CAAA,CAAoBb,KAApB,CAAA,CAAA;AACD,KAAA;AAxPH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,cAAA;AAAA,IAAA,KAAA,EAAA,YAAA;MAAA,IAyPE,aAAA,GAAA,iBAAA,eAAAiE,WAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,QAAA,IAAA,MAAA,EAAA,IAAA,CAAA;AAAA,QAAA,OAAAA,WAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,UAAA,OAAA,CAAA,EAAA;AAAA,YAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,cAAA,KAAA,CAAA;gBACQzE,MADR,GACiBE,KAAG,CAAC,IAAD,EAAO,aAAP,CAAH,IAA4B,EAD7C,CAAA;;AAAA,gBAAA,IAAA,EAEM,KAAKE,QAAL,KAAkB,IAAlB,IAA0B,CAAC,KAAKT,OAFtC,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;;AAAA,gBAAA,IAAA,EAGQ,OAAOK,MAAM,CAAC0E,IAAd,KAAuB,UAH/B,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;;gBAIM,IAAK/E,CAAAA,OAAL,GAAe,IAAf,CAAA;AACA,gBAAA,IAAA,CAAKgC,MAAL,EAAA,CAAA;AACIiB,gBAAAA,IANV,GAMiB,EANjB,CAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAOmB5C,MAAM,CAAC0E,IAAP,CAAY,IAAZ,CAPnB,CAAA;;AAAA,cAAA,KAAA,CAAA;gBAOM9B,IAPN,GAAA,QAAA,CAAA,IAAA,CAAA;AAQM,gBAAA,IAAA,CAAK/C,IAAL,CAAU8E,IAAV,CAAe,MAAf,EAAuB;AACrB1B,kBAAAA,IAAI,EAAE,IADe;AAErBnD,kBAAAA,IAAI,EAAE8C,IAAAA;iBAFR,CAAA,CAAA;gBAIA,IAAKjD,CAAAA,OAAL,GAAe,KAAf,CAAA;;gBACA,IAAIkC,KAAK,CAACC,OAAN,CAAcc,IAAd,CAAuBA,IAAAA,IAAI,CAACE,MAAL,GAAc,CAAzC,EAA4C;kBAC1C,IAAKf,CAAAA,MAAL,CAAYa,IAAZ,CAAA,CAAA;AACD,iBAFD,MAEO;kBACL,IAAKxC,CAAAA,QAAL,GAAgB,KAAhB,CAAA;AACD,iBAAA;;AACD,gBAAA,IAAA,CAAKuB,MAAL,EAAA,CAAA;;AAlBN,cAAA,KAAA,EAAA,CAAA;AAAA,cAAA,KAAA,KAAA;AAAA,gBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA;AAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;OAzPF,CAAA,CAAA,CAAA;;AAAA,MAAA,SAAA,YAAA,GAAA;AAAA,QAAA,OAAA,aAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,OAAA;;AAAA,MAAA,OAAA,YAAA,CAAA;AAAA,KAAA,EAAA;AAAA,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;IAAA,KA+QE,EAAA,SAAA,GAAA,CAAIqB,IAAJ,EAAU;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;AACR,MAAA,IAAQnD,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;AACA,MAAA,IAAMI,IAAI,GAAGd,MAAM,CAACc,IAAP,CAAY+C,IAAZ,CAAb,CAAA;AACA/C,MAAAA,IAAI,CAAC8C,OAAL,CAAa,UAAC6B,GAAD,EAAS;QACpB,IAAI1F,cAAc,CAAC2F,IAAf,CAAoBxF,aAApB,EAAmCuF,GAAnC,CAA2CA,IAAAA,GAAG,KAAK,OAAvD,EAAgE;AAC9D,UAAA,MAAI,CAACA,GAAD,CAAJ,GAAY5B,IAAI,CAAC4B,GAAD,CAAhB,CAAA;AACD,SAAA;OAHH,CAAA,CAAA;MAKA/E,IAAI,CAACiF,OAAL,CAAa,IAAb,CAAA,CAAA;AACD,KAAA;AAxRH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;AAAA,IAAA,KAAA,EAyRE,SAAY,SAAA,GAAA;AACV,MAAA,OAAO,KAAK/E,MAAZ,CAAA;AACD,KAAA;AA3RH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EA4RE,SAAa,UAAA,GAAA;MACX,IAAMgF,OAAO,GAAG,EAAhB,CAAA;MACA,IAAI9B,IAAI,GAAG,IAAA,CAAKlD,MAAhB,CAAA;;AACA,MAAA,OAAOkD,IAAP,EAAa;QACX8B,OAAO,CAAClC,IAAR,CAAaI,IAAb,CAAA,CAAA;QACAA,IAAI,GAAGA,IAAI,CAAClD,MAAZ,CAAA;AACD,OAAA;;AACD,MAAA,OAAOgF,OAAP,CAAA;AACD,KAAA;AApSH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAqSE,SAAc,WAAA,GAAA;AACZ,MAAA,IAAQhF,MAAR,GAAyB,IAAzB,CAAQA,MAAR;AAAA,UAAgBF,IAAhB,GAAyB,IAAzB,CAAgBA,IAAhB,CAAA;MACA,IAAI+C,IAAI,GAAG,EAAX,CAAA;;AACA,MAAA,IAAI7C,MAAJ,EAAY;QACV,IAAI8B,KAAK,CAACC,OAAN,CAAc/B,MAAM,CAACK,QAArB,CAAJ,EAAoC;UAClCwC,IAAI,GAAG7C,MAAM,CAACK,QAAd,CAAA;AACD,SAAA;OAHH,MAIO,IAAIP,IAAJ,EAAU;QACf+C,IAAI,GAAG/C,IAAI,CAACO,QAAZ,CAAA;AACD,OAAA;;AACD,MAAA,OAAOwC,IAAP,CAAA;AACD,KAAA;AAhTH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EAiTE,SAAU,OAAA,GAAA;AACR,MAAA,IAAMmC,OAAO,GAAG,IAAKxB,CAAAA,UAAL,EAAhB,CAAA;MACA,OAAOwB,OAAO,CAACA,OAAO,CAACjC,MAAR,GAAiB,CAAlB,CAAP,IAA+B,IAAtC,CAAA;AACD,KAAA;AApTH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAqTE,SAAW,QAAA,GAAA;AACT,MAAA,IAAMF,IAAI,GAAG,IAAKsB,CAAAA,WAAL,EAAb,CAAA;AACA,MAAA,OAAOtB,IAAI,CAACoC,OAAL,CAAa,IAAb,CAAP,CAAA;AACD,KAAA;AAxTH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EAyTE,SAAU,OAAA,GAAA;AACR,MAAA,IAAMjB,KAAK,GAAG,IAAKR,CAAAA,UAAL,EAAd,CAAA;MACAQ,KAAK,CAACkB,OAAN,CAAc,IAAd,CAAA,CAAA;MACA,OAAOlB,KAAK,CAACmB,OAAN,EAAP,CAAA;AACD,KAAA;AA7TH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EA8TE,SAAW,QAAA,GAAA;AACT,MAAA,IAAMH,OAAO,GAAG,IAAKxB,CAAAA,UAAL,EAAhB,CAAA;MACA,OAAOwB,OAAO,CAACjC,MAAf,CAAA;AACD,KAAA;AAjUH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAkUE,SAAS,MAAA,GAAA;AACP,MAAA,IAAA,UAAA,GAGI,KAAKjD,IAHT;UACEG,MADF,cACEA,MADF;UAEEmF,SAFF,cAEEA,SAFF,CAAA;MAIA,IAAIC,IAAI,GAAG,IAAX,CAAA;;AACA,MAAA,IAAI,OAAOpF,MAAM,CAACqF,MAAd,KAAyB,UAA7B,EAAyC;AACvC,QAAA,IAAMC,SAAS,GAAG,IAAKC,CAAAA,QAAL,EAAlB,CAAA;AACAH,QAAAA,IAAI,GAAGpF,MAAM,CAACqF,MAAP,CAAcC,SAAd,CAAP,CAAA;AACD,OAAA;;AACD,MAAA,IAAIF,IAAJ,EAAU;AACRD,QAAAA,SAAS,CAAC/D,GAAV,CAAc,IAAKZ,CAAAA,KAAnB,EAA0B,IAA1B,CAAA,CAAA;OADF,MAEO,IAAI2E,SAAS,CAACjF,GAAV,CAAc,IAAA,CAAKM,KAAnB,CAAJ,EAA+B;QACpC2E,SAAS,CAAA,QAAA,CAAT,CAAiB,IAAA,CAAK3E,KAAtB,CAAA,CAAA;AACD,OAAA;;AACD,MAAA,OAAO4E,IAAP,CAAA;AACD,KAAA;AAlVH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;AAAA,IAAA,KAAA,EAmVE,SAAY,SAAA,GAAA;AACV,MAAA,IACE/D,OADF,GAEI,IAAKxB,CAAAA,IAFT,CACEwB,OADF,CAAA;MAGA,IAAIE,OAAO,GAAG,IAAd,CAAA;;MACA,IAAI,IAAA,CAAKR,UAAT,EAAqB;AACnB,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;;AACD,MAAA,IAAIM,OAAO,CAACnB,GAAR,CAAY,IAAKM,CAAAA,KAAjB,CAAJ,EAA6B;AAC3B,QAAA,IAAMgF,aAAa,GAAG,IAAKC,CAAAA,MAAL,EAAtB,CAAA;QACA,IAAIC,aAAa,GAAG,IAApB,CAAA;AACA,QAAA,IAAMX,OAAO,GAAG,IAAKxB,CAAAA,UAAL,EAAhB,CAAA;;AACA,QAAA,IAAIwB,OAAO,CAACjC,MAAR,GAAiB,CAArB,EAAwB;AACtB4C,UAAAA,aAAa,GAAGX,OAAO,CAACY,KAAR,CAAc,UAAC1C,IAAD,EAAA;YAAA,OAAUA,IAAI,CAAC2C,UAAL,EAAV,CAAA;AAAA,WAAd,CAAhB,CAAA;AACD,SAAA;;QACDrE,OAAO,GAAGmE,aAAa,IAAIF,aAA3B,CAAA;AACD,OARD,MAQO;AACLjE,QAAAA,OAAO,GAAG,KAAV,CAAA;AACD,OAAA;;AACD,MAAA,OAAOA,OAAP,CAAA;AACD,KAAA;AAvWH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EAwWE,SAAa,UAAA,GAAA;AACX,MAAA,IAAI,IAAKR,CAAAA,UAAT,EACE,OAAO,IAAP,CAAA;AACF,MAAA,IAAM8E,YAAY,GAAG3F,KAAG,CAAC,IAAD,EAAO,sBAAP,CAAxB,CAAA;AACA,MAAA,OAAO,CAAC,EAAE2F,YAAY,IAAI,IAAA,CAAKpG,QAAvB,CAAR,CAAA;AACD,KAAA;AA7WH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EA8WE,SAAgB,aAAA,GAAA;MACd,OAAO,CAAC,EAAES,KAAG,CAAC,IAAD,EAAO,yBAAP,CAAH,IAAwC,IAAKZ,CAAAA,WAA/C,CAAR,CAAA;AACD,KAAA;AAhXH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAiXE,SAAc,WAAA,GAAA;MACZ,OAAO,CAAC,EAAEY,KAAG,CAAC,IAAD,EAAO,uBAAP,CAAH,IAAsC,IAAKX,CAAAA,SAA7C,CAAR,CAAA;AACD,KAAA;AAnXH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EAoXE,SAAc,WAAA,GAAA;MACZ,OAAO,CAAC,EAAEW,KAAG,CAAC,IAAD,EAAO,uBAAP,CAAH,IAAsC,IAAKV,CAAAA,SAA7C,CAAR,CAAA;AACD,KAAA;AAtXH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;IAAA,KAuXE,EAAA,SAAA,SAAA,CAAUsG,GAAV,EAAe;AACb,MAAA,IAAQjG,IAAR,GAAwB,IAAxB,CAAQA,IAAR;AAAA,UAAcW,KAAd,GAAwB,IAAxB,CAAcA,KAAd,CAAA;AACA,MAAA,IAAMmC,UAAU,GAAGmD,GAAG,IAAIjG,IAAI,CAAC8C,UAA/B,CAAA;AACA,MAAA,OAAO,CAAC,EAAE9C,IAAI,CAACwB,OAAL,CAAanB,GAAb,CAAiBM,KAAjB,CAAA,IAA2BmC,UAAU,CAACzC,GAAX,CAAeM,KAAf,CAA7B,CAAR,CAAA;AACD,KAAA;AA3XH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;IAAA,KA4XE,EAAA,SAAA,UAAA,CAAWsF,GAAX,EAAgB;AACd,MAAA,IAAQjG,IAAR,GAAoC,IAApC,CAAQA,IAAR;AAAA,UAAcW,KAAd,GAAoC,IAApC,CAAcA,KAAd;AAAA,UAAqBO,UAArB,GAAoC,IAApC,CAAqBA,UAArB,CAAA;MACA,IAAIA,UAAJ,EACE,OAAO,IAAP,CAAA;AACF,MAAA,IAAM0B,WAAW,GAAGqD,GAAG,IAAIjG,IAAI,CAAC4C,WAAhC,CAAA;AACA,MAAA,OAAO,CAAC,EAAE5C,IAAI,CAACwB,OAAL,CAAanB,GAAb,CAAiBM,KAAjB,CAAA,IAA2BiC,WAAW,CAACvC,GAAZ,CAAgBM,KAAhB,CAA7B,CAAR,CAAA;AACD,KAAA;AAlYH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,WAAA;IAAA,KAmYE,EAAA,SAAA,SAAA,CAAUsF,GAAV,EAAe;AACb,MAAA,IAAQ1F,QAAR,GAA2B,IAA3B,CAAQA,QAAR;AAAA,UAAkBP,IAAlB,GAA2B,IAA3B,CAAkBA,IAAlB,CAAA;AACA,MAAA,IAAQuC,aAAR,GAA0BvC,IAAI,CAACG,MAA/B,CAAQoC,aAAR,CAAA;MACA,IAAIjB,OAAO,GAAG,KAAd,CAAA;AACA,MAAA,IAAMmB,UAAU,GAAGwD,GAAG,IAAIjG,IAAI,CAACyC,UAA/B,CAAA;;MACA,IAAIzC,IAAI,CAACwB,OAAL,CAAanB,GAAb,CAAiB,IAAA,CAAKM,KAAtB,CAAJ,EAAkC;AAChC,QAAA,IAAI8B,UAAU,CAACpC,GAAX,CAAe,IAAKM,CAAAA,KAApB,CAAJ,EAAgC;AAC9BW,UAAAA,OAAO,GAAG,IAAV,CAAA;AACD,SAFD,MAEO,IAAIU,KAAK,CAACC,OAAN,CAAc1B,QAAd,CAAA,IAA2BA,QAAQ,CAAC0C,MAAT,GAAkB,CAA7C,IAAkD,CAACV,aAAvD,EAAsE;AAC3EjB,UAAAA,OAAO,GAAGf,QAAQ,CAACuF,KAAT,CAAe,UAAC1C,IAAD,EAAU;AACjC,YAAA,IAAM8C,cAAc,GAAG9C,IAAI,CAACZ,SAAL,CAAeC,UAAf,CAAvB,CAAA;AACA,YAAA,OAAOyD,cAAP,CAAA;AACD,WAHS,CAAV,CAAA;AAID,SALM,MAKA,IAAI,CAAC3D,aAAL,EAAoB;AACzB,UAAA,IAAM2C,OAAO,GAAG,IAAKxB,CAAAA,UAAL,EAAhB,CAAA;AACApC,UAAAA,OAAO,GAAG4D,OAAO,CAACtB,IAAR,CAAa,UAACR,IAAD,EAAA;AAAA,YAAA,OAAUX,UAAU,CAACpC,GAAX,CAAe+C,IAAI,CAACzC,KAApB,CAAV,CAAA;AAAA,WAAb,CAAV,CAAA;AACD,SAAA;AACF,OAAA;;MACD,OAAO,CAAC,CAACW,OAAT,CAAA;AACD,KAAA;AAtZH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,iBAAA;AAAA,IAAA,KAAA,EAuZE,SAAkB,eAAA,GAAA;AAChB,MAAA,IAAQf,QAAR,GAA2B,IAA3B,CAAQA,QAAR;AAAA,UAAkBP,IAAlB,GAA2B,IAA3B,CAAkBA,IAAlB,CAAA;AACA,MAAA,IAAQuC,aAAR,GAA0BvC,IAAI,CAACG,MAA/B,CAAQoC,aAAR,CAAA;;AACA,MAAA,IAAIA,aAAJ,EAAmB;AACjB,QAAA,OAAO,KAAP,CAAA;AACD,OAAA;;MACD,IAAIF,aAAa,GAAG,KAApB,CAAA;;AACA,MAAA,IAAIL,KAAK,CAACC,OAAN,CAAc1B,QAAd,CAAJ,EAA6B;QAC3B,IAAI4F,YAAY,GAAG,IAAnB,CAAA;AACA9D,QAAAA,aAAa,GAAG9B,QAAQ,CAACqD,IAAT,CAAc,UAACR,IAAD,EAAU;AACtC,UAAA,IAAIA,IAAI,CAACgD,eAAL,EAAJ,EAA4B;AAC1B,YAAA,OAAO,IAAP,CAAA;AACD,WAAA;;UACD,IAAID,YAAY,KAAK,IAArB,EAA2B;AACzBA,YAAAA,YAAY,GAAG/C,IAAI,CAACZ,SAAL,EAAf,CAAA;AACD,WAAA;;AACD,UAAA,IAAI2D,YAAY,KAAK/C,IAAI,CAACZ,SAAL,EAArB,EAAuC;AACrC,YAAA,OAAO,IAAP,CAAA;AACD,WAAA;;AACD,UAAA,OAAO,KAAP,CAAA;AACD,SAXe,CAAhB,CAAA;AAYD,OAAA;;AACD,MAAA,OAAOH,aAAP,CAAA;AACD,KAAA;AA9aH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,SAAA;AAAA,IAAA,KAAA,EA+aE,SAAU,OAAA,GAAA;AACR,MAAA,IAAM2B,QAAQ,GAAG,IAAKK,CAAAA,WAAL,EAAjB,CAAA;AACA,MAAA,OAAOL,QAAQ,CAAC,CAAD,CAAR,KAAgB,IAAvB,CAAA;AACD,KAAA;AAlbH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAmbE,SAAS,MAAA,GAAA;AACP,MAAA,IAAMA,QAAQ,GAAG,IAAKK,CAAAA,WAAL,EAAjB,CAAA;MACA,OAAOL,QAAQ,CAACA,QAAQ,CAACf,MAAT,GAAkB,CAAnB,CAAR,KAAkC,IAAzC,CAAA;AACD,KAAA;AAtbH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAubE,SAAS,MAAA,GAAA;MACP,IAAIoD,MAAM,GAAG,KAAb,CAAA;;AACA,MAAA,IAAIrE,KAAK,CAACC,OAAN,CAAc,IAAK1B,CAAAA,QAAnB,CAAJ,EAAkC;AAChC8F,QAAAA,MAAM,GAAG,IAAK9F,CAAAA,QAAL,CAAc0C,MAAd,IAAwB,CAAjC,CAAA;AACD,OAFD,MAEO;QACLoD,MAAM,GAAG,CAAC,IAAA,CAAK9F,QAAf,CAAA;AACD,OAAA;;AACD,MAAA,OAAO8F,MAAP,CAAA;AACD,KAAA;AA/bH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;IAAA,KAgcE,EAAA,SAAA,IAAA,CAAKC,SAAL,EAAgB;MACd,IAAKpF,CAAAA,UAAL,GAAkBoF,SAAlB,CAAA;AACA,MAAA,IAAA,CAAKjF,QAAL,GAAgB,IAAK0E,CAAAA,UAAL,EAAhB,CAAA;AACA,MAAA,IAAA,CAAKrE,OAAL,GAAe,IAAK6E,CAAAA,SAAL,EAAf,CAAA;AACD,KAAA;AApcH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAqcE,SAAgB,aAAA,GAAA;AACd,MAAA,IAAA,CAAKzE,MAAL,EAAA,CAAA;;AACA,MAAA,IAAI,KAAKT,QAAL,IAAiB,KAAKd,QAAL,KAAkB,IAAvC,EAA6C;AAC3C,QAAA,IAAA,CAAK6B,YAAL,EAAA,CAAA;AACD,OAAA;AACF,KAAA;AA1cH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EA2cE,SAAiB,cAAA,GAAA;AACf,MAAA,OAAO,KAAKoE,WAAL,CAAiB,CAAC,IAAKT,CAAAA,UAAL,EAAlB,CAAP,CAAA;AACD,KAAA;AA7cH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,aAAA;AAAA,IAAA,KAAA,EA8cE,SAAY1E,WAAAA,CAAAA,QAAZ,EAAsBoF,IAAtB,EAA4B;AAC1B,MAAA,IAAQzG,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;;AACA,MAAA,IAAM0G,OAAO,GAAA,aAAA,CAAA;AACXC,QAAAA,QAAQ,EAAE,KAAA;AADC,OAAA,EAERF,IAFQ,CAAb,CAAA;;AAIA,MAAA,IAAIR,GAAG,GAAGjG,IAAI,CAAC4C,WAAf,CAAA;;AACA,MAAA,IAAI,CAAC8D,OAAO,CAACC,QAAb,EAAuB;AACrBV,QAAAA,GAAG,GAAG,IAAIW,GAAJ,CAAQ5G,IAAI,CAAC4C,WAAb,CAAN,CAAA;AACD,OAAA;;AACD,MAAA,IAAIvB,QAAJ,EAAc;QACZ,IAAMwF,iBAAiB,GAAG,EAA1B,CAAA;QACAA,iBAAiB,CAAC7D,IAAlB,CAAuB,IAAvB,CAAA,CAAA;;AACA,QAAA,IAAI3C,KAAG,CAACL,IAAD,EAAO,qBAAP,CAAP,EAAsC;AACpC,UAAA,IAAA,CAAK0D,UAAL,EAAkBR,CAAAA,OAAlB,CAA0B,UAACE,IAAD,EAAU;YAClCyD,iBAAiB,CAAC7D,IAAlB,CAAuBI,IAAvB,CAAA,CAAA;WADF,CAAA,CAAA;AAGD,SAAA;;AACDyD,QAAAA,iBAAiB,CAAC3D,OAAlB,CAA0B,UAACE,IAAD,EAAU;UAClC,IAAI0D,aAAa,GAAG,KAApB,CAAA;;UACA,IAAI1D,IAAI,CAAClD,MAAT,EAAiB;AACf4G,YAAAA,aAAa,GAAG1D,IAAI,CAAClD,MAAL,CAAY4G,aAAZ,EAAhB,CAAA;AACD,WAFD,MAEO;AAAA,YAAA,IAAA,YAAA,CAAA;;YACLA,aAAa,GAAG9G,IAAH,KAAA,IAAA,IAAGA,IAAH,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,YAAA,GAAGA,IAAI,CAAEG,MAAT,MAAG,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAcV,WAA9B,CAAA;AACD,WAAA;;AACD,UAAA,IAAIqH,aAAJ,EAAmB;AACjB,YAAA,IAAM9C,QAAQ,GAAGZ,IAAI,CAACiB,WAAL,EAAjB,CAAA;AACAL,YAAAA,QAAQ,CAACd,OAAT,CAAiB,UAAC6D,KAAD,EAAW;AAC1Bd,cAAAA,GAAG,CAAH,QAAA,CAAA,CAAWc,KAAK,CAACpG,KAAjB,CAAA,CAAA;aADF,CAAA,CAAA;AAGD,WAAA;;AACDsF,UAAAA,GAAG,CAAC1E,GAAJ,CAAQ6B,IAAI,CAACzC,KAAb,EAAoB,IAApB,CAAA,CAAA;SAbF,CAAA,CAAA;AAeD,OAvBD,MAuBO;QACLsF,GAAG,CAAA,QAAA,CAAH,CAAW,IAAA,CAAKtF,KAAhB,CAAA,CAAA;AACD,OAAA;;MACD,IAAI+F,OAAO,CAACC,QAAZ,EAAsB;AACpB,QAAA,IAAA,CAAKK,aAAL,EAAA,CAAA;AACA,QAAA,IAAA,CAAKlF,MAAL,EAAA,CAAA;AACA,QAAA,IAAA,CAAKmF,cAAL,EAAA,CAAA;AACD,OAAA;;AACD,MAAA,OAAOjH,IAAI,CAACkH,WAAL,CAAiBjB,GAAjB,CAAP,CAAA;AACD,KAAA;AAxfH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAyfE,SAAgB,aAAA,GAAA;AACd,MAAA,OAAO,KAAKkB,UAAL,CAAgB,CAAC,IAAKC,CAAAA,SAAL,EAAjB,CAAP,CAAA;AACD,KAAA;AA3fH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EA4fE,SAAWhG,UAAAA,CAAAA,OAAX,EAAoBqF,IAApB,EAA0B;AACxB,MAAA,IAAQzG,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;;AACA,MAAA,IAAM0G,OAAO,GAAA,aAAA,CAAA;AACXC,QAAAA,QAAQ,EAAE,KAAA;AADC,OAAA,EAERF,IAFQ,CAAb,CAAA;;AAIA,MAAA,IAAMtG,MAAM,GAAGH,IAAI,CAACG,MAAL,IAAe,EAA9B,CAAA;AACA,MAAA,IAAI8F,GAAG,GAAGjG,IAAI,CAAC8C,UAAf,CAAA;;AACA,MAAA,IAAI,CAAC4D,OAAO,CAACC,QAAb,EAAuB;AACrBV,QAAAA,GAAG,GAAG,IAAIW,GAAJ,CAAQ5G,IAAI,CAAC8C,UAAb,CAAN,CAAA;AACD,OAAA;;MACD,IAAI,IAAA,CAAKuE,WAAL,EAAJ,EAAwB;AACtB,QAAA,IAAIjG,OAAJ,EAAa;AACX,UAAA,IAAI,CAACjB,MAAM,CAACmH,cAAZ,EAA4B;AAC1BrB,YAAAA,GAAG,CAACsB,KAAJ,EAAA,CAAA;AACD,WAAA;;AACDtB,UAAAA,GAAG,CAAC1E,GAAJ,CAAQ,IAAKZ,CAAAA,KAAb,EAAoB,IAApB,CAAA,CAAA;AACD,SALD,MAKO;UACLsF,GAAG,CAAA,QAAA,CAAH,CAAW,IAAA,CAAKtF,KAAhB,CAAA,CAAA;AACD,SAAA;AACF,OAAA;;MACD,IAAI+F,OAAO,CAACC,QAAZ,EAAsB;AACpB,QAAA,IAAA,CAAK7E,MAAL,EAAA,CAAA;AACD,OAAA;;AACD,MAAA,OAAO9B,IAAI,CAACwH,UAAL,CAAgBvB,GAAhB,CAAP,CAAA;AACD,KAAA;AArhBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAshBE,SAAgB,aAAA,GAAA;AACd,MAAA,OAAO,KAAKwB,UAAL,CAAgB,CAAC,IAAKjF,CAAAA,SAAL,EAAjB,CAAP,CAAA;AACD,KAAA;AAxhBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EAyhBE,SAAWlB,UAAAA,CAAAA,OAAX,EAAoBmF,IAApB,EAA0B;AACxB,MAAA,IAAQzG,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;AACA,MAAA,IAAMG,MAAM,GAAGH,IAAI,CAACG,MAAL,IAAe,EAA9B,CAAA;;AACA,MAAA,IAAMuG,OAAO,GAAA,aAAA,CAAA;AACXC,QAAAA,QAAQ,EAAE,KAAA;AADC,OAAA,EAERF,IAFQ,CAAb,CAAA;;AAIA,MAAA,IAAIR,GAAG,GAAGjG,IAAI,CAACyC,UAAf,CAAA;;AACA,MAAA,IAAI,CAACiE,OAAO,CAACC,QAAb,EAAuB;AACrBV,QAAAA,GAAG,GAAG,IAAIW,GAAJ,CAAQ5G,IAAI,CAACyC,UAAb,CAAN,CAAA;AACD,OAAA;;MACD,IAAI,IAAA,CAAKiF,WAAL,EAAsBpG,IAAAA,OAAO,KAAK,IAAKkB,CAAAA,SAAL,EAAtC,EAAwD;QACtD,IAAIrC,MAAM,CAACoC,aAAX,EAA0B;AACxB,UAAA,IAAIjB,OAAJ,EAAa;AACX2E,YAAAA,GAAG,CAAC1E,GAAJ,CAAQ,IAAKZ,CAAAA,KAAb,EAAoB,IAApB,CAAA,CAAA;AACD,WAFD,MAEO;YACLsF,GAAG,CAAA,QAAA,CAAH,CAAW,IAAA,CAAKtF,KAAhB,CAAA,CAAA;AACD,WAAA;AACF,SAND,MAMO;AACL,UAAA,IAAMJ,QAAQ,GAAG,IAAK4D,CAAAA,IAAL,EAAjB,CAAA;AACA5D,UAAAA,QAAQ,CAAC2C,OAAT,CAAiB,UAACE,IAAD,EAAU;AACzB,YAAA,IAAI9B,OAAJ,EAAa;AACX2E,cAAAA,GAAG,CAAC1E,GAAJ,CAAQ6B,IAAI,CAACzC,KAAb,EAAoB,IAApB,CAAA,CAAA;AACD,aAFD,MAEO;AACLsF,cAAAA,GAAG,CAAH,QAAA,CAAA,CAAW7C,IAAI,CAACzC,KAAhB,CAAA,CAAA;AACD,aAAA;WALH,CAAA,CAAA;AAOA,UAAA,IAAMuE,OAAO,GAAG,IAAKxB,CAAAA,UAAL,EAAhB,CAAA;AACAwB,UAAAA,OAAO,CAAChC,OAAR,CAAgB,UAACE,IAAD,EAAU;AACxB6C,YAAAA,GAAG,CAAH,QAAA,CAAA,CAAW7C,IAAI,CAACzC,KAAhB,CAAA,CAAA;WADF,CAAA,CAAA;AAGD,SAAA;AACF,OAAA;;MACD,IAAI+F,OAAO,CAACC,QAAZ,EAAsB;QACpB,IAAIxG,MAAM,CAACoC,aAAX,EAA0B;AACxB,UAAA,IAAA,CAAKD,aAAL,EAAA,CAAA;AACD,SAFD,MAEO;UACL,IAAMqF,YAAY,GAAG3H,IAAI,CAAC4H,eAAL,CAAqB,CAAC,IAAA,CAAKjH,KAAN,CAArB,CAArB,CAAA;AACAgH,UAAAA,YAAY,CAACzE,OAAb,CAAqB,UAACE,IAAD,EAAU;AAC7BA,YAAAA,IAAI,CAACd,aAAL,EAAA,CAAA;WADF,CAAA,CAAA;AAGD,SAAA;AACF,OAAA;;AACD,MAAA,OAAOtC,IAAI,CAAC6H,UAAL,CAAgB5B,GAAhB,CAAP,CAAA;AACD,KAAA;AArkBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,QAAA;AAAA,IAAA,KAAA,EAskBE,SAAS,MAAA,GAAA;AACP,MAAA,IAAA,CAAKxE,KAAL,GAAa,IAAKkB,CAAAA,QAAL,EAAb,CAAA;AACA,MAAA,IAAA,CAAKvB,OAAL,GAAe,IAAKgG,CAAAA,SAAL,EAAf,CAAA;AACA,MAAA,IAAA,CAAK/F,QAAL,GAAgB,IAAK0E,CAAAA,UAAL,EAAhB,CAAA;AACA,MAAA,IAAA,CAAKlF,WAAL,GAAmB,IAAK6G,CAAAA,WAAL,EAAnB,CAAA;AACA,MAAA,IAAA,CAAKhG,OAAL,GAAe,IAAK6E,CAAAA,SAAL,EAAf,CAAA;AACA,MAAA,IAAA,CAAKtF,QAAL,GAAgB,IAAK2E,CAAAA,MAAL,EAAhB,CAAA;AACA,MAAA,IAAA,CAAK7E,SAAL,GAAiB,IAAK+G,CAAAA,OAAL,EAAjB,CAAA;AACA,MAAA,IAAA,CAAK9G,QAAL,GAAgB,IAAK+G,CAAAA,MAAL,EAAhB,CAAA;AACA,MAAA,IAAA,CAAKjH,QAAL,GAAgB,IAAKuF,CAAAA,MAAL,EAAhB,CAAA;AACA,MAAA,IAAA,CAAKrG,IAAL,CAAUiF,OAAV,CAAkB,IAAlB,CAAA,CAAA;AACD,KAAA;AAjlBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAklBE,SAAgB,aAAA,GAAA;AACd,MAAA,IAAQjF,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;AACA,MAAA,IAAA,CAAKa,WAAL,GAAmB,IAAK6G,CAAAA,WAAL,EAAnB,CAAA;;AACA,MAAA,IAAI,KAAK7G,WAAL,IAAoB,CAAC,IAAA,CAAKjB,QAA9B,EAAwC;AACtC,QAAA,IAAA,CAAK0B,OAAL,GAAe,IAAKkB,CAAAA,SAAL,EAAf,CAAA;;QACA,IAAI,IAAA,CAAKlB,OAAT,EAAkB;UAChBtB,IAAI,CAACyC,UAAL,CAAgBlB,GAAhB,CAAoB,IAAKZ,CAAAA,KAAzB,EAAgC,IAAhC,CAAA,CAAA;AACD,SAAA;;AACD,QAAA,IAAA,CAAK0B,aAAL,GAAqB,IAAK+D,CAAAA,eAAL,EAArB,CAAA;QACApG,IAAI,CAACiF,OAAL,CAAa,IAAb,CAAA,CAAA;AACD,OAAA;AACF,KAAA;AA7lBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EA8lBE,SAAiB,cAAA,GAAA;AACf,MAAA,IAAQ1E,QAAR,GAAqB,IAArB,CAAQA,QAAR,CAAA;;AACA,MAAA,IAAIyB,KAAK,CAACC,OAAN,CAAc1B,QAAd,CAAJ,EAA6B;AAC3BA,QAAAA,QAAQ,CAAC2C,OAAT,CAAiB,UAACE,IAAD,EAAU;AACzBA,UAAAA,IAAI,CAACtB,MAAL,EAAA,CAAA;AACAsB,UAAAA,IAAI,CAACd,aAAL,EAAA,CAAA;AACAc,UAAAA,IAAI,CAAC6D,cAAL,EAAA,CAAA;SAHF,CAAA,CAAA;AAKD,OAAA;AACF,KAAA;AAvmBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAwmBE,SAAgB,aAAA,GAAA;AACd,MAAA,IAAQ/G,MAAR,GAAmB,IAAnB,CAAQA,MAAR,CAAA;;AACA,MAAA,IAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAAC4B,MAAP,EAAA,CAAA;AACA5B,QAAAA,MAAM,CAACoC,aAAP,EAAA,CAAA;AACApC,QAAAA,MAAM,CAACyE,aAAP,EAAA,CAAA;AACD,OAAA;AACF,KAAA;AA/mBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAgnBE,SAAgB,aAAA,GAAA;AACd,MAAA,IAAQ3E,IAAR,GAAiB,IAAjB,CAAQA,IAAR,CAAA;MACA,IAAM2H,YAAY,GAAG3H,IAAI,CAAC4H,eAAL,CAAqB,CAAC,IAAA,CAAKjH,KAAN,CAArB,CAArB,CAAA;AACAgH,MAAAA,YAAY,CAACzE,OAAb,CAAqB,UAACE,IAAD,EAAU;AAC7BA,QAAAA,IAAI,CAACtB,MAAL,EAAA,CAAA;AACAsB,QAAAA,IAAI,CAACd,aAAL,EAAA,CAAA;OAFF,CAAA,CAAA;AAIAtC,MAAAA,IAAI,CAAC+B,MAAL,EAAA,CAAA;AACD,KAAA;AAxnBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAynBE,SAAO,IAAA,GAAA;AACL,MAAA,IAAQxB,QAAR,GAAqB,IAArB,CAAQA,QAAR,CAAA;MACA,IAAIwC,IAAI,GAAG,EAAX,CAAA;MACAA,IAAI,CAACC,IAAL,CAAU,IAAV,CAAA,CAAA;;MACA,IAAIhB,KAAK,CAACC,OAAN,CAAc1B,QAAd,CAA2BA,IAAAA,QAAQ,CAAC0C,MAAT,GAAkB,CAAjD,EAAoD;AAClD1C,QAAAA,QAAQ,CAAC2C,OAAT,CAAiB,UAACE,IAAD,EAAU;UACzBL,IAAI,GAAGA,IAAI,CAACiF,MAAL,CAAY5E,IAAI,CAACe,IAAL,EAAZ,CAAP,CAAA;SADF,CAAA,CAAA;AAGD,OAAA;;AACD,MAAA,OAAOpB,IAAP,CAAA;AACD,KAAA;AAnoBH,GAAA,EAAA;AAAA,IAAA,GAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAooBE,SAAW,QAAA,GAAA;AACT,MAAA,IAAMnC,KAAN,GAAgB,IAAhB,CAAMA,KAAN,CAAA;;MACA,IAAI,CAACA,KAAL,EAAY;AACVA,QAAAA,KAAK,GAAGqH,eAAe,CAAC,IAAD,CAAvB,CAAA;QACA,IAAKrH,CAAAA,KAAL,GAAaA,KAAb,CAAA;AACD,OAAA;;AACDsH,MAAAA,eAAe,CAACtH,KAAD,EAAQ,IAAR,CAAf,CAAA;AACA,MAAA,OAAOA,KAAP,CAAA;AACD,KAAA;AA5oBH,GAAA,CAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,QAAA,CAAA;AAAA,CAAA;;;;"}