{"version":3,"file":"Tree.js","sources":["../../src/tree/Tree.tsx"],"sourcesContent":["import React, { forwardRef, useState, useImperativeHandle, useMemo, RefObject } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport classNames from 'classnames';\nimport { TreeNodeState, TreeNodeValue, TypeTreeNodeModel } from '../_common/js/tree/types';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport { TreeOptionData } from '../common';\nimport { usePersistFn } from '../_util/usePersistFn';\nimport { TreeInstanceFunctions, TdTreeProps } from './type';\nimport { useTreeConfig } from './useTreeConfig';\nimport useControllable from './useControllable';\nimport { TreeItemProps } from './interface';\n\nimport TreeItem from './TreeItem';\nimport { useStore } from './useStore';\n\nexport type TreeProps = TdTreeProps;\n\n/**\n * 树组件\n */\nconst Tree = forwardRef((props: TreeProps, ref: React.Ref<TreeInstanceFunctions>) => {\n  const { treeClassNames, transitionNames, transitionClassNames, transitionDuration, locale } = useTreeConfig();\n\n  // 可见节点集合\n  const [visibleNodes, setVisibleNodes] = useState([]);\n\n  const {\n    empty,\n    activable,\n    disabled,\n    checkable,\n    checkProps,\n    disableCheck,\n    hover,\n    icon,\n    line,\n    label,\n    operations,\n    transition, // 动画默认开启\n    expandOnClickNode,\n    onClick,\n  } = props;\n\n  const { value, onChange, expanded, onExpand, onActive, actived } = useControllable(props);\n\n  // 国际化文本初始化\n  const emptyText = locale('empty');\n\n  const store = useStore(\n    {\n      ...props,\n      value,\n      onChange,\n      expanded,\n      onExpand,\n      onActive,\n      actived,\n    },\n    () => {\n      const nodes = store.getNodes();\n      const newVisibleNodes = nodes.filter((node) => node.visible);\n      setVisibleNodes(newVisibleNodes);\n    },\n  );\n\n  // 因为是被 useImperativeHandle 依赖的方法，使用 usePersistFn 变成持久化的。或者也可以使用 useCallback\n  const setExpanded = usePersistFn((node: TreeNode, isExpanded: boolean, e?: React.MouseEvent<HTMLDivElement>) => {\n    const expanded = node.setExpanded(isExpanded);\n    const treeNodeModel = node?.getModel();\n\n    e && onExpand?.(expanded, { node: treeNodeModel, e });\n    return expanded;\n  });\n\n  const setActived = usePersistFn((node: TreeNode, isActived: boolean) => {\n    const actived = node.setActived(isActived);\n    const treeNodeModel = node?.getModel();\n    onActive?.(actived, { node: treeNodeModel });\n    return actived;\n  });\n\n  const setChecked = usePersistFn((node: TreeNode, isChecked: boolean) => {\n    const checked = node.setChecked(isChecked);\n    const treeNodeModel = node?.getModel();\n    onChange?.(checked, { node: treeNodeModel });\n    return checked;\n  });\n\n  const handleItemClick: TreeItemProps['onClick'] = (node, options) => {\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n    const { expand, active, event } = options;\n    if (expand) {\n      setExpanded(node, !node.isExpanded(), event);\n    }\n\n    if (active) {\n      setActived(node, !node.isActived());\n    }\n    const treeNodeModel = node?.getModel();\n    onClick?.({\n      node: treeNodeModel,\n      e: event,\n    });\n  };\n\n  const handleChange: TreeItemProps['onChange'] = (node) => {\n    if (!node || disabled || node.disabled) {\n      return;\n    }\n    setChecked(node, !node.isChecked());\n  };\n\n  /** 对外暴露的公共方法 * */\n  useImperativeHandle<unknown, TreeInstanceFunctions>(\n    ref,\n    () => ({\n      store,\n      appendTo(value, newData) {\n        let list = [];\n        if (Array.isArray(newData)) {\n          list = newData;\n        } else {\n          list = [newData];\n        }\n        list.forEach((item) => {\n          store.appendNodes(value, item);\n        });\n      },\n      getIndex(value: TreeNodeValue): number {\n        return store.getNodeIndex(value);\n      },\n      getItem(value: TreeNodeValue): TypeTreeNodeModel {\n        const node: TreeNode = store.getNode(value);\n        return node?.getModel();\n      },\n      getItems(value?: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getNodes(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getParent(value: TreeNodeValue): TypeTreeNodeModel {\n        const node = store.getParent(value);\n        return node?.getModel();\n      },\n      getParents(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const nodes = store.getParents(value);\n        return nodes.map((node: TreeNode) => node.getModel());\n      },\n      getPath(value: TreeNodeValue): TypeTreeNodeModel[] {\n        const node = store.getNode(value);\n        let pathNodes = [];\n        if (node) {\n          pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n        }\n        return pathNodes;\n      },\n      insertAfter(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertAfter(value, newData);\n      },\n      insertBefore(value: TreeNodeValue, newData: TreeOptionData): void {\n        return store.insertBefore(value, newData);\n      },\n      remove(value: TreeNodeValue): void {\n        return store.remove(value);\n      },\n      setItem(value: TreeNodeValue, options: TreeNodeState): void {\n        const node: TreeNode = this.store.getNode(value);\n        const spec = options;\n        if (node && spec) {\n          if ('expanded' in options) {\n            setExpanded(node, spec.expanded);\n            delete spec.expanded;\n          }\n          if ('actived' in options) {\n            setActived(node, spec.actived);\n            delete spec.actived;\n          }\n          if ('checked' in options) {\n            setChecked(node, spec.checked);\n            delete spec.checked;\n          }\n          node.set(spec);\n        }\n      },\n    }),\n    [store, setExpanded, setActived, setChecked],\n  );\n\n  /* ======== render ======= */\n  // https://github.com/reactjs/react-transition-group/issues/668\n  // CSSTransition 不指定 nodeRef 的时候会使用 findDOMNode 获取 dom\n  // 因为 CSSTransition 是个数组，与 visibleNodes 对应，所以这里根据 visibleNodes 的长度创建 ref 用来保存 dom\n  // visibleNodes 改变的时候，释放上一个 nodeList，防止内存泄漏\n  const nodeList = useMemo<RefObject<HTMLDivElement>[]>(\n    () => visibleNodes.map(() => React.createRef()),\n    [visibleNodes],\n  );\n\n  const renderEmpty = () => {\n    let emptyView = empty || emptyText;\n    if (empty instanceof Function) {\n      emptyView = empty();\n    }\n\n    return emptyView;\n  };\n\n  const renderItems = () => {\n    if (visibleNodes.length <= 0) {\n      return renderEmpty();\n    }\n\n    return (\n      <TransitionGroup name={transitionNames.treeNode} className={treeClassNames.treeList}>\n        {visibleNodes.map((node, index) => (\n          // https://github.com/reactjs/react-transition-group/issues/668\n          <CSSTransition\n            nodeRef={nodeList[index]}\n            key={node.value}\n            timeout={transitionDuration}\n            classNames={transitionClassNames}\n          >\n            <TreeItem\n              ref={nodeList[index]}\n              node={node}\n              empty={empty}\n              icon={icon}\n              label={label}\n              line={line}\n              transition={transition}\n              expandOnClickNode={expandOnClickNode}\n              activable={activable}\n              operations={operations}\n              checkProps={checkProps}\n              disableCheck={disableCheck}\n              onClick={handleItemClick}\n              onChange={handleChange}\n            />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    );\n  };\n  return (\n    <div\n      className={classNames(treeClassNames.tree, {\n        [treeClassNames.disabled]: disabled,\n        [treeClassNames.treeHoverable]: hover,\n        [treeClassNames.treeCheckable]: checkable,\n        [treeClassNames.treeFx]: transition,\n        [treeClassNames.treeBlockNode]: expandOnClickNode,\n      })}\n    >\n      {renderItems()}\n    </div>\n  );\n});\n\nTree.displayName = 'Tree';\n\nTree.defaultProps = {\n  data: [],\n  empty: '',\n  expandLevel: 0,\n  icon: true,\n  line: false,\n  transition: true,\n  lazy: true,\n  valueMode: 'onlyLeaf',\n};\n\nexport default Tree;\n"],"names":["Tree","forwardRef","props","ref","useTreeConfig","treeClassNames","transitionNames","transitionClassNames","transitionDuration","locale","useState","visibleNodes","setVisibleNodes","empty","activable","disabled","checkable","checkProps","disableCheck","hover","icon","line","label","operations","transition","expandOnClickNode","onClick","useControllable","value","onChange","expanded","onExpand","onActive","actived","emptyText","store","useStore","nodes","getNodes","newVisibleNodes","filter","node","visible","setExpanded","usePersistFn","isExpanded","e","expanded2","treeNodeModel","getModel","setActived","isActived","actived2","setChecked","isChecked","checked","handleItemClick","options","expand","active","event","handleChange","useImperativeHandle","appendTo","value2","newData","list","Array","isArray","forEach","item","appendNodes","getIndex","getNodeIndex","getItem","getNode","getItems","map","getParent","getParents","getPath","pathNodes","node2","insertAfter","insertBefore","remove","setItem","spec","set","nodeList","useMemo","React","createRef","renderEmpty","emptyView","Function","renderItems","length","createElement","TransitionGroup","name","treeNode","className","treeList","index","CSSTransition","nodeRef","key","timeout","classNames","TreeItem","tree","treeHoverable","treeCheckable","treeFx","treeBlockNode","displayName","defaultProps","data","expandLevel","lazy","valueMode"],"mappings":"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"}