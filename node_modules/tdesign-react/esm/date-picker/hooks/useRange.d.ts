import React from 'react';
import dayjs from 'dayjs';
import { RangeInputRefInterface } from '../../range-input';
import { TdDateRangePickerProps } from '../type';
export declare const PARTIAL_MAP: {
    first: string;
    second: string;
};
export default function useRange(props: TdDateRangePickerProps): {
    year: number[];
    month: number[];
    value: import("../type").DateRangeValue;
    timeValue: string[];
    inputValue: any;
    popupVisible: boolean;
    rangeInputProps: {
        ref: React.MutableRefObject<RangeInputRefInterface>;
        clearable: boolean;
        prefixIcon: import("../../common").TElement;
        readonly: boolean;
        placeholder: string | string[];
        activeIndex: number;
        suffixIcon: JSX.Element | (() => React.ReactElement<any, string | React.JSXElementConstructor<any>>);
        className: string;
        onClick: ({ position }: {
            position: any;
        }) => void;
        onClear: ({ e }: {
            e: any;
        }) => void;
        onBlur: (newVal: string[], { e, position }: {
            e: any;
            position: any;
        }) => void;
        onFocus: (newVal: string[], { e, position }: {
            e: any;
            position: any;
        }) => void;
        onChange: (newVal: string[], { e, position }: {
            e: any;
            position: any;
        }) => void;
        onEnter: (newVal: string[]) => void;
        disabled?: boolean | boolean[];
        format?: import("../..").InputFormatType | import("../..").InputFormatType[];
        inputProps?: import("../..").InputProps | import("../..").InputProps[];
        label?: React.ReactNode;
        separator?: React.ReactNode;
        showClearIconOnEmpty?: boolean;
        size?: "small" | "medium" | "large";
        status?: "error" | "success" | "warning";
        suffix?: React.ReactNode;
        tips?: React.ReactNode;
        value?: import("../../range-input").RangeInputValue;
        defaultValue?: import("../../range-input").RangeInputValue;
        onMouseenter?: (context: {
            e: React.MouseEvent<HTMLDivElement, MouseEvent>;
        }) => void;
        onMouseleave?: (context: {
            e: React.MouseEvent<HTMLDivElement, MouseEvent>;
        }) => void;
        style?: React.CSSProperties;
    };
    popupProps: {
        overlayStyle: React.CSSProperties | ((triggerElement: HTMLElement, popupElement: HTMLElement) => React.CSSProperties);
        overlayClassName: string;
        onVisibleChange: (visible: boolean, context: any) => void;
        expandAnimation: boolean;
        popperModifiers?: {
            name: string;
            options: Object;
        }[];
        updateScrollTop?: (content: HTMLDivElement) => void;
        attach?: import("../../common").AttachNode;
        children?: React.ReactNode;
        content?: React.ReactNode;
        destroyOnClose?: boolean;
        disabled?: boolean;
        hideEmptyPopup?: boolean;
        placement?: import("../..").PopupPlacement;
        showArrow?: boolean;
        trigger?: "click" | "focus" | "context-menu" | "hover";
        triggerElement?: React.ReactNode;
        visible?: boolean;
        defaultVisible?: boolean;
        zIndex?: number;
        onScroll?: (context: {
            e: React.WheelEvent<HTMLDivElement>;
        }) => void;
        className?: string;
        style?: React.CSSProperties;
    };
    isHoverCell: boolean;
    onChange: import("../../hooks/useControlled").ChangeHandler<import("../type").DateRangeValue, [context: {
        dayjsValue?: dayjs.Dayjs[];
        trigger?: import("../type").DatePickerTriggerSource;
    }]>;
    setYear: React.Dispatch<React.SetStateAction<number[]>>;
    setMonth: React.Dispatch<React.SetStateAction<number[]>>;
    setTimeValue: React.Dispatch<React.SetStateAction<string[]>>;
    setIsHoverCell: React.Dispatch<React.SetStateAction<boolean>>;
    setInputValue: React.Dispatch<any>;
    setPopupVisible: React.Dispatch<React.SetStateAction<boolean>>;
    activeIndex: number;
    setActiveIndex: React.Dispatch<React.SetStateAction<number>>;
    isFirstValueSelected: boolean;
    setIsFirstValueSelected: React.Dispatch<React.SetStateAction<boolean>>;
    cacheValue: any;
    setCacheValue: React.Dispatch<any>;
};
