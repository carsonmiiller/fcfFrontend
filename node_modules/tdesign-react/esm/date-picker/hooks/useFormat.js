/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import dayjs from 'dayjs';
import { extractTimeFormat } from '../../_common/js/date-picker/utils-new.js';
import '../../_chunks/dep-744640f5.js';
import '../../_chunks/dep-0e5be0b2.js';
import '../../_chunks/dep-3d09d1f3.js';
import '../../_chunks/dep-12690e1d.js';
import '../../_chunks/dep-42701b6c.js';
import '../../_chunks/dep-67009882.js';
import '../../_chunks/dep-4705ff31.js';
import '../../_chunks/dep-1b27e5c2.js';
import '../../_chunks/dep-8fb1642c.js';
import '../../_chunks/dep-531703d1.js';
import '../../_chunks/dep-21baa91f.js';
import '../../_chunks/dep-38424935.js';
import '../../_chunks/dep-ad150068.js';
import '../../_chunks/dep-d5f141ac.js';
import '../../_chunks/dep-bcb59ae2.js';
import '../../_chunks/dep-f5ab8a5c.js';
import '../../_chunks/dep-87214e71.js';
import '../../_chunks/dep-5ed520e8.js';
import '../../_chunks/dep-863396c0.js';
import '../../_chunks/dep-12718f01.js';

var TIME_FORMAT = "HH:mm:ss";
function useFormat(props) {
  var mode = props.mode,
      enableTimePicker = props.enableTimePicker,
      formatFromProps = props.format,
      valueTypeFromProps = props.valueType,
      value = props.value;

  var _getDefaultFormat = getDefaultFormat({
    mode: mode,
    enableTimePicker: enableTimePicker,
    format: formatFromProps,
    valueType: valueTypeFromProps
  }),
      format = _getDefaultFormat.format,
      valueType = _getDefaultFormat.valueType,
      timeFormat = _getDefaultFormat.timeFormat;

  if (enableTimePicker) {
    if (!extractTimeFormat(format)) console.error("format: ".concat(format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    if (!extractTimeFormat(valueType) && valueType !== "time-stamp") console.error("valueType: ".concat(valueType, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }

  var formatDate = function formatDate(newDate) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "format";
    var formatMap = {
      format: format,
      valueType: valueType
    };
    var targetFormat = formatMap[type];
    var result;

    if (Array.isArray(newDate)) {
      result = formatRange({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat
      });

      if (result.some(function (r) {
        return r === "Invalid Date";
      })) {
        console.error("\u8BF7\u68C0\u67E5 format\u3001valueType\u3001value \u683C\u5F0F\u662F\u5426\u6709\u6548.\nformat: '".concat(format, "' valueType: '").concat(valueType, "' value: '").concat(value, "'"));
        return [];
      }
    } else {
      result = formatSingle({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat
      });

      if (result === "Invalid Date") {
        console.error("\u8BF7\u68C0\u67E5 format\u3001valueType\u3001value \u683C\u5F0F\u662F\u5426\u6709\u6548.\nformat: '".concat(format, "' valueType: '").concat(valueType, "' value: '").concat(value, "'"));
        return "";
      }
    }

    return result;
  };

  function isValidDate(value2) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "format";
    var formatMap = {
      format: format,
      valueType: valueType
    };
    var realFormat = formatMap[type];

    if (Array.isArray(value2)) {
      if (realFormat === "time-stamp") return value2.every(function (v) {
        return dayjs(v).isValid();
      });
      return value2.every(function (v) {
        return dayjs(v, realFormat, true).isValid();
      });
    }

    if (realFormat === "time-stamp") return dayjs(value2).isValid();
    return dayjs(value2, realFormat, true).isValid();
  }

  function formatTime(value2) {
    var result;

    if (Array.isArray(value2)) {
      result = value2.map(function (v) {
        return dayjs(v).format(timeFormat);
      });
    } else {
      result = dayjs(value2).format(timeFormat);
    }

    return result;
  }

  return {
    format: format,
    valueType: valueType,
    isValidDate: isValidDate,
    timeFormat: timeFormat,
    formatTime: formatTime,
    formatDate: formatDate,
    getDefaultFormat: getDefaultFormat
  };
}

function formatRange(_ref) {
  var newDate = _ref.newDate,
      format = _ref.format,
      targetFormat = _ref.targetFormat;
  if (!newDate || !Array.isArray(newDate)) return [];
  var dayjsDateList = newDate.map(function (d) {
    return d && (dayjs(d).isValid() ? dayjs(d) : dayjs(d, format));
  });

  if (dayjsDateList[0] && dayjsDateList[1] && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()) {
    dayjsDateList.fill(dayjsDateList[1]);
  }

  if (targetFormat === "time-stamp") {
    return dayjsDateList.map(function (da) {
      return da && da.toDate().getTime();
    });
  }

  return dayjsDateList.map(function (da) {
    return da && da.format(targetFormat);
  });
}

function formatSingle(_ref2) {
  var newDate = _ref2.newDate,
      format = _ref2.format,
      targetFormat = _ref2.targetFormat;
  if (!newDate) return "";
  var dayJsDate = dayjs(newDate).isValid() ? dayjs(newDate) : dayjs(newDate, format);
  if (targetFormat === "time-stamp") return dayJsDate.toDate().getTime();
  return dayJsDate.format(targetFormat);
}

function getDefaultFormat(_ref3) {
  var _ref3$mode = _ref3.mode,
      mode = _ref3$mode === void 0 ? "date" : _ref3$mode,
      format = _ref3.format,
      valueType = _ref3.valueType,
      enableTimePicker = _ref3.enableTimePicker;

  if (mode === "year") {
    return {
      format: format || "YYYY",
      valueType: valueType || "YYYY",
      timeFormat: extractTimeFormat(format || "YYYY") || TIME_FORMAT
    };
  }

  if (mode === "month") {
    return {
      format: format || "YYYY-MM",
      valueType: valueType || "YYYY-MM",
      timeFormat: extractTimeFormat(format || "YYYY-MM") || TIME_FORMAT
    };
  }

  if (mode === "date") {
    return {
      format: format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
      valueType: valueType || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
      timeFormat: extractTimeFormat(format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : "")) || TIME_FORMAT
    };
  }
}

export { TIME_FORMAT, useFormat as default, getDefaultFormat };
//# sourceMappingURL=useFormat.js.map
