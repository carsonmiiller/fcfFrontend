import { WheelEvent } from 'react';
import { ClassName, Styles } from '../../common';
import { BaseTableCol, TdBaseTableProps } from '../type';
export interface ColumnStickyLeftAndRight {
    left: number[];
    right: number[];
    top: number[];
    bottom?: number[];
}
export interface TableColFixedClasses {
    left: string;
    right: string;
    lastLeft: string;
    firstRight: string;
    leftShadow: string;
    rightShadow: string;
}
export interface TableRowFixedClasses {
    top: string;
    bottom: string;
    firstBottom: string;
    withoutBorderBottom: string;
}
export interface FixedColumnInfo {
    left?: number;
    right?: number;
    top?: number;
    bottom?: number;
    parent?: FixedColumnInfo;
    children?: string[];
    width?: number;
    height?: number;
    col?: BaseTableCol;
    index?: number;
    lastLeftFixedCol?: boolean;
    firstRightFixedCol?: boolean;
}
export declare type RowAndColFixedPosition = Map<string | number, FixedColumnInfo>;
export declare function getColumnFixedStyles(col: TdBaseTableProps['columns'][0], index: number, rowAndColFixedPosition: RowAndColFixedPosition, tableColFixedClasses: TableColFixedClasses): {
    style?: Styles;
    classes?: ClassName;
};
export declare function getRowFixedStyles(rowId: string | number, rowIndex: number, rowLength: number, fixedRows: TdBaseTableProps['fixedRows'], rowAndColFixedPosition: RowAndColFixedPosition, tableRowFixedClasses: TableRowFixedClasses): {
    style: Styles;
    classes: ClassName;
};
export default function useFixed(props: TdBaseTableProps): {
    tableWidth: number;
    thWidthList: {
        [colKey: string]: number;
    };
    isFixedHeader: boolean;
    isWidthOverflow: boolean;
    tableContentRef: import("react").MutableRefObject<HTMLDivElement>;
    showAffixHeader: boolean;
    isFixedColumn: boolean;
    showColumnShadow: {
        left: boolean;
        right: boolean;
    };
    rowAndColFixedPosition: RowAndColFixedPosition;
    virtualScrollHeaderPos: {
        left: number;
        top: number;
    };
    affixHeaderRef: import("react").MutableRefObject<HTMLDivElement>;
    scrollbarWidth: number;
    refreshTable: () => void;
    updateThWidthListHandler: () => void;
    updateHeaderScroll: (target?: HTMLElement) => void;
    onTableContentScroll: (e: WheelEvent<HTMLDivElement>) => void;
};
