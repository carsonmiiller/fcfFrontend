/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-08260abc.js';
import { _ as _toConsumableArray } from '../../_chunks/dep-bd2639ad.js';
import { _ as _slicedToArray } from '../../_chunks/dep-744640f5.js';
import React from 'react';
import { ChevronRightCircleIcon } from 'tdesign-icons-react';
import { g as get_1 } from '../../_chunks/dep-71b3c60f.js';
import { i as isFunction_1 } from '../../_chunks/dep-531703d1.js';
import classNames from 'classnames';
import useClassName from './useClassName.js';
import useControlled from '../../hooks/useControlled.js';
import { useLocaleReceiver } from '../../locale/LocalReceiver.js';
import '../../_chunks/dep-0e5be0b2.js';
import '../../_chunks/dep-12690e1d.js';
import '../../_chunks/dep-084711a9.js';
import '../../_chunks/dep-a1fd625f.js';
import '../../_chunks/dep-4705ff31.js';
import '../../_chunks/dep-863396c0.js';
import '../../_chunks/dep-21baa91f.js';
import '../../_chunks/dep-12718f01.js';
import '../../_chunks/dep-e3ab6b0d.js';
import '../../_chunks/dep-cc4f2bae.js';
import '../../_chunks/dep-d5f141ac.js';
import '../../_chunks/dep-38424935.js';
import '../../_chunks/dep-ad150068.js';
import '../../_chunks/dep-1b27e5c2.js';
import '../../_chunks/dep-e8f6f682.js';
import '../../_util/useConfig.js';
import '../../_chunks/dep-e3ed7551.js';
import '../../_chunks/dep-ac0cc4dd.js';
import '../../_chunks/dep-6963df41.js';
import '../../_chunks/dep-8fb1642c.js';
import '../../_chunks/dep-bcb59ae2.js';
import '../../_chunks/dep-09c318fb.js';
import '../../_chunks/dep-048c506f.js';
import '../../_chunks/dep-febf8cf9.js';
import '../../_chunks/dep-074143e4.js';
import '../../_chunks/dep-f5ab8a5c.js';
import '../../_chunks/dep-67009882.js';
import '../../locale/zh_CN.js';
import '../../_common/js/global-config/locale/zh_CN.js';
import '../../config-provider/zh_CN_config.js';
import '../../_chunks/dep-0db6b692.js';
import '../../_chunks/dep-6d2697ef.js';
import '../../_chunks/dep-42701b6c.js';
import '../../_util/noop.js';
import '../../config-provider/index.js';
import '../../config-provider/ConfigProvider.js';

function useRowExpand(props) {
  var _props$columns, _props$columns$;

  var expandIcon = props.expandIcon;

  var _useLocaleReceiver = useLocaleReceiver("table"),
      _useLocaleReceiver2 = _slicedToArray(_useLocaleReceiver, 1),
      locale = _useLocaleReceiver2[0];

  var _useClassName = useClassName(),
      tableExpandClasses = _useClassName.tableExpandClasses,
      positiveRotate90 = _useClassName.positiveRotate90,
      tableFullRowClasses = _useClassName.tableFullRowClasses;

  var _useControlled = useControlled(props, "expandedRowKeys", props.onExpandChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      tExpandedRowKeys = _useControlled2[0],
      setTExpandedRowKeys = _useControlled2[1];

  var showExpandedRow = Boolean(props.expandedRow);
  var showExpandIconColumn = props.expandIcon !== false && showExpandedRow;
  var isFirstColumnFixed = ((_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";

  var onToggleExpand = function onToggleExpand(e, row) {
    props.expandOnRowClick && e.stopPropagation();
    var currentId = get_1(row, props.rowKey || "id");
    var index = tExpandedRowKeys.indexOf(currentId);

    var newKeys = _toConsumableArray(tExpandedRowKeys);

    index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
    setTExpandedRowKeys(newKeys, {
      expandedRowData: props.data.filter(function (t) {
        return newKeys.includes(get_1(t, props.rowKey || "id"));
      })
    });
  };

  var renderExpandIcon = function renderExpandIcon(p, expandIcon2) {
    var row = p.row,
        rowIndex = p.rowIndex;
    var currentId = get_1(row, props.rowKey || "id");
    var expanded = tExpandedRowKeys.includes(currentId);
    var defaultIcon = locale.expandIcon || /* @__PURE__ */React.createElement(ChevronRightCircleIcon, null);
    var icon = defaultIcon;

    if (expandIcon2 === false || expandIcon2 === null) {
      icon = null;
    } else if (isFunction_1(expandIcon2)) {
      icon = expandIcon2({
        row: row,
        index: rowIndex
      });
    }

    var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty({}, positiveRotate90, expanded)];
    return /* @__PURE__ */React.createElement("span", {
      className: classNames(classes),
      onClick: function onClick(e) {
        return onToggleExpand(e, row);
      }
    }, icon);
  };

  var getExpandColumn = function getExpandColumn() {
    var expandCol = {
      colKey: "__EXPAND_ROW_ICON_COLUMN__",
      width: 64,
      className: tableExpandClasses.iconCell,
      fixed: isFirstColumnFixed ? "left" : void 0,
      cell: function cell(p) {
        return renderExpandIcon(p, expandIcon);
      }
    };
    return expandCol;
  };

  var renderExpandedRow = function renderExpandedRow(p) {
    var rowId = get_1(p.row, props.rowKey || "id");
    if (!tExpandedRowKeys.includes(rowId)) return null;
    var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
      return item.fixed === "left";
    });
    return /* @__PURE__ */React.createElement("tr", {
      key: "expand_".concat(rowId),
      className: classNames([tableExpandClasses.row, _defineProperty({}, tableFullRowClasses.base, isFixedLeft)])
    }, /* @__PURE__ */React.createElement("td", {
      colSpan: p.columns.length
    }, /* @__PURE__ */React.createElement("div", {
      className: classNames([tableExpandClasses.rowInner, _defineProperty({}, tableFullRowClasses.innerFullRow, isFixedLeft)]),
      style: isFixedLeft ? {
        width: "".concat(p.tableWidth, "px")
      } : {}
    }, /* @__PURE__ */React.createElement("div", {
      className: tableFullRowClasses.innerFullElement
    }, props.expandedRow(p)))));
  };

  var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
    onToggleExpand(p.e, p.row);
  };

  return {
    showExpandedRow: showExpandedRow,
    showExpandIconColumn: showExpandIconColumn,
    getExpandColumn: getExpandColumn,
    renderExpandedRow: renderExpandedRow,
    onInnerExpandRowClick: onInnerExpandRowClick
  };
}

export { useRowExpand as default };
//# sourceMappingURL=useRowExpand.js.map
