{"version":3,"file":"useMultiHeader.js","sources":["../../../src/table/hooks/useMultiHeader.ts"],"sourcesContent":["/**\n * 多级表头相关逻辑\n ** */\n\nimport { TdBaseTableProps, RowspanColspan } from '../type';\n\nexport type ThRowspanAndColspan = Map<any, RowspanColspan>;\n\nexport type TableColumns = TdBaseTableProps['columns'];\n\n// 获取节点深度，即表头总层级\nexport function getNodeDepth(columns: TableColumns, depthMap: Map<any, number>, depth = 1): number {\n  let maxDepth = depth;\n  // 树形结构递归已有较多函数上下文，此处不使用 forEach 迭代\n  for (let i = 0, len = columns.length; i < len; i++) {\n    const col = columns[i];\n    depthMap.set(col, depth);\n    if (col?.children?.length) {\n      const deep = getNodeDepth(col.children, depthMap, depth + 1);\n      if (deep > maxDepth) {\n        maxDepth = deep;\n      }\n    }\n  }\n  return maxDepth;\n}\n\n// 或当前节点的叶子结点宽度\nexport function getChildrenNodeWidth(node: TableColumns[0], count = 0) {\n  let countNew = count;\n  const childrenList = node?.children || [];\n  for (let i = 0, len = childrenList.length; i < len; i++) {\n    const item = childrenList[i];\n    if (item.children) {\n      countNew = getChildrenNodeWidth(item, countNew);\n    } else {\n      countNew += 1;\n    }\n  }\n  return countNew;\n}\n\n// 获取多级表头对应的 colspan 和 rowspan，以及叶子节点\nexport function getThRowspanAndColspan(columns: TableColumns) {\n  const depthMap = new Map<any, number>();\n  const columnsDepth = getNodeDepth(columns, depthMap);\n  const rowspanAndColspanMap: ThRowspanAndColspan = new Map();\n  const loop = (nodes: TableColumns, leafColumns: TableColumns) => {\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const col = nodes[i];\n      const rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;\n      const colspan = col.children ? getChildrenNodeWidth(col) : 1;\n      // 避免存在 rowspan 或者 colspan 空属性\n      const span: RowspanColspan = {};\n      rowspan > 1 && (span.rowspan = rowspan);\n      colspan > 1 && (span.colspan = colspan);\n      rowspanAndColspanMap.set(col, span);\n      if (col?.children?.length) {\n        loop(col.children, leafColumns);\n      } else {\n        leafColumns.push(col);\n      }\n    }\n  };\n  const leafColumns: TableColumns = [];\n  loop(columns, leafColumns);\n  return { rowspanAndColspanMap, leafColumns };\n}\n\n// 表头渲染所需的二维数据\nexport function getThList(columns: TableColumns): Array<TableColumns> {\n  const loop = (nodes: TableColumns, thRows: Array<TableColumns>) => {\n    let thRowData: TableColumns = [];\n    let children: TableColumns = [];\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      const node = nodes[i];\n      const thList = [node];\n      thRowData = thRowData.concat(thList);\n      if (node?.children?.length) {\n        children = children.concat(node.children);\n      }\n    }\n    if (children?.length) {\n      loop(children, thRows);\n    }\n    thRows.push(thRowData);\n    return thRowData;\n  };\n  let list: Array<TableColumns> = [];\n  loop(columns, list);\n  list = list.reverse();\n  return list;\n}\n"],"names":["getNodeDepth","columns","depthMap","depth","maxDepth","i","len","length","col","set","children","deep","getChildrenNodeWidth","node","count","countNew","childrenList","item","getThRowspanAndColspan","Map","columnsDepth","rowspanAndColspanMap","loop","nodes","leafColumns2","rowspan","get","colspan","span","push","leafColumns","getThList","thRows","thRowData","thList","concat","list","reverse"],"mappings":"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"}