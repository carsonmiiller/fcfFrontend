{"version":3,"file":"useTreeSelect.js","sources":["../../../src/table/hooks/useTreeSelect.tsx"],"sourcesContent":["import get from 'lodash/get';\nimport { useMemo } from 'react';\nimport { TdEnhancedTableProps, TdPrimaryTableProps, TableRowData, PrimaryTableCol } from '../type';\nimport TableTreeStore, { KeysType, TableTreeDataMap } from './tree-store';\nimport useControlled from '../../hooks/useControlled';\n\nexport const childrenMap = new Map();\n\nexport interface GetChildrenDataReturnValue {\n  allChildren: Array<any>;\n  allChildrenKeys: Array<string | number>;\n}\n\nexport function getChildrenData(\n  treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'],\n  data: TableRowData,\n  childrenKey: string,\n  rowKey: string,\n  r?: GetChildrenDataReturnValue,\n): GetChildrenDataReturnValue {\n  if (childrenMap.get(data)) return childrenMap.get(data);\n  const result = r || { allChildren: [], allChildrenKeys: [] };\n  const children = get(data, childrenKey);\n  if (!children || !children.length) return result;\n  const selectableChildren = children.filter((item: TableRowData) => !treeDataMap.get(get(item, rowKey))?.disabled);\n  result.allChildren = result.allChildren.concat(selectableChildren);\n  const childrenKeys = selectableChildren.map((item: TableRowData) => get(item, rowKey));\n  result.allChildrenKeys = result.allChildrenKeys.concat(childrenKeys);\n  for (let i = 0, len = children.length; i < len; i++) {\n    const tItem = children[i];\n    const c = get(tItem, childrenKey);\n    if (c?.length) {\n      const nextLevelData = getChildrenData(treeDataMap, tItem, childrenKey, rowKey, result);\n      result.allChildren = result.allChildren.concat(nextLevelData.allChildren);\n      result.allChildrenKeys = result.allChildrenKeys.concat(nextLevelData.allChildrenKeys);\n    }\n  }\n  return result;\n}\n\nexport interface RemoveParams {\n  // 当前选中的数据\n  selectedRowKeys: Array<string | number>;\n  // 需要移除的数据\n  removeKeys: Array<string | number>;\n}\n\nexport interface RemainData {\n  data: Array<any>;\n  keys: Array<string | number>;\n}\n\nexport function removeChildrenKeys(p: RemoveParams, r?: RemainData): RemainData {\n  const { selectedRowKeys, removeKeys } = p;\n  const result = r || { data: [], keys: [] };\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    if (!removeKeys.includes(key)) {\n      result.keys.push(key);\n    }\n  }\n  return result;\n}\n\nexport interface GetKeyDataParams {\n  treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'];\n  data: Array<any>;\n  column: PrimaryTableCol;\n  keys: KeysType;\n}\n\nexport interface GetRowDataParams {\n  treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'];\n  selectedRowKeys: Array<string | number>;\n}\n\nexport function getRowDataByKeys(p: GetRowDataParams) {\n  const { treeDataMap, selectedRowKeys } = p;\n  const result = [];\n  for (let i = 0, len = selectedRowKeys.length; i < len; i++) {\n    const key = selectedRowKeys[i];\n    result.push(treeDataMap.get(key));\n  }\n  return result;\n}\n\ntype SelectChangeParams = Parameters<TdPrimaryTableProps['onSelectChange']>;\n\nexport default function useTreeSelect(props: TdEnhancedTableProps, treeDataMap: TableTreeDataMap) {\n  const { tree, rowKey } = props;\n  // eslint-disable-next-line\n  const [_, setTSelectedRowKeys] = useControlled(props, 'selectedRowKeys', props.onSelectChange);\n  const rowDataKeys = useMemo(\n    () => ({\n      rowKey: rowKey || 'id',\n      childrenKey: tree?.childrenKey || 'children',\n    }),\n    [rowKey, tree?.childrenKey],\n  );\n\n  function onInnerSelectChange(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    if (extraData.currentRowKey === 'CHECK_ALL_BOX') {\n      handleSelectAll(extraData);\n    } else {\n      handleSelect(rowKeys, extraData);\n    }\n  }\n\n  function handleSelectAll(extraData: SelectChangeParams[1]) {\n    const newRowKeys: Array<string | number> = [];\n    const newRowData: TableRowData[] = [];\n    if (extraData.type === 'check') {\n      const arr = [...treeDataMap.values()];\n      for (let i = 0, len = arr.length; i < len; i++) {\n        const item = arr[i];\n        if (!item.disabled) {\n          newRowData.push(item.row);\n          newRowKeys.push(get(item.row, rowDataKeys.rowKey));\n        }\n      }\n    }\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData || [],\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  function handleSelect(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]) {\n    let newRowKeys = [...rowKeys];\n    if (props?.tree.checkStrictly === false) {\n      if (extraData?.type === 'check') {\n        const result = getChildrenData(\n          treeDataMap,\n          extraData.currentRowData,\n          rowDataKeys.childrenKey,\n          rowDataKeys.rowKey,\n        );\n        const { allChildrenKeys } = result;\n        childrenMap.set(extraData.currentRowData, result);\n        newRowKeys = [...new Set(newRowKeys.concat(allChildrenKeys))];\n      } else if (extraData?.type === 'uncheck') {\n        const children = getChildrenData(\n          treeDataMap,\n          extraData.currentRowData,\n          rowDataKeys.childrenKey,\n          rowDataKeys.rowKey,\n        );\n        const result = removeChildrenKeys({\n          selectedRowKeys: rowKeys,\n          removeKeys: children.allChildrenKeys,\n        });\n        newRowKeys = result.keys;\n      }\n    }\n    const newRowData = getRowDataByKeys({ treeDataMap, selectedRowKeys: newRowKeys });\n    const newExtraData = {\n      ...extraData,\n      selectedRowData: newRowData,\n    };\n    setTSelectedRowKeys(newRowKeys, newExtraData);\n  }\n\n  return {\n    onInnerSelectChange,\n  };\n}\n"],"names":["childrenMap","Map","getChildrenData","treeDataMap","data","childrenKey","rowKey","r","get","result","allChildren","allChildrenKeys","children","length","selectableChildren","filter","item","disabled","concat","childrenKeys","map","i","len","tItem","c","nextLevelData","removeChildrenKeys","p","selectedRowKeys","removeKeys","keys","key","includes","push","getRowDataByKeys","useTreeSelect","props","tree","useControlled","onSelectChange","_","setTSelectedRowKeys","rowDataKeys","useMemo","onInnerSelectChange","rowKeys","extraData","currentRowKey","handleSelectAll","handleSelect","newRowKeys","newRowData","type","arr","values","row","newExtraData","selectedRowData","checkStrictly","currentRowData","set","Set"],"mappings":"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"}