{"version":3,"file":"tree-store.js","sources":["../../../src/table/hooks/tree-store.ts"],"sourcesContent":["import get from 'lodash/get';\nimport { isRowSelectedDisabled } from '../utils';\nimport { PrimaryTableCol, TableRowState, TableRowValue, TableRowData } from '../type';\nimport log from '../../_common/js/log';\n\nexport type TableTreeDataMap<T extends TableRowData = TableRowData> = Map<string | number, TableRowState<T>>;\n\nexport interface TableRowModel<T> extends TableRowState<T> {\n  setData?: (key: string | number, data: T) => void;\n}\n\nexport interface KeysType {\n  rowKey: string;\n  childrenKey: string;\n}\n\n/**\n * 表格树形结构处理器\n * Vue 和 React 可以通用\n * 关键函数有以下几个\n * @toggleExpandData 处理树形结构展开收起\n * @setData 更新当行数据\n * @getData 获取单行数据\n * @remove 移除行数据，及其子节点\n * @appendTo 追加子节点到末尾\n */\nclass TableTreeStore<T extends TableRowData = TableRowData> {\n  /** 树形结构 Map 存储 */\n  treeDataMap: TableTreeDataMap<T> = new Map();\n\n  constructor() {\n    this.treeDataMap = new Map();\n  }\n\n  /**\n   * 初始化 treeDataMap，不会改变 dataSource\n   * @param dataSource 树形数据源\n   * @param columns 列配置\n   * @param keys 字段别名\n   */\n  initialTreeStore(dataSource: T[], columns: PrimaryTableCol[], keys: KeysType) {\n    this.treeDataMap?.clear();\n    initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);\n  }\n\n  toggleExpandData(p: { rowIndex: number; row: T }, dataSource: T[], keys: KeysType) {\n    if (!p) {\n      log.error('EnhancedTable', 'the node you want to toggleExpand doest not exist in `data`');\n      return dataSource;\n    }\n    const rowValue = get(p.row, keys.rowKey);\n    if (rowValue === undefined) {\n      log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n      return [];\n    }\n    const r =\n      this.treeDataMap.get(rowValue) ||\n      ({\n        row: p.row,\n        rowIndex: p.rowIndex,\n        expanded: false,\n      } as TableRowState<T>);\n    r.rowIndex = p.rowIndex;\n    r.expanded = !r.expanded;\n    this.treeDataMap.set(rowValue, r);\n    return this.updateExpandRow(r, dataSource, keys);\n  }\n\n  updateExpandRow(changeRow: TableRowState<T>, dataSource: T[], keys: KeysType) {\n    const { row, rowIndex, expanded } = changeRow;\n    const { treeDataMap } = this;\n    const childrenNodes = get(row, keys.childrenKey);\n    if (!row || !childrenNodes) return;\n    if (expanded) {\n      updateChildrenRowState(treeDataMap, changeRow, expanded, keys);\n      updateRowExpandLength(treeDataMap, row, childrenNodes.length, 'expand', keys);\n      // eslint-disable-next-line prefer-spread\n      dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));\n    } else {\n      updateChildrenRowState<T>(treeDataMap, changeRow, expanded, keys);\n      const len = changeRow.expandChildrenLength || childrenNodes.length;\n      updateRowExpandLength(treeDataMap, row, -1 * len, 'fold', keys);\n      dataSource.splice(rowIndex + 1, len);\n    }\n    // 展开或收起后，会影响后续节点的 rowIndex，需同步更新\n    updateRowIndex(treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: rowIndex + 1,\n    });\n    return dataSource;\n  }\n\n  /**\n   * 获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  getData(key: TableRowValue): TableRowState<T> {\n    return this.treeDataMap.get(key);\n  }\n\n  /**\n   * 更新当前行数据，并返回当前行下标\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   * @returns {number} rowIndex 设置的行下标\n   */\n  updateData(key: TableRowValue, newRowData: T, dataSource: T[], keys: KeysType): number {\n    const newKey = get(newRowData, keys.rowKey);\n    const rowState = this.treeDataMap.get(key);\n    // Map 没有查询到，或者查询到的 rowIndex 值为 -1，均表示当前数据不在 dataSource 列表中，未显示在页面中\n    if (!rowState || rowState.rowIndex === -1) {\n      updateRowData(dataSource, key, newRowData, {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      return;\n    }\n    const currentRowIndex = rowState.rowIndex;\n    rowState.row = newRowData;\n    this.treeDataMap.set(key, rowState);\n    if (rowState.parent) {\n      const siblings = get(rowState.parent.row, keys.childrenKey);\n      const index = siblings.findIndex((item: T) => get(item, keys.rowKey) === key);\n      siblings[index] = newRowData;\n    }\n    // key 也发生了变化\n    if (key !== newKey) {\n      this.treeDataMap.set(newKey, rowState);\n      this.treeDataMap.delete(key);\n    } else {\n      this.treeDataMap.set(key, rowState);\n    }\n    return currentRowIndex;\n  }\n\n  /**\n   * 移除指定节点\n   * @param key 行唯一标识\n   */\n  remove(key: TableRowValue, dataSource: T[], keys: KeysType): T[] {\n    const r = this.treeDataMap.get(key);\n    if (r && r.rowIndex >= 0) {\n      // 移除当前节点时，展开的节点的子节点需同步移除\n      const removeNumber = (r.expandChildrenLength || 0) + 1;\n      dataSource.splice(r.rowIndex, removeNumber);\n      if (r.parent) {\n        const siblings = get(r.parent.row, keys.childrenKey);\n        const index = siblings.findIndex((item: TableRowData) => get(item, keys.rowKey) === key);\n        siblings.splice(index, 1);\n        updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, 'delete', {\n          rowKey: keys.rowKey,\n          childrenKey: keys.childrenKey,\n        });\n      }\n      this.treeDataMap.delete(key);\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: r.rowIndex,\n        rowKey: keys.rowKey,\n      });\n    } else {\n      // TODO, remove from dataSource\n      console.warn('TDesign Table Warn: Do not remove this node, which is not appreared.');\n    }\n    return dataSource;\n  }\n\n  /**\n   * 为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  appendTo(key: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    const state = this.treeDataMap.get(key);\n    if (!state) {\n      console.warn(`TDesign Table Warn: ${key} is not exist.`);\n      return;\n    }\n    const newRowValue = get(newData, keys.rowKey);\n    if (this.treeDataMap.get(newRowValue)) {\n      console.warn(`TDesign Table Warn: Duplicated Key. ${newRowValue} is already exists.`);\n      return;\n    }\n    const children: T[] = get(state.row, keys.childrenKey);\n    // 子节点不存在，则表示为叶子节点\n    const isShowNewNode = state.expanded || !children?.length;\n    const newState = {\n      row: newData,\n      level: state.level + 1,\n      parent: state,\n      path: [...state.path],\n      expanded: false,\n      expandChildrenLength: 0,\n      rowIndex: isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + 1 : -1,\n    };\n    newState.path = newState.path.concat(newState);\n    if (children?.length) {\n      state.row[keys.childrenKey].push(newData);\n    } else {\n      // @ts-ignore\n      state.row[keys.childrenKey] = [newData];\n      state.expanded = true;\n    }\n    this.treeDataMap.set(newRowValue, newState);\n    // 如果当前节点为展开状态，则需要继续处理\n    if (isShowNewNode) {\n      dataSource.splice(newState.rowIndex, 0, newData);\n      // 更新展开子节点数量\n      updateRowExpandLength(this.treeDataMap, state.row, 1, 'insert', {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: newState.rowIndex,\n        rowKey: keys.rowKey,\n      });\n    }\n    return dataSource;\n  }\n}\n\nexport default TableTreeStore;\n\nexport function initialTreeDataMap<T extends TableRowData = TableRowData>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  column: PrimaryTableCol,\n  keys: KeysType,\n) {\n  for (let i = 0, len = dataSource.length; i < len; i++) {\n    const item = dataSource[i];\n    const rowValue = get(item, keys.rowKey);\n    if (rowValue === undefined) {\n      log.error('EnhancedTable', '`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.');\n      return;\n    }\n    const state: TableRowState = {\n      row: item,\n      rowIndex: i,\n      expanded: false,\n      level: 0,\n      expandChildrenLength: 0,\n      disabled: isRowSelectedDisabled(column, item, i),\n    };\n    state.path = [state];\n    treeDataMap.set(rowValue, state);\n    const children = get(item, keys.childrenKey);\n    if (children?.length) {\n      initialTreeDataMap(treeDataMap, children, column, keys);\n    }\n  }\n}\n\n/**\n * 更新展开的子节点数量\n * @param rowSate 行数据和状态\n * @param distance 需要调整的展开子节点长度数量，展开时增加，收起时减少。值为负数，表示减\n * @param expanded 展开/收起\n */\nexport function updateRowExpandLength(\n  treeDataMap: TableTreeDataMap,\n  row: TableRowData,\n  distance: number,\n  type: 'expand' | 'fold' | 'delete' | 'insert',\n  keys: KeysType,\n) {\n  let tmp = row;\n  while (tmp) {\n    const state = treeDataMap.get(get(tmp, keys.rowKey));\n    const expandLen = (state.expandChildrenLength || 0) + distance;\n    state.expandChildrenLength = Math.max(0, expandLen);\n    tmp = state?.parent?.row;\n  }\n  // 如果是收起状态，子节点需全部收起，清空子节点展开行数量，设置 expandChildrenLength 为 0\n  if (type === 'fold') {\n    clearRowExpandLength(treeDataMap, row, keys);\n  }\n}\n\nexport function clearRowExpandLength<T>(treeDataMap: TableTreeDataMap, row: T, keys: KeysType) {\n  const children = get(row, keys.childrenKey);\n  if (children?.length) {\n    children.forEach((item: T[]) => {\n      const state = treeDataMap.get(get(item, keys.rowKey));\n      if (!state) return;\n      state.expandChildrenLength = 0;\n      clearRowExpandLength(treeDataMap, state.row, keys);\n    });\n  }\n}\n\n/**\n * 更新子节点行状态，行数据、父节点、层级、路径等数据\n * @param rowState 行状态数据\n * @param expanded 展开或收起\n * @param keys\n */\nexport function updateChildrenRowState<T>(\n  treeDataMap: TableTreeDataMap,\n  rowState: TableRowState<T>,\n  expanded: boolean,\n  keys: KeysType,\n) {\n  const { row, level = 0, rowIndex } = rowState;\n  const childrenNodes = get(row, keys.childrenKey);\n  childrenNodes.forEach((item: T, kidRowIndex: number) => {\n    const rowValue = get(item, keys.rowKey);\n    const index = expanded ? rowIndex + 1 + kidRowIndex : -1;\n    const curState = treeDataMap.get(rowValue);\n    const newState: TableRowState<T> = {\n      ...curState,\n      row: item,\n      rowIndex: index,\n      expanded: false,\n      parent: rowState,\n      level: level + 1,\n      path: [],\n    };\n    newState.path = newState.path.concat(newState);\n    treeDataMap.set(rowValue, newState);\n    // 父节点展开，子节点不一定展开；父节点收起，则所有子节点收起\n    if (!expanded) {\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        updateChildrenRowState(\n          treeDataMap,\n          {\n            ...newState,\n            rowIndex: -1,\n            expanded: false,\n          } as any,\n          expanded,\n          keys,\n        );\n      }\n    }\n  });\n}\n\nexport function updateRowData<T extends TableRowData = TableRowData>(\n  data: T[],\n  key: string | number,\n  newData: T,\n  keys: KeysType,\n) {\n  for (let i = 0, len = data.length; i < len; i++) {\n    const item = data[i];\n    if (get(item, keys.rowKey) === key) {\n      // eslint-disable-next-line no-param-reassign\n      data[i] = newData;\n      return;\n    }\n    const children: T[] = get(item, keys.childrenKey) || [];\n    if (children?.length) {\n      updateRowData(children, key, newData, keys);\n    }\n  }\n}\n\nexport function updateRowIndex<T>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  extra: { rowKey: string; minRowIndex?: number; maxRowIndex?: number },\n) {\n  const start = extra.minRowIndex || 0;\n  const end = extra.maxRowIndex || dataSource.length;\n  for (let rowIndex = start; rowIndex < end; rowIndex++) {\n    const item = dataSource[rowIndex];\n    const state = treeDataMap.get(get(item, extra.rowKey));\n    if (!state) {\n      log.warn('Table', 'tree map went wrong');\n    }\n    state.rowIndex = rowIndex;\n  }\n}\n"],"names":["TableTreeStore","Map","treeDataMap","dataSource","columns","keys","clear","initialTreeDataMap","p","log","error","rowValue","get","row","rowKey","r","rowIndex","expanded","set","updateExpandRow","changeRow","childrenNodes","childrenKey","updateChildrenRowState","updateRowExpandLength","length","splice","apply","concat","len","expandChildrenLength","updateRowIndex","minRowIndex","key","newRowData","newKey","rowState","updateRowData","currentRowIndex","parent","siblings","index","findIndex","item","removeNumber","console","warn","newData","state","newRowValue","children","isShowNewNode","newState","level","path","push","column","i","disabled","isRowSelectedDisabled","distance","type","tmp","expandLen","Math","max","clearRowExpandLength","forEach","kidRowIndex","curState","data","extra","start","end","maxRowIndex"],"mappings":"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"}