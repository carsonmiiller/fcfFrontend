/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import React, { useRef, useState } from 'react';
import classNames from 'classnames';
import { d as debounce_1 } from '../_chunks/dep-0a541e21.js';
import { isNodeOverflow } from '../_util/dom.js';
import { Popup } from '../popup/index.js';
import useConfig from '../_util/useConfig.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-5ed520e8.js';
import '../_chunks/dep-863396c0.js';
import '../_chunks/dep-12718f01.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_chunks/dep-a1fd625f.js';
import '../_util/easing.js';
import '../popup/Popup.js';
import 'react-transition-group';
import 'react-popper';
import '../hooks/useControlled.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../_chunks/dep-e8f6f682.js';
import '../_util/noop.js';
import '../_util/useAnimation.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import '../_util/composeRefs.js';
import '../common/Portal.js';
import 'react-dom';
import '../popup/hooks/useTriggerProps.js';
import '../_util/useClickOutside.js';
import '../popup/utils/getTransitionParams.js';
import '../_util/useMutationObserver.js';
import '../_util/useWindowSize.js';
import '../popup/defaultProps.js';
import '../popup/style/index.js';
import '../popup/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function Ellipsis(props) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var root = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOverflow = _useState2[0],
      setIsOverflow = _useState2[1];

  var ellipsisClasses = classNames(["".concat(classPrefix, "-table__ellipsis"), "".concat(classPrefix, "-text-ellipsis")]);

  var onTriggerMouseenter = function onTriggerMouseenter() {
    if (!root.current) return;
    setIsOverflow(isNodeOverflow(root.current));
  };

  var onTriggerMouseleave = function onTriggerMouseleave() {
    setIsOverflow(isNodeOverflow(root.current));
  };

  var onMouseAround = debounce_1(function (e) {
    e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
  }, 80);
  var cellNode = props.children || props.content;
  var ellipsisContent = /* @__PURE__ */React.createElement("div", {
    ref: root,
    className: ellipsisClasses,
    onMouseEnter: onMouseAround,
    onMouseLeave: onMouseAround
  }, cellNode);
  var content = null;

  if (isOverflow) {
    var rProps = _objectSpread({
      content: props.popupContent || cellNode,
      destroyOnClose: true,
      zIndex: props.zIndex,
      attach: props.attach,
      placement: props.placement
    }, props.popupProps || {});

    content = /* @__PURE__ */React.createElement(Popup, _objectSpread({}, rProps), ellipsisContent);
  } else {
    content = ellipsisContent;
  }

  return content;
}
Ellipsis.displayName = "Ellipsis";

export { Ellipsis as default };
//# sourceMappingURL=Ellipsis.js.map
