/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import React, { forwardRef, useRef, useCallback, useImperativeHandle, useEffect } from 'react';
import { i as isFunction_1 } from '../_chunks/dep-531703d1.js';
import { getScrollContainer } from '../_util/dom.js';
import useConfig from '../_util/useConfig.js';
import { affixDefaultProps } from './defaultProps.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import 'raf';
import '../_chunks/dep-60c49e74.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-12718f01.js';
import '../_util/easing.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-08260abc.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';

var Affix = /*#__PURE__*/forwardRef(function (props, ref) {
  var children = props.children,
      zIndex = props.zIndex,
      container = props.container,
      offsetBottom = props.offsetBottom,
      offsetTop = props.offsetTop,
      onFixedChange = props.onFixedChange;

  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var affixRef = useRef(null);
  var affixWrapRef = useRef(null);
  var placeholderEL = useRef(null);
  var scrollContainer = useRef(null);
  var ticking = useRef(false);
  var handleScroll = useCallback(function () {
    if (!ticking.current) {
      window.requestAnimationFrame(function () {
        var _affixWrapRef$current, _affixWrapRef$current2;

        var _ref = (_affixWrapRef$current = (_affixWrapRef$current2 = affixWrapRef.current) === null || _affixWrapRef$current2 === void 0 ? void 0 : _affixWrapRef$current2.getBoundingClientRect()) !== null && _affixWrapRef$current !== void 0 ? _affixWrapRef$current : {
          top: 0
        },
            _ref$top = _ref.top,
            wrapToTop = _ref$top === void 0 ? 0 : _ref$top,
            _ref$width = _ref.width,
            wrapWidth = _ref$width === void 0 ? 0 : _ref$width,
            _ref$height = _ref.height,
            wrapHeight = _ref$height === void 0 ? 0 : _ref$height;

        var containerToTop = 0;

        if (scrollContainer.current instanceof HTMLElement) {
          containerToTop = scrollContainer.current.getBoundingClientRect().top;
        }

        var calcTop = wrapToTop - containerToTop;
        var containerHeight = scrollContainer.current[scrollContainer.current instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
        var calcBottom = containerToTop + containerHeight - (offsetBottom !== null && offsetBottom !== void 0 ? offsetBottom : 0);
        var fixedTop;

        if (offsetTop !== void 0 && calcTop <= offsetTop) {
          fixedTop = containerToTop + offsetTop;
        } else if (offsetBottom !== void 0 && wrapToTop >= calcBottom) {
          fixedTop = calcBottom;
        } else {
          fixedTop = false;
        }

        if (affixRef.current) {
          var affixed = fixedTop !== false;
          var placeholderStatus = affixWrapRef.current.contains(placeholderEL.current);

          if (affixed) {
            affixRef.current.className = "".concat(classPrefix, "-affix");
            affixRef.current.style.top = "".concat(fixedTop, "px");
            affixRef.current.style.width = "".concat(wrapWidth, "px");
            affixRef.current.style.height = "".concat(wrapHeight, "px");

            if (zIndex) {
              affixRef.current.style.zIndex = "".concat(zIndex);
            }

            if (!placeholderStatus) {
              placeholderEL.current.style.width = "".concat(wrapWidth, "px");
              placeholderEL.current.style.height = "".concat(wrapHeight, "px");
              affixWrapRef.current.appendChild(placeholderEL.current);
            }
          } else {
            affixRef.current.removeAttribute("class");
            affixRef.current.removeAttribute("style");
            placeholderStatus && placeholderEL.current.remove();
          }

          if (isFunction_1(onFixedChange)) {
            onFixedChange(affixed, {
              top: +fixedTop
            });
          }
        }

        ticking.current = false;
      });
    }

    ticking.current = true;
  }, [classPrefix, offsetBottom, offsetTop, onFixedChange, zIndex]);
  useImperativeHandle(ref, function () {
    return {
      handleScroll: handleScroll
    };
  });
  useEffect(function () {
    placeholderEL.current = document.createElement("div");
  }, []);
  useEffect(function () {
    scrollContainer.current = getScrollContainer(container);

    if (scrollContainer.current) {
      handleScroll();
      scrollContainer.current.addEventListener("scroll", handleScroll);
      window.addEventListener("resize", handleScroll);
      return function () {
        scrollContainer.current.removeEventListener("scroll", handleScroll);
        window.removeEventListener("resize", handleScroll);
      };
    }
  }, [container, handleScroll]);
  return /* @__PURE__ */React.createElement("div", {
    ref: affixWrapRef
  }, /* @__PURE__ */React.createElement("div", {
    ref: affixRef
  }, children));
});
Affix.displayName = "Affix";
Affix.defaultProps = affixDefaultProps;

export { Affix as default };
//# sourceMappingURL=Affix.js.map
