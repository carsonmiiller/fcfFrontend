/**
 * tdesign v0.34.4
 * (c) 2022 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-08260abc.js';
import { _ as _slicedToArray } from '../_chunks/dep-744640f5.js';
import { _ as _objectWithoutProperties } from '../_chunks/dep-8ff4a741.js';
import React from 'react';
import classNames from 'classnames';
import useConfig from '../_util/useConfig.js';
import useControlled from '../hooks/useControlled.js';
import CollapsePanel from './CollapsePanel.js';
import CollapseContext from './CollapseContext.js';
import { collapseDefaultProps } from './defaultProps.js';
import '../_chunks/dep-0e5be0b2.js';
import '../_chunks/dep-e3ed7551.js';
import '../_chunks/dep-12690e1d.js';
import '../_chunks/dep-ac0cc4dd.js';
import '../_chunks/dep-e3ab6b0d.js';
import '../_chunks/dep-cc4f2bae.js';
import '../_chunks/dep-531703d1.js';
import '../_chunks/dep-21baa91f.js';
import '../_chunks/dep-4705ff31.js';
import '../_chunks/dep-38424935.js';
import '../_chunks/dep-ad150068.js';
import '../_chunks/dep-d5f141ac.js';
import '../_chunks/dep-1b27e5c2.js';
import '../_chunks/dep-6963df41.js';
import '../_chunks/dep-8fb1642c.js';
import '../_chunks/dep-bcb59ae2.js';
import '../_chunks/dep-12718f01.js';
import '../_chunks/dep-09c318fb.js';
import '../_chunks/dep-048c506f.js';
import '../_chunks/dep-febf8cf9.js';
import '../_chunks/dep-074143e4.js';
import '../_chunks/dep-a1fd625f.js';
import '../_chunks/dep-f5ab8a5c.js';
import '../_chunks/dep-67009882.js';
import '../locale/zh_CN.js';
import '../_common/js/global-config/locale/zh_CN.js';
import '../config-provider/zh_CN_config.js';
import '../_chunks/dep-0db6b692.js';
import '../_chunks/dep-6d2697ef.js';
import '../_chunks/dep-42701b6c.js';
import '../_chunks/dep-e8f6f682.js';
import '../_chunks/dep-863396c0.js';
import '../_util/noop.js';
import 'react-transition-group';
import '../common/FakeArrow.js';

var _excluded = ["defaultExpandAll", "disabled", "expandIconPlacement", "expandOnRowClick", "expandIcon"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Collapse = function Collapse(props) {
  var _useConfig = useConfig(),
      classPrefix = _useConfig.classPrefix;

  var componentName = "".concat(classPrefix, "-collapse");
  var borderlessClass = "".concat(classPrefix, "--border-less");

  var defaultExpandAll = props.defaultExpandAll,
      disabled = props.disabled,
      expandIconPlacement = props.expandIconPlacement,
      expandOnRowClick = props.expandOnRowClick,
      expandIcon = props.expandIcon,
      rest = _objectWithoutProperties(props, _excluded);

  var children = rest.children,
      className = rest.className,
      style = rest.style,
      expandMutex = rest.expandMutex,
      borderless = rest.borderless,
      onChange = rest.onChange;

  var _useControlled = useControlled(props, "value", onChange),
      _useControlled2 = _slicedToArray(_useControlled, 2),
      collapseValue = _useControlled2[0],
      setCollapseValue = _useControlled2[1];

  var updateCollapseValue = function updateCollapseValue(value) {
    var newValue = [].concat(collapseValue || []);
    var index = newValue.indexOf(value);

    if (index >= 0) {
      newValue.splice(index, 1);
    } else if (expandMutex) {
      newValue = [value];
    } else {
      newValue.push(value);
    }

    setCollapseValue(newValue);
  };

  var classes = [componentName, _defineProperty({}, borderlessClass, !!borderless), className];
  var childrenList = React.Children.toArray(children).filter(function (child) {
    return child.type.displayName === CollapsePanel.displayName;
  });

  var collapsePanelList = function collapsePanelList() {
    return childrenList.map(function (child, index) {
      var key = child.key || String(index);

      var childProps = _objectSpread({
        key: key,
        index: index + 1
      }, child.props);

      return /*#__PURE__*/React.cloneElement(child, childProps);
    });
  };

  return /* @__PURE__ */React.createElement(CollapseContext.Provider, {
    value: {
      defaultExpandAll: defaultExpandAll,
      disabled: disabled,
      expandIconPlacement: expandIconPlacement,
      expandOnRowClick: expandOnRowClick,
      expandIcon: expandIcon,
      updateCollapseValue: updateCollapseValue,
      collapseValue: collapseValue
    }
  }, /* @__PURE__ */React.createElement("div", {
    className: classNames(classes),
    style: style
  }, collapsePanelList()));
};

Collapse.Panel = CollapsePanel;
Collapse.displayName = "Collapse";
Collapse.defaultProps = collapseDefaultProps;

export { Collapse as default };
//# sourceMappingURL=Collapse.js.map
